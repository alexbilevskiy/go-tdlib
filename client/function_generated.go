// AUTOGENERATED
package client

import (
	"context"
	"errors"
)

type GetAuthorizationStateRequest struct {
	request
}

func (req GetAuthorizationStateRequest) GetFunctionName() string {
	return "getAuthorizationState"
}

// Returns the current authorization state. This is an offline method. For informational purposes only. Use updateAuthorizationState instead to maintain the current authorization state. Can be called before initialization
func (client *Client) GetAuthorizationState(ctx context.Context) (AuthorizationState, error) {
	req := &GetAuthorizationStateRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	switch result.MetaType {
	case ConstructorAuthorizationStateWaitTdlibParameters:
		return UnmarshalAuthorizationStateWaitTdlibParameters(result.Data)

	case ConstructorAuthorizationStateWaitPhoneNumber:
		return UnmarshalAuthorizationStateWaitPhoneNumber(result.Data)

	case ConstructorAuthorizationStateWaitPremiumPurchase:
		return UnmarshalAuthorizationStateWaitPremiumPurchase(result.Data)

	case ConstructorAuthorizationStateWaitEmailAddress:
		return UnmarshalAuthorizationStateWaitEmailAddress(result.Data)

	case ConstructorAuthorizationStateWaitEmailCode:
		return UnmarshalAuthorizationStateWaitEmailCode(result.Data)

	case ConstructorAuthorizationStateWaitCode:
		return UnmarshalAuthorizationStateWaitCode(result.Data)

	case ConstructorAuthorizationStateWaitOtherDeviceConfirmation:
		return UnmarshalAuthorizationStateWaitOtherDeviceConfirmation(result.Data)

	case ConstructorAuthorizationStateWaitRegistration:
		return UnmarshalAuthorizationStateWaitRegistration(result.Data)

	case ConstructorAuthorizationStateWaitPassword:
		return UnmarshalAuthorizationStateWaitPassword(result.Data)

	case ConstructorAuthorizationStateReady:
		return UnmarshalAuthorizationStateReady(result.Data)

	case ConstructorAuthorizationStateLoggingOut:
		return UnmarshalAuthorizationStateLoggingOut(result.Data)

	case ConstructorAuthorizationStateClosing:
		return UnmarshalAuthorizationStateClosing(result.Data)

	case ConstructorAuthorizationStateClosed:
		return UnmarshalAuthorizationStateClosed(result.Data)

	default:
		return nil, errors.New("invalid type")
	}
}

type SetTdlibParametersRequest struct {
	request
	// Pass true to use Telegram test environment instead of the production environment
	UseTestDc bool `json:"use_test_dc"`
	// The path to the directory for the persistent database; if empty, the current working directory will be used
	DatabaseDirectory string `json:"database_directory"`
	// The path to the directory for storing files; if empty, database_directory will be used
	FilesDirectory string `json:"files_directory"`
	// Encryption key for the database. If the encryption key is invalid, then an error with code 401 will be returned
	DatabaseEncryptionKey []byte `json:"database_encryption_key"`
	// Pass true to keep information about downloaded and uploaded files between application restarts
	UseFileDatabase bool `json:"use_file_database"`
	// Pass true to keep cache of users, basic groups, supergroups, channels and secret chats between restarts. Implies use_file_database
	UseChatInfoDatabase bool `json:"use_chat_info_database"`
	// Pass true to keep cache of chats and messages between restarts. Implies use_chat_info_database
	UseMessageDatabase bool `json:"use_message_database"`
	// Pass true to enable support for secret chats
	UseSecretChats bool `json:"use_secret_chats"`
	// Application identifier for Telegram API access, which can be obtained at https://my.telegram.org
	ApiId int32 `json:"api_id"`
	// Application identifier hash for Telegram API access, which can be obtained at https://my.telegram.org
	ApiHash string `json:"api_hash"`
	// IETF language tag of the user's operating system language; must be non-empty
	SystemLanguageCode string `json:"system_language_code"`
	// Model of the device the application is being run on; must be non-empty
	DeviceModel string `json:"device_model"`
	// Version of the operating system the application is being run on. If empty, the version is automatically detected by TDLib
	SystemVersion string `json:"system_version"`
	// Application version; must be non-empty
	ApplicationVersion string `json:"application_version"`
}

func (req SetTdlibParametersRequest) GetFunctionName() string {
	return "setTdlibParameters"
}

// Sets the parameters for TDLib initialization. Works only when the current authorization state is authorizationStateWaitTdlibParameters
func (client *Client) SetTdlibParameters(ctx context.Context, req *SetTdlibParametersRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetAuthenticationPhoneNumberRequest struct {
	request
	// The phone number of the user, in international format
	PhoneNumber string `json:"phone_number"`
	// Settings for the authentication of the user's phone number; pass null to use default settings
	Settings *PhoneNumberAuthenticationSettings `json:"settings"`
}

func (req SetAuthenticationPhoneNumberRequest) GetFunctionName() string {
	return "setAuthenticationPhoneNumber"
}

// Sets the phone number of the user and sends an authentication code to the user. Works only when the current authorization state is authorizationStateWaitPhoneNumber, or if there is no pending authentication query and the current authorization state is authorizationStateWaitPremiumPurchase, authorizationStateWaitEmailAddress, authorizationStateWaitEmailCode, authorizationStateWaitCode, authorizationStateWaitRegistration, or authorizationStateWaitPassword
func (client *Client) SetAuthenticationPhoneNumber(ctx context.Context, req *SetAuthenticationPhoneNumberRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type CheckAuthenticationPremiumPurchaseRequest struct {
	request
	// ISO 4217 currency code of the payment currency
	Currency string `json:"currency"`
	// Paid amount, in the smallest units of the currency
	Amount int64 `json:"amount"`
}

func (req CheckAuthenticationPremiumPurchaseRequest) GetFunctionName() string {
	return "checkAuthenticationPremiumPurchase"
}

// Checks whether an in-store purchase of Telegram Premium is possible before authorization. Works only when the current authorization state is authorizationStateWaitPremiumPurchase
func (client *Client) CheckAuthenticationPremiumPurchase(ctx context.Context, req *CheckAuthenticationPremiumPurchaseRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetAuthenticationPremiumPurchaseTransactionRequest struct {
	request
	// Information about the transaction
	Transaction StoreTransaction `json:"transaction"`
	// Pass true if this is a restore of a Telegram Premium purchase; only for App Store
	IsRestore bool `json:"is_restore"`
	// ISO 4217 currency code of the payment currency
	Currency string `json:"currency"`
	// Paid amount, in the smallest units of the currency
	Amount int64 `json:"amount"`
}

func (req SetAuthenticationPremiumPurchaseTransactionRequest) GetFunctionName() string {
	return "setAuthenticationPremiumPurchaseTransaction"
}

// Informs server about an in-store purchase of Telegram Premium before authorization. Works only when the current authorization state is authorizationStateWaitPremiumPurchase
func (client *Client) SetAuthenticationPremiumPurchaseTransaction(ctx context.Context, req *SetAuthenticationPremiumPurchaseTransactionRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetAuthenticationEmailAddressRequest struct {
	request
	// The email address of the user
	EmailAddress string `json:"email_address"`
}

func (req SetAuthenticationEmailAddressRequest) GetFunctionName() string {
	return "setAuthenticationEmailAddress"
}

// Sets the email address of the user and sends an authentication code to the email address. Works only when the current authorization state is authorizationStateWaitEmailAddress
func (client *Client) SetAuthenticationEmailAddress(ctx context.Context, req *SetAuthenticationEmailAddressRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ResendAuthenticationCodeRequest struct {
	request
	// Reason of code resending; pass null if unknown
	Reason ResendCodeReason `json:"reason"`
}

func (req ResendAuthenticationCodeRequest) GetFunctionName() string {
	return "resendAuthenticationCode"
}

// Resends an authentication code to the user. Works only when the current authorization state is authorizationStateWaitCode, the next_code_type of the result is not null and the server-specified timeout has passed, or when the current authorization state is authorizationStateWaitEmailCode
func (client *Client) ResendAuthenticationCode(ctx context.Context, req *ResendAuthenticationCodeRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type CheckAuthenticationEmailCodeRequest struct {
	request
	// Email address authentication to check
	Code EmailAddressAuthentication `json:"code"`
}

func (req CheckAuthenticationEmailCodeRequest) GetFunctionName() string {
	return "checkAuthenticationEmailCode"
}

// Checks the authentication of an email address. Works only when the current authorization state is authorizationStateWaitEmailCode
func (client *Client) CheckAuthenticationEmailCode(ctx context.Context, req *CheckAuthenticationEmailCodeRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type CheckAuthenticationCodeRequest struct {
	request
	// Authentication code to check
	Code string `json:"code"`
}

func (req CheckAuthenticationCodeRequest) GetFunctionName() string {
	return "checkAuthenticationCode"
}

// Checks the authentication code. Works only when the current authorization state is authorizationStateWaitCode
func (client *Client) CheckAuthenticationCode(ctx context.Context, req *CheckAuthenticationCodeRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type RequestQrCodeAuthenticationRequest struct {
	request
	// List of user identifiers of other users currently using the application
	OtherUserIds []int64 `json:"other_user_ids"`
}

func (req RequestQrCodeAuthenticationRequest) GetFunctionName() string {
	return "requestQrCodeAuthentication"
}

// Requests QR code authentication by scanning a QR code on another logged in device. Works only when the current authorization state is authorizationStateWaitPhoneNumber, or if there is no pending authentication query and the current authorization state is authorizationStateWaitPremiumPurchase, authorizationStateWaitEmailAddress, authorizationStateWaitEmailCode, authorizationStateWaitCode, authorizationStateWaitRegistration, or authorizationStateWaitPassword
func (client *Client) RequestQrCodeAuthentication(ctx context.Context, req *RequestQrCodeAuthenticationRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type RegisterUserRequest struct {
	request
	// The first name of the user; 1-64 characters
	FirstName string `json:"first_name"`
	// The last name of the user; 0-64 characters
	LastName string `json:"last_name"`
	// Pass true to disable notification about the current user joining Telegram for other users that added them to contact list
	DisableNotification bool `json:"disable_notification"`
}

func (req RegisterUserRequest) GetFunctionName() string {
	return "registerUser"
}

// Finishes user registration. Works only when the current authorization state is authorizationStateWaitRegistration
func (client *Client) RegisterUser(ctx context.Context, req *RegisterUserRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ResetAuthenticationEmailAddressRequest struct {
	request
}

func (req ResetAuthenticationEmailAddressRequest) GetFunctionName() string {
	return "resetAuthenticationEmailAddress"
}

// Resets the login email address. May return an error with a message "TASK_ALREADY_EXISTS" if reset is still pending. Works only when the current authorization state is authorizationStateWaitEmailCode and authorization_state.can_reset_email_address == true
func (client *Client) ResetAuthenticationEmailAddress(ctx context.Context) (*Ok, error) {
	req := &ResetAuthenticationEmailAddressRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type CheckAuthenticationPasswordRequest struct {
	request
	// The 2-step verification password to check
	Password string `json:"password"`
}

func (req CheckAuthenticationPasswordRequest) GetFunctionName() string {
	return "checkAuthenticationPassword"
}

// Checks the 2-step verification password for correctness. Works only when the current authorization state is authorizationStateWaitPassword
func (client *Client) CheckAuthenticationPassword(ctx context.Context, req *CheckAuthenticationPasswordRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type RequestAuthenticationPasswordRecoveryRequest struct {
	request
}

func (req RequestAuthenticationPasswordRecoveryRequest) GetFunctionName() string {
	return "requestAuthenticationPasswordRecovery"
}

// Requests to send a 2-step verification password recovery code to an email address that was previously set up. Works only when the current authorization state is authorizationStateWaitPassword
func (client *Client) RequestAuthenticationPasswordRecovery(ctx context.Context) (*Ok, error) {
	req := &RequestAuthenticationPasswordRecoveryRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type CheckAuthenticationPasswordRecoveryCodeRequest struct {
	request
	// Recovery code to check
	RecoveryCode string `json:"recovery_code"`
}

func (req CheckAuthenticationPasswordRecoveryCodeRequest) GetFunctionName() string {
	return "checkAuthenticationPasswordRecoveryCode"
}

// Checks whether a 2-step verification password recovery code sent to an email address is valid. Works only when the current authorization state is authorizationStateWaitPassword
func (client *Client) CheckAuthenticationPasswordRecoveryCode(ctx context.Context, req *CheckAuthenticationPasswordRecoveryCodeRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type RecoverAuthenticationPasswordRequest struct {
	request
	// Recovery code to check
	RecoveryCode string `json:"recovery_code"`
	// New 2-step verification password of the user; may be empty to remove the password
	NewPassword string `json:"new_password"`
	// New password hint; may be empty
	NewHint string `json:"new_hint"`
}

func (req RecoverAuthenticationPasswordRequest) GetFunctionName() string {
	return "recoverAuthenticationPassword"
}

// Recovers the 2-step verification password with a password recovery code sent to an email address that was previously set up. Works only when the current authorization state is authorizationStateWaitPassword
func (client *Client) RecoverAuthenticationPassword(ctx context.Context, req *RecoverAuthenticationPasswordRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SendAuthenticationFirebaseSmsRequest struct {
	request
	// Play Integrity API or SafetyNet Attestation API token for the Android application, or secret from push notification for the iOS application
	Token string `json:"token"`
}

func (req SendAuthenticationFirebaseSmsRequest) GetFunctionName() string {
	return "sendAuthenticationFirebaseSms"
}

// Sends Firebase Authentication SMS to the phone number of the user. Works only when the current authorization state is authorizationStateWaitCode and the server returned code of the type authenticationCodeTypeFirebaseAndroid or authenticationCodeTypeFirebaseIos
func (client *Client) SendAuthenticationFirebaseSms(ctx context.Context, req *SendAuthenticationFirebaseSmsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ReportAuthenticationCodeMissingRequest struct {
	request
	// Current mobile network code
	MobileNetworkCode string `json:"mobile_network_code"`
}

func (req ReportAuthenticationCodeMissingRequest) GetFunctionName() string {
	return "reportAuthenticationCodeMissing"
}

// Reports that authentication code wasn't delivered via SMS; for official mobile applications only. Works only when the current authorization state is authorizationStateWaitCode
func (client *Client) ReportAuthenticationCodeMissing(ctx context.Context, req *ReportAuthenticationCodeMissingRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type CheckAuthenticationBotTokenRequest struct {
	request
	// The bot token
	Token string `json:"token"`
}

func (req CheckAuthenticationBotTokenRequest) GetFunctionName() string {
	return "checkAuthenticationBotToken"
}

// Checks the authentication token of a bot; to log in as a bot. Works only when the current authorization state is authorizationStateWaitPhoneNumber. Can be used instead of setAuthenticationPhoneNumber and checkAuthenticationCode to log in
func (client *Client) CheckAuthenticationBotToken(ctx context.Context, req *CheckAuthenticationBotTokenRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type LogOutRequest struct {
	request
}

func (req LogOutRequest) GetFunctionName() string {
	return "logOut"
}

// Closes the TDLib instance after a proper logout. Requires an available network connection. All local data will be destroyed. After the logout completes, updateAuthorizationState with authorizationStateClosed will be sent
func (client *Client) LogOut(ctx context.Context) (*Ok, error) {
	req := &LogOutRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type CloseRequest struct {
	request
}

func (req CloseRequest) GetFunctionName() string {
	return "close"
}

// Closes the TDLib instance. All databases will be flushed to disk and properly closed. After the close completes, updateAuthorizationState with authorizationStateClosed will be sent. Can be called before initialization
func (client *Client) Close(ctx context.Context) (*Ok, error) {
	req := &CloseRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type DestroyRequest struct {
	request
}

func (req DestroyRequest) GetFunctionName() string {
	return "destroy"
}

// Closes the TDLib instance, destroying all local data without a proper logout. The current user session will remain in the list of all active sessions. All local data will be destroyed. After the destruction completes updateAuthorizationState with authorizationStateClosed will be sent. Can be called before authorization
func (client *Client) Destroy(ctx context.Context) (*Ok, error) {
	req := &DestroyRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ConfirmQrCodeAuthenticationRequest struct {
	request
	// A link from a QR code. The link must be scanned by the in-app camera
	Link string `json:"link"`
}

func (req ConfirmQrCodeAuthenticationRequest) GetFunctionName() string {
	return "confirmQrCodeAuthentication"
}

// Confirms QR code authentication on another device. Returns created session on success
func (client *Client) ConfirmQrCodeAuthentication(ctx context.Context, req *ConfirmQrCodeAuthenticationRequest) (*Session, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalSession(result.Data)
}

type GetCurrentStateRequest struct {
	request
}

func (req GetCurrentStateRequest) GetFunctionName() string {
	return "getCurrentState"
}

// Returns all updates needed to restore current TDLib state, i.e. all actual updateAuthorizationState/updateUser/updateNewChat and others. This is especially useful if TDLib is run in a separate process. Can be called before initialization
func (client *Client) GetCurrentState(ctx context.Context) (*Updates, error) {
	req := &GetCurrentStateRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalUpdates(result.Data)
}

type SetDatabaseEncryptionKeyRequest struct {
	request
	// New encryption key
	NewEncryptionKey []byte `json:"new_encryption_key"`
}

func (req SetDatabaseEncryptionKeyRequest) GetFunctionName() string {
	return "setDatabaseEncryptionKey"
}

// Changes the database encryption key. Usually the encryption key is never changed and is stored in some OS keychain
func (client *Client) SetDatabaseEncryptionKey(ctx context.Context, req *SetDatabaseEncryptionKeyRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetPasswordStateRequest struct {
	request
}

func (req GetPasswordStateRequest) GetFunctionName() string {
	return "getPasswordState"
}

// Returns the current state of 2-step verification
func (client *Client) GetPasswordState(ctx context.Context) (*PasswordState, error) {
	req := &GetPasswordStateRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalPasswordState(result.Data)
}

type SetPasswordRequest struct {
	request
	// Previous 2-step verification password of the user
	OldPassword string `json:"old_password"`
	// New 2-step verification password of the user; may be empty to remove the password
	NewPassword string `json:"new_password"`
	// New password hint; may be empty
	NewHint string `json:"new_hint"`
	// Pass true to change also the recovery email address
	SetRecoveryEmailAddress bool `json:"set_recovery_email_address"`
	// New recovery email address; may be empty
	NewRecoveryEmailAddress string `json:"new_recovery_email_address"`
}

func (req SetPasswordRequest) GetFunctionName() string {
	return "setPassword"
}

// Changes the 2-step verification password for the current user. If a new recovery email address is specified, then the change will not be applied until the new recovery email address is confirmed
func (client *Client) SetPassword(ctx context.Context, req *SetPasswordRequest) (*PasswordState, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalPasswordState(result.Data)
}

type SetLoginEmailAddressRequest struct {
	request
	// New login email address
	NewLoginEmailAddress string `json:"new_login_email_address"`
}

func (req SetLoginEmailAddressRequest) GetFunctionName() string {
	return "setLoginEmailAddress"
}

// Changes the login email address of the user. The email address can be changed only if the current user already has login email and passwordState.login_email_address_pattern is non-empty. The change will not be applied until the new login email address is confirmed with checkLoginEmailAddressCode. To use Apple ID/Google ID instead of an email address, call checkLoginEmailAddressCode directly
func (client *Client) SetLoginEmailAddress(ctx context.Context, req *SetLoginEmailAddressRequest) (*EmailAddressAuthenticationCodeInfo, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalEmailAddressAuthenticationCodeInfo(result.Data)
}

type ResendLoginEmailAddressCodeRequest struct {
	request
}

func (req ResendLoginEmailAddressCodeRequest) GetFunctionName() string {
	return "resendLoginEmailAddressCode"
}

// Resends the login email address verification code
func (client *Client) ResendLoginEmailAddressCode(ctx context.Context) (*EmailAddressAuthenticationCodeInfo, error) {
	req := &ResendLoginEmailAddressCodeRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalEmailAddressAuthenticationCodeInfo(result.Data)
}

type CheckLoginEmailAddressCodeRequest struct {
	request
	// Email address authentication to check
	Code EmailAddressAuthentication `json:"code"`
}

func (req CheckLoginEmailAddressCodeRequest) GetFunctionName() string {
	return "checkLoginEmailAddressCode"
}

// Checks the login email address authentication
func (client *Client) CheckLoginEmailAddressCode(ctx context.Context, req *CheckLoginEmailAddressCodeRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetRecoveryEmailAddressRequest struct {
	request
	// The 2-step verification password for the current user
	Password string `json:"password"`
}

func (req GetRecoveryEmailAddressRequest) GetFunctionName() string {
	return "getRecoveryEmailAddress"
}

// Returns a 2-step verification recovery email address that was previously set up. This method can be used to verify a password provided by the user
func (client *Client) GetRecoveryEmailAddress(ctx context.Context, req *GetRecoveryEmailAddressRequest) (*RecoveryEmailAddress, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalRecoveryEmailAddress(result.Data)
}

type SetRecoveryEmailAddressRequest struct {
	request
	// The 2-step verification password of the current user
	Password string `json:"password"`
	// New recovery email address
	NewRecoveryEmailAddress string `json:"new_recovery_email_address"`
}

func (req SetRecoveryEmailAddressRequest) GetFunctionName() string {
	return "setRecoveryEmailAddress"
}

// Changes the 2-step verification recovery email address of the user. If a new recovery email address is specified, then the change will not be applied until the new recovery email address is confirmed. If new_recovery_email_address is the same as the email address that is currently set up, this call succeeds immediately and aborts all other requests waiting for an email confirmation
func (client *Client) SetRecoveryEmailAddress(ctx context.Context, req *SetRecoveryEmailAddressRequest) (*PasswordState, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalPasswordState(result.Data)
}

type CheckRecoveryEmailAddressCodeRequest struct {
	request
	// Verification code to check
	Code string `json:"code"`
}

func (req CheckRecoveryEmailAddressCodeRequest) GetFunctionName() string {
	return "checkRecoveryEmailAddressCode"
}

// Checks the 2-step verification recovery email address verification code
func (client *Client) CheckRecoveryEmailAddressCode(ctx context.Context, req *CheckRecoveryEmailAddressCodeRequest) (*PasswordState, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalPasswordState(result.Data)
}

type ResendRecoveryEmailAddressCodeRequest struct {
	request
}

func (req ResendRecoveryEmailAddressCodeRequest) GetFunctionName() string {
	return "resendRecoveryEmailAddressCode"
}

// Resends the 2-step verification recovery email address verification code
func (client *Client) ResendRecoveryEmailAddressCode(ctx context.Context) (*PasswordState, error) {
	req := &ResendRecoveryEmailAddressCodeRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalPasswordState(result.Data)
}

type CancelRecoveryEmailAddressVerificationRequest struct {
	request
}

func (req CancelRecoveryEmailAddressVerificationRequest) GetFunctionName() string {
	return "cancelRecoveryEmailAddressVerification"
}

// Cancels verification of the 2-step verification recovery email address
func (client *Client) CancelRecoveryEmailAddressVerification(ctx context.Context) (*PasswordState, error) {
	req := &CancelRecoveryEmailAddressVerificationRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalPasswordState(result.Data)
}

type RequestPasswordRecoveryRequest struct {
	request
}

func (req RequestPasswordRecoveryRequest) GetFunctionName() string {
	return "requestPasswordRecovery"
}

// Requests to send a 2-step verification password recovery code to an email address that was previously set up
func (client *Client) RequestPasswordRecovery(ctx context.Context) (*EmailAddressAuthenticationCodeInfo, error) {
	req := &RequestPasswordRecoveryRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalEmailAddressAuthenticationCodeInfo(result.Data)
}

type CheckPasswordRecoveryCodeRequest struct {
	request
	// Recovery code to check
	RecoveryCode string `json:"recovery_code"`
}

func (req CheckPasswordRecoveryCodeRequest) GetFunctionName() string {
	return "checkPasswordRecoveryCode"
}

// Checks whether a 2-step verification password recovery code sent to an email address is valid
func (client *Client) CheckPasswordRecoveryCode(ctx context.Context, req *CheckPasswordRecoveryCodeRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type RecoverPasswordRequest struct {
	request
	// Recovery code to check
	RecoveryCode string `json:"recovery_code"`
	// New 2-step verification password of the user; may be empty to remove the password
	NewPassword string `json:"new_password"`
	// New password hint; may be empty
	NewHint string `json:"new_hint"`
}

func (req RecoverPasswordRequest) GetFunctionName() string {
	return "recoverPassword"
}

// Recovers the 2-step verification password using a recovery code sent to an email address that was previously set up
func (client *Client) RecoverPassword(ctx context.Context, req *RecoverPasswordRequest) (*PasswordState, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalPasswordState(result.Data)
}

type ResetPasswordRequest struct {
	request
}

func (req ResetPasswordRequest) GetFunctionName() string {
	return "resetPassword"
}

// Removes 2-step verification password without previous password and access to recovery email address. The password can't be reset immediately and the request needs to be repeated after the specified time
func (client *Client) ResetPassword(ctx context.Context) (ResetPasswordResult, error) {
	req := &ResetPasswordRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	switch result.MetaType {
	case ConstructorResetPasswordResultOk:
		return UnmarshalResetPasswordResultOk(result.Data)

	case ConstructorResetPasswordResultPending:
		return UnmarshalResetPasswordResultPending(result.Data)

	case ConstructorResetPasswordResultDeclined:
		return UnmarshalResetPasswordResultDeclined(result.Data)

	default:
		return nil, errors.New("invalid type")
	}
}

type CancelPasswordResetRequest struct {
	request
}

func (req CancelPasswordResetRequest) GetFunctionName() string {
	return "cancelPasswordReset"
}

// Cancels reset of 2-step verification password. The method can be called if passwordState.pending_reset_date > 0
func (client *Client) CancelPasswordReset(ctx context.Context) (*Ok, error) {
	req := &CancelPasswordResetRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type CreateTemporaryPasswordRequest struct {
	request
	// The 2-step verification password of the current user
	Password string `json:"password"`
	// Time during which the temporary password will be valid, in seconds; must be between 60 and 86400
	ValidFor int32 `json:"valid_for"`
}

func (req CreateTemporaryPasswordRequest) GetFunctionName() string {
	return "createTemporaryPassword"
}

// Creates a new temporary password for processing payments
func (client *Client) CreateTemporaryPassword(ctx context.Context, req *CreateTemporaryPasswordRequest) (*TemporaryPasswordState, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalTemporaryPasswordState(result.Data)
}

type GetTemporaryPasswordStateRequest struct {
	request
}

func (req GetTemporaryPasswordStateRequest) GetFunctionName() string {
	return "getTemporaryPasswordState"
}

// Returns information about the current temporary password
func (client *Client) GetTemporaryPasswordState(ctx context.Context) (*TemporaryPasswordState, error) {
	req := &GetTemporaryPasswordStateRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalTemporaryPasswordState(result.Data)
}

type GetMeRequest struct {
	request
}

func (req GetMeRequest) GetFunctionName() string {
	return "getMe"
}

// Returns the current user
func (client *Client) GetMe(ctx context.Context) (*User, error) {
	req := &GetMeRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalUser(result.Data)
}

type GetUserRequest struct {
	request
	// User identifier
	UserId int64 `json:"user_id"`
}

func (req GetUserRequest) GetFunctionName() string {
	return "getUser"
}

// Returns information about a user by their identifier. This is an offline method if the current user is not a bot
func (client *Client) GetUser(ctx context.Context, req *GetUserRequest) (*User, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalUser(result.Data)
}

type GetUserFullInfoRequest struct {
	request
	// User identifier
	UserId int64 `json:"user_id"`
}

func (req GetUserFullInfoRequest) GetFunctionName() string {
	return "getUserFullInfo"
}

// Returns full information about a user by their identifier
func (client *Client) GetUserFullInfo(ctx context.Context, req *GetUserFullInfoRequest) (*UserFullInfo, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalUserFullInfo(result.Data)
}

type GetBasicGroupRequest struct {
	request
	// Basic group identifier
	BasicGroupId int64 `json:"basic_group_id"`
}

func (req GetBasicGroupRequest) GetFunctionName() string {
	return "getBasicGroup"
}

// Returns information about a basic group by its identifier. This is an offline method if the current user is not a bot
func (client *Client) GetBasicGroup(ctx context.Context, req *GetBasicGroupRequest) (*BasicGroup, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalBasicGroup(result.Data)
}

type GetBasicGroupFullInfoRequest struct {
	request
	// Basic group identifier
	BasicGroupId int64 `json:"basic_group_id"`
}

func (req GetBasicGroupFullInfoRequest) GetFunctionName() string {
	return "getBasicGroupFullInfo"
}

// Returns full information about a basic group by its identifier
func (client *Client) GetBasicGroupFullInfo(ctx context.Context, req *GetBasicGroupFullInfoRequest) (*BasicGroupFullInfo, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalBasicGroupFullInfo(result.Data)
}

type GetSupergroupRequest struct {
	request
	// Supergroup or channel identifier
	SupergroupId int64 `json:"supergroup_id"`
}

func (req GetSupergroupRequest) GetFunctionName() string {
	return "getSupergroup"
}

// Returns information about a supergroup or a channel by its identifier. This is an offline method if the current user is not a bot
func (client *Client) GetSupergroup(ctx context.Context, req *GetSupergroupRequest) (*Supergroup, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalSupergroup(result.Data)
}

type GetSupergroupFullInfoRequest struct {
	request
	// Supergroup or channel identifier
	SupergroupId int64 `json:"supergroup_id"`
}

func (req GetSupergroupFullInfoRequest) GetFunctionName() string {
	return "getSupergroupFullInfo"
}

// Returns full information about a supergroup or a channel by its identifier, cached for up to 1 minute
func (client *Client) GetSupergroupFullInfo(ctx context.Context, req *GetSupergroupFullInfoRequest) (*SupergroupFullInfo, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalSupergroupFullInfo(result.Data)
}

type GetSecretChatRequest struct {
	request
	// Secret chat identifier
	SecretChatId int32 `json:"secret_chat_id"`
}

func (req GetSecretChatRequest) GetFunctionName() string {
	return "getSecretChat"
}

// Returns information about a secret chat by its identifier. This is an offline method
func (client *Client) GetSecretChat(ctx context.Context, req *GetSecretChatRequest) (*SecretChat, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalSecretChat(result.Data)
}

type GetChatRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
}

func (req GetChatRequest) GetFunctionName() string {
	return "getChat"
}

// Returns information about a chat by its identifier. This is an offline method if the current user is not a bot
func (client *Client) GetChat(ctx context.Context, req *GetChatRequest) (*Chat, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChat(result.Data)
}

type GetMessageRequest struct {
	request
	// Identifier of the chat the message belongs to
	ChatId int64 `json:"chat_id"`
	// Identifier of the message to get
	MessageId int64 `json:"message_id"`
}

func (req GetMessageRequest) GetFunctionName() string {
	return "getMessage"
}

// Returns information about a message. Returns a 404 error if the message doesn't exist
func (client *Client) GetMessage(ctx context.Context, req *GetMessageRequest) (*Message, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessage(result.Data)
}

type GetMessageLocallyRequest struct {
	request
	// Identifier of the chat the message belongs to
	ChatId int64 `json:"chat_id"`
	// Identifier of the message to get
	MessageId int64 `json:"message_id"`
}

func (req GetMessageLocallyRequest) GetFunctionName() string {
	return "getMessageLocally"
}

// Returns information about a message, if it is available without sending network request. Returns a 404 error if message isn't available locally. This is an offline method
func (client *Client) GetMessageLocally(ctx context.Context, req *GetMessageLocallyRequest) (*Message, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessage(result.Data)
}

type GetRepliedMessageRequest struct {
	request
	// Identifier of the chat the message belongs to
	ChatId int64 `json:"chat_id"`
	// Identifier of the reply message
	MessageId int64 `json:"message_id"`
}

func (req GetRepliedMessageRequest) GetFunctionName() string {
	return "getRepliedMessage"
}

// Returns information about a non-bundled message that is replied by a given message. Also, returns the pinned message, the game message, the invoice message, the message with a previously set same background, the giveaway message, and the topic creation message for messages of the types messagePinMessage, messageGameScore, messagePaymentSuccessful, messageChatSetBackground, messageGiveawayCompleted and topic messages without non-bundled replied message respectively. Returns a 404 error if the message doesn't exist
func (client *Client) GetRepliedMessage(ctx context.Context, req *GetRepliedMessageRequest) (*Message, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessage(result.Data)
}

type GetChatPinnedMessageRequest struct {
	request
	// Identifier of the chat the message belongs to
	ChatId int64 `json:"chat_id"`
}

func (req GetChatPinnedMessageRequest) GetFunctionName() string {
	return "getChatPinnedMessage"
}

// Returns information about a newest pinned message in the chat. Returns a 404 error if the message doesn't exist
func (client *Client) GetChatPinnedMessage(ctx context.Context, req *GetChatPinnedMessageRequest) (*Message, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessage(result.Data)
}

type GetCallbackQueryMessageRequest struct {
	request
	// Identifier of the chat the message belongs to
	ChatId int64 `json:"chat_id"`
	// Message identifier
	MessageId int64 `json:"message_id"`
	// Identifier of the callback query
	CallbackQueryId JsonInt64 `json:"callback_query_id"`
}

func (req GetCallbackQueryMessageRequest) GetFunctionName() string {
	return "getCallbackQueryMessage"
}

// Returns information about a message with the callback button that originated a callback query; for bots only
func (client *Client) GetCallbackQueryMessage(ctx context.Context, req *GetCallbackQueryMessageRequest) (*Message, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessage(result.Data)
}

type GetMessagesRequest struct {
	request
	// Identifier of the chat the messages belong to
	ChatId int64 `json:"chat_id"`
	// Identifiers of the messages to get
	MessageIds []int64 `json:"message_ids"`
}

func (req GetMessagesRequest) GetFunctionName() string {
	return "getMessages"
}

// Returns information about messages. If a message is not found, returns null on the corresponding position of the result
func (client *Client) GetMessages(ctx context.Context, req *GetMessagesRequest) (*Messages, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessages(result.Data)
}

type GetMessagePropertiesRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Identifier of the message
	MessageId int64 `json:"message_id"`
}

func (req GetMessagePropertiesRequest) GetFunctionName() string {
	return "getMessageProperties"
}

// Returns properties of a message. This is an offline method
func (client *Client) GetMessageProperties(ctx context.Context, req *GetMessagePropertiesRequest) (*MessageProperties, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessageProperties(result.Data)
}

type GetMessageThreadRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Identifier of the message
	MessageId int64 `json:"message_id"`
}

func (req GetMessageThreadRequest) GetFunctionName() string {
	return "getMessageThread"
}

// Returns information about a message thread. Can be used only if messageProperties.can_get_message_thread == true
func (client *Client) GetMessageThread(ctx context.Context, req *GetMessageThreadRequest) (*MessageThreadInfo, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessageThreadInfo(result.Data)
}

type GetMessageReadDateRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Identifier of the message
	MessageId int64 `json:"message_id"`
}

func (req GetMessageReadDateRequest) GetFunctionName() string {
	return "getMessageReadDate"
}

// Returns read date of a recent outgoing message in a private chat. The method can be called if messageProperties.can_get_read_date == true
func (client *Client) GetMessageReadDate(ctx context.Context, req *GetMessageReadDateRequest) (MessageReadDate, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	switch result.MetaType {
	case ConstructorMessageReadDateRead:
		return UnmarshalMessageReadDateRead(result.Data)

	case ConstructorMessageReadDateUnread:
		return UnmarshalMessageReadDateUnread(result.Data)

	case ConstructorMessageReadDateTooOld:
		return UnmarshalMessageReadDateTooOld(result.Data)

	case ConstructorMessageReadDateUserPrivacyRestricted:
		return UnmarshalMessageReadDateUserPrivacyRestricted(result.Data)

	case ConstructorMessageReadDateMyPrivacyRestricted:
		return UnmarshalMessageReadDateMyPrivacyRestricted(result.Data)

	default:
		return nil, errors.New("invalid type")
	}
}

type GetMessageViewersRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Identifier of the message
	MessageId int64 `json:"message_id"`
}

func (req GetMessageViewersRequest) GetFunctionName() string {
	return "getMessageViewers"
}

// Returns viewers of a recent outgoing message in a basic group or a supergroup chat. For video notes and voice notes only users, opened content of the message, are returned. The method can be called if messageProperties.can_get_viewers == true
func (client *Client) GetMessageViewers(ctx context.Context, req *GetMessageViewersRequest) (*MessageViewers, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessageViewers(result.Data)
}

type GetFileRequest struct {
	request
	// Identifier of the file to get
	FileId int32 `json:"file_id"`
}

func (req GetFileRequest) GetFunctionName() string {
	return "getFile"
}

// Returns information about a file. This is an offline method
func (client *Client) GetFile(ctx context.Context, req *GetFileRequest) (*File, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFile(result.Data)
}

type GetRemoteFileRequest struct {
	request
	// Remote identifier of the file to get
	RemoteFileId string `json:"remote_file_id"`
	// File type; pass null if unknown
	FileType FileType `json:"file_type"`
}

func (req GetRemoteFileRequest) GetFunctionName() string {
	return "getRemoteFile"
}

// Returns information about a file by its remote identifier. This is an offline method. Can be used to register a URL as a file for further uploading, or sending as a message. Even the request succeeds, the file can be used only if it is still accessible to the user. For example, if the file is from a message, then the message must be not deleted and accessible to the user. If the file database is disabled, then the corresponding object with the file must be preloaded by the application
func (client *Client) GetRemoteFile(ctx context.Context, req *GetRemoteFileRequest) (*File, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFile(result.Data)
}

type LoadChatsRequest struct {
	request
	// The chat list in which to load chats; pass null to load chats from the main chat list
	ChatList ChatList `json:"chat_list"`
	// The maximum number of chats to be loaded. For optimal performance, the number of loaded chats is chosen by TDLib and can be smaller than the specified limit, even if the end of the list is not reached
	Limit int32 `json:"limit"`
}

func (req LoadChatsRequest) GetFunctionName() string {
	return "loadChats"
}

// Loads more chats from a chat list. The loaded chats and their positions in the chat list will be sent through updates. Chats are sorted by the pair (chat.position.order, chat.id) in descending order. Returns a 404 error if all chats have been loaded
func (client *Client) LoadChats(ctx context.Context, req *LoadChatsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetChatsRequest struct {
	request
	// The chat list in which to return chats; pass null to get chats from the main chat list
	ChatList ChatList `json:"chat_list"`
	// The maximum number of chats to be returned
	Limit int32 `json:"limit"`
}

func (req GetChatsRequest) GetFunctionName() string {
	return "getChats"
}

// Returns an ordered list of chats from the beginning of a chat list. For informational purposes only. Use loadChats and updates processing instead to maintain chat lists in a consistent state
func (client *Client) GetChats(ctx context.Context, req *GetChatsRequest) (*Chats, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChats(result.Data)
}

type SearchPublicChatRequest struct {
	request
	// Username to be resolved
	Username string `json:"username"`
}

func (req SearchPublicChatRequest) GetFunctionName() string {
	return "searchPublicChat"
}

// Searches a public chat by its username. Currently, only private chats, supergroups and channels can be public. Returns the chat if found; otherwise, an error is returned
func (client *Client) SearchPublicChat(ctx context.Context, req *SearchPublicChatRequest) (*Chat, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChat(result.Data)
}

type SearchPublicChatsRequest struct {
	request
	// Query to search for
	Query string `json:"query"`
}

func (req SearchPublicChatsRequest) GetFunctionName() string {
	return "searchPublicChats"
}

// Searches public chats by looking for specified query in their username and title. Currently, only private chats, supergroups and channels can be public. Returns a meaningful number of results. Excludes private chats with contacts and chats from the chat list from the results
func (client *Client) SearchPublicChats(ctx context.Context, req *SearchPublicChatsRequest) (*Chats, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChats(result.Data)
}

type SearchChatsRequest struct {
	request
	// Query to search for. If the query is empty, returns up to 50 recently found chats
	Query string `json:"query"`
	// The maximum number of chats to be returned
	Limit int32 `json:"limit"`
}

func (req SearchChatsRequest) GetFunctionName() string {
	return "searchChats"
}

// Searches for the specified query in the title and username of already known chats. This is an offline method. Returns chats in the order seen in the main chat list
func (client *Client) SearchChats(ctx context.Context, req *SearchChatsRequest) (*Chats, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChats(result.Data)
}

type SearchChatsOnServerRequest struct {
	request
	// Query to search for
	Query string `json:"query"`
	// The maximum number of chats to be returned
	Limit int32 `json:"limit"`
}

func (req SearchChatsOnServerRequest) GetFunctionName() string {
	return "searchChatsOnServer"
}

// Searches for the specified query in the title and username of already known chats via request to the server. Returns chats in the order seen in the main chat list
func (client *Client) SearchChatsOnServer(ctx context.Context, req *SearchChatsOnServerRequest) (*Chats, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChats(result.Data)
}

type GetRecommendedChatsRequest struct {
	request
}

func (req GetRecommendedChatsRequest) GetFunctionName() string {
	return "getRecommendedChats"
}

// Returns a list of channel chats recommended to the current user
func (client *Client) GetRecommendedChats(ctx context.Context) (*Chats, error) {
	req := &GetRecommendedChatsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChats(result.Data)
}

type GetChatSimilarChatsRequest struct {
	request
	// Identifier of the target chat; must be an identifier of a channel chat
	ChatId int64 `json:"chat_id"`
}

func (req GetChatSimilarChatsRequest) GetFunctionName() string {
	return "getChatSimilarChats"
}

// Returns a list of chats similar to the given chat
func (client *Client) GetChatSimilarChats(ctx context.Context, req *GetChatSimilarChatsRequest) (*Chats, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChats(result.Data)
}

type GetChatSimilarChatCountRequest struct {
	request
	// Identifier of the target chat; must be an identifier of a channel chat
	ChatId int64 `json:"chat_id"`
	// Pass true to get the number of chats without sending network requests, or -1 if the number of chats is unknown locally
	ReturnLocal bool `json:"return_local"`
}

func (req GetChatSimilarChatCountRequest) GetFunctionName() string {
	return "getChatSimilarChatCount"
}

// Returns approximate number of chats similar to the given chat
func (client *Client) GetChatSimilarChatCount(ctx context.Context, req *GetChatSimilarChatCountRequest) (*Count, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalCount(result.Data)
}

type OpenChatSimilarChatRequest struct {
	request
	// Identifier of the original chat, which similar chats were requested
	ChatId int64 `json:"chat_id"`
	// Identifier of the opened chat
	OpenedChatId int64 `json:"opened_chat_id"`
}

func (req OpenChatSimilarChatRequest) GetFunctionName() string {
	return "openChatSimilarChat"
}

// Informs TDLib that a chat was opened from the list of similar chats. The method is independent of openChat and closeChat methods
func (client *Client) OpenChatSimilarChat(ctx context.Context, req *OpenChatSimilarChatRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetBotSimilarBotsRequest struct {
	request
	// User identifier of the target bot
	BotUserId int64 `json:"bot_user_id"`
}

func (req GetBotSimilarBotsRequest) GetFunctionName() string {
	return "getBotSimilarBots"
}

// Returns a list of bots similar to the given bot
func (client *Client) GetBotSimilarBots(ctx context.Context, req *GetBotSimilarBotsRequest) (*Users, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalUsers(result.Data)
}

type GetBotSimilarBotCountRequest struct {
	request
	// User identifier of the target bot
	BotUserId int64 `json:"bot_user_id"`
	// Pass true to get the number of bots without sending network requests, or -1 if the number of bots is unknown locally
	ReturnLocal bool `json:"return_local"`
}

func (req GetBotSimilarBotCountRequest) GetFunctionName() string {
	return "getBotSimilarBotCount"
}

// Returns approximate number of bots similar to the given bot
func (client *Client) GetBotSimilarBotCount(ctx context.Context, req *GetBotSimilarBotCountRequest) (*Count, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalCount(result.Data)
}

type OpenBotSimilarBotRequest struct {
	request
	// Identifier of the original bot, which similar bots were requested
	BotUserId int64 `json:"bot_user_id"`
	// Identifier of the opened bot
	OpenedBotUserId int64 `json:"opened_bot_user_id"`
}

func (req OpenBotSimilarBotRequest) GetFunctionName() string {
	return "openBotSimilarBot"
}

// Informs TDLib that a bot was opened from the list of similar bots
func (client *Client) OpenBotSimilarBot(ctx context.Context, req *OpenBotSimilarBotRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetTopChatsRequest struct {
	request
	// Category of chats to be returned
	Category TopChatCategory `json:"category"`
	// The maximum number of chats to be returned; up to 30
	Limit int32 `json:"limit"`
}

func (req GetTopChatsRequest) GetFunctionName() string {
	return "getTopChats"
}

// Returns a list of frequently used chats
func (client *Client) GetTopChats(ctx context.Context, req *GetTopChatsRequest) (*Chats, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChats(result.Data)
}

type RemoveTopChatRequest struct {
	request
	// Category of frequently used chats
	Category TopChatCategory `json:"category"`
	// Chat identifier
	ChatId int64 `json:"chat_id"`
}

func (req RemoveTopChatRequest) GetFunctionName() string {
	return "removeTopChat"
}

// Removes a chat from the list of frequently used chats. Supported only if the chat info database is enabled
func (client *Client) RemoveTopChat(ctx context.Context, req *RemoveTopChatRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SearchRecentlyFoundChatsRequest struct {
	request
	// Query to search for
	Query string `json:"query"`
	// The maximum number of chats to be returned
	Limit int32 `json:"limit"`
}

func (req SearchRecentlyFoundChatsRequest) GetFunctionName() string {
	return "searchRecentlyFoundChats"
}

// Searches for the specified query in the title and username of up to 50 recently found chats. This is an offline method
func (client *Client) SearchRecentlyFoundChats(ctx context.Context, req *SearchRecentlyFoundChatsRequest) (*Chats, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChats(result.Data)
}

type AddRecentlyFoundChatRequest struct {
	request
	// Identifier of the chat to add
	ChatId int64 `json:"chat_id"`
}

func (req AddRecentlyFoundChatRequest) GetFunctionName() string {
	return "addRecentlyFoundChat"
}

// Adds a chat to the list of recently found chats. The chat is added to the beginning of the list. If the chat is already in the list, it will be removed from the list first
func (client *Client) AddRecentlyFoundChat(ctx context.Context, req *AddRecentlyFoundChatRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type RemoveRecentlyFoundChatRequest struct {
	request
	// Identifier of the chat to be removed
	ChatId int64 `json:"chat_id"`
}

func (req RemoveRecentlyFoundChatRequest) GetFunctionName() string {
	return "removeRecentlyFoundChat"
}

// Removes a chat from the list of recently found chats
func (client *Client) RemoveRecentlyFoundChat(ctx context.Context, req *RemoveRecentlyFoundChatRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ClearRecentlyFoundChatsRequest struct {
	request
}

func (req ClearRecentlyFoundChatsRequest) GetFunctionName() string {
	return "clearRecentlyFoundChats"
}

// Clears the list of recently found chats
func (client *Client) ClearRecentlyFoundChats(ctx context.Context) (*Ok, error) {
	req := &ClearRecentlyFoundChatsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetRecentlyOpenedChatsRequest struct {
	request
	// The maximum number of chats to be returned
	Limit int32 `json:"limit"`
}

func (req GetRecentlyOpenedChatsRequest) GetFunctionName() string {
	return "getRecentlyOpenedChats"
}

// Returns recently opened chats. This is an offline method. Returns chats in the order of last opening
func (client *Client) GetRecentlyOpenedChats(ctx context.Context, req *GetRecentlyOpenedChatsRequest) (*Chats, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChats(result.Data)
}

type CheckChatUsernameRequest struct {
	request
	// Chat identifier; must be identifier of a supergroup chat, or a channel chat, or a private chat with self, or 0 if the chat is being created
	ChatId int64 `json:"chat_id"`
	// Username to be checked
	Username string `json:"username"`
}

func (req CheckChatUsernameRequest) GetFunctionName() string {
	return "checkChatUsername"
}

// Checks whether a username can be set for a chat
func (client *Client) CheckChatUsername(ctx context.Context, req *CheckChatUsernameRequest) (CheckChatUsernameResult, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	switch result.MetaType {
	case ConstructorCheckChatUsernameResultOk:
		return UnmarshalCheckChatUsernameResultOk(result.Data)

	case ConstructorCheckChatUsernameResultUsernameInvalid:
		return UnmarshalCheckChatUsernameResultUsernameInvalid(result.Data)

	case ConstructorCheckChatUsernameResultUsernameOccupied:
		return UnmarshalCheckChatUsernameResultUsernameOccupied(result.Data)

	case ConstructorCheckChatUsernameResultUsernamePurchasable:
		return UnmarshalCheckChatUsernameResultUsernamePurchasable(result.Data)

	case ConstructorCheckChatUsernameResultPublicChatsTooMany:
		return UnmarshalCheckChatUsernameResultPublicChatsTooMany(result.Data)

	case ConstructorCheckChatUsernameResultPublicGroupsUnavailable:
		return UnmarshalCheckChatUsernameResultPublicGroupsUnavailable(result.Data)

	default:
		return nil, errors.New("invalid type")
	}
}

type GetCreatedPublicChatsRequest struct {
	request
	// Type of the public chats to return
	Type PublicChatType `json:"type"`
}

func (req GetCreatedPublicChatsRequest) GetFunctionName() string {
	return "getCreatedPublicChats"
}

// Returns a list of public chats of the specified type, owned by the user
func (client *Client) GetCreatedPublicChats(ctx context.Context, req *GetCreatedPublicChatsRequest) (*Chats, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChats(result.Data)
}

type CheckCreatedPublicChatsLimitRequest struct {
	request
	// Type of the public chats, for which to check the limit
	Type PublicChatType `json:"type"`
}

func (req CheckCreatedPublicChatsLimitRequest) GetFunctionName() string {
	return "checkCreatedPublicChatsLimit"
}

// Checks whether the maximum number of owned public chats has been reached. Returns corresponding error if the limit was reached. The limit can be increased with Telegram Premium
func (client *Client) CheckCreatedPublicChatsLimit(ctx context.Context, req *CheckCreatedPublicChatsLimitRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetSuitableDiscussionChatsRequest struct {
	request
}

func (req GetSuitableDiscussionChatsRequest) GetFunctionName() string {
	return "getSuitableDiscussionChats"
}

// Returns a list of basic group and supergroup chats, which can be used as a discussion group for a channel. Returned basic group chats must be first upgraded to supergroups before they can be set as a discussion group. To set a returned supergroup as a discussion group, access to its old messages must be enabled using toggleSupergroupIsAllHistoryAvailable first
func (client *Client) GetSuitableDiscussionChats(ctx context.Context) (*Chats, error) {
	req := &GetSuitableDiscussionChatsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChats(result.Data)
}

type GetInactiveSupergroupChatsRequest struct {
	request
}

func (req GetInactiveSupergroupChatsRequest) GetFunctionName() string {
	return "getInactiveSupergroupChats"
}

// Returns a list of recently inactive supergroups and channels. Can be used when user reaches limit on the number of joined supergroups and channels and receives CHANNELS_TOO_MUCH error. Also, the limit can be increased with Telegram Premium
func (client *Client) GetInactiveSupergroupChats(ctx context.Context) (*Chats, error) {
	req := &GetInactiveSupergroupChatsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChats(result.Data)
}

type GetSuitablePersonalChatsRequest struct {
	request
}

func (req GetSuitablePersonalChatsRequest) GetFunctionName() string {
	return "getSuitablePersonalChats"
}

// Returns a list of channel chats, which can be used as a personal chat
func (client *Client) GetSuitablePersonalChats(ctx context.Context) (*Chats, error) {
	req := &GetSuitablePersonalChatsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChats(result.Data)
}

type LoadSavedMessagesTopicsRequest struct {
	request
	// The maximum number of topics to be loaded. For optimal performance, the number of loaded topics is chosen by TDLib and can be smaller than the specified limit, even if the end of the list is not reached
	Limit int32 `json:"limit"`
}

func (req LoadSavedMessagesTopicsRequest) GetFunctionName() string {
	return "loadSavedMessagesTopics"
}

// Loads more Saved Messages topics. The loaded topics will be sent through updateSavedMessagesTopic. Topics are sorted by their topic.order in descending order. Returns a 404 error if all topics have been loaded
func (client *Client) LoadSavedMessagesTopics(ctx context.Context, req *LoadSavedMessagesTopicsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetSavedMessagesTopicHistoryRequest struct {
	request
	// Identifier of Saved Messages topic which messages will be fetched
	SavedMessagesTopicId int64 `json:"saved_messages_topic_id"`
	// Identifier of the message starting from which messages must be fetched; use 0 to get results from the last message
	FromMessageId int64 `json:"from_message_id"`
	// Specify 0 to get results from exactly the message from_message_id or a negative offset up to 99 to get additionally some newer messages
	Offset int32 `json:"offset"`
	// The maximum number of messages to be returned; must be positive and can't be greater than 100. If the offset is negative, the limit must be greater than or equal to -offset. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit
	Limit int32 `json:"limit"`
}

func (req GetSavedMessagesTopicHistoryRequest) GetFunctionName() string {
	return "getSavedMessagesTopicHistory"
}

// Returns messages in a Saved Messages topic. The messages are returned in reverse chronological order (i.e., in order of decreasing message_id)
func (client *Client) GetSavedMessagesTopicHistory(ctx context.Context, req *GetSavedMessagesTopicHistoryRequest) (*Messages, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessages(result.Data)
}

type GetSavedMessagesTopicMessageByDateRequest struct {
	request
	// Identifier of Saved Messages topic which message will be returned
	SavedMessagesTopicId int64 `json:"saved_messages_topic_id"`
	// Point in time (Unix timestamp) relative to which to search for messages
	Date int32 `json:"date"`
}

func (req GetSavedMessagesTopicMessageByDateRequest) GetFunctionName() string {
	return "getSavedMessagesTopicMessageByDate"
}

// Returns the last message sent in a Saved Messages topic no later than the specified date
func (client *Client) GetSavedMessagesTopicMessageByDate(ctx context.Context, req *GetSavedMessagesTopicMessageByDateRequest) (*Message, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessage(result.Data)
}

type DeleteSavedMessagesTopicHistoryRequest struct {
	request
	// Identifier of Saved Messages topic which messages will be deleted
	SavedMessagesTopicId int64 `json:"saved_messages_topic_id"`
}

func (req DeleteSavedMessagesTopicHistoryRequest) GetFunctionName() string {
	return "deleteSavedMessagesTopicHistory"
}

// Deletes all messages in a Saved Messages topic
func (client *Client) DeleteSavedMessagesTopicHistory(ctx context.Context, req *DeleteSavedMessagesTopicHistoryRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type DeleteSavedMessagesTopicMessagesByDateRequest struct {
	request
	// Identifier of Saved Messages topic which messages will be deleted
	SavedMessagesTopicId int64 `json:"saved_messages_topic_id"`
	// The minimum date of the messages to delete
	MinDate int32 `json:"min_date"`
	// The maximum date of the messages to delete
	MaxDate int32 `json:"max_date"`
}

func (req DeleteSavedMessagesTopicMessagesByDateRequest) GetFunctionName() string {
	return "deleteSavedMessagesTopicMessagesByDate"
}

// Deletes all messages between the specified dates in a Saved Messages topic. Messages sent in the last 30 seconds will not be deleted
func (client *Client) DeleteSavedMessagesTopicMessagesByDate(ctx context.Context, req *DeleteSavedMessagesTopicMessagesByDateRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleSavedMessagesTopicIsPinnedRequest struct {
	request
	// Identifier of Saved Messages topic to pin or unpin
	SavedMessagesTopicId int64 `json:"saved_messages_topic_id"`
	// Pass true to pin the topic; pass false to unpin it
	IsPinned bool `json:"is_pinned"`
}

func (req ToggleSavedMessagesTopicIsPinnedRequest) GetFunctionName() string {
	return "toggleSavedMessagesTopicIsPinned"
}

// Changes the pinned state of a Saved Messages topic. There can be up to getOption("pinned_saved_messages_topic_count_max") pinned topics. The limit can be increased with Telegram Premium
func (client *Client) ToggleSavedMessagesTopicIsPinned(ctx context.Context, req *ToggleSavedMessagesTopicIsPinnedRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetPinnedSavedMessagesTopicsRequest struct {
	request
	// Identifiers of the new pinned Saved Messages topics
	SavedMessagesTopicIds []int64 `json:"saved_messages_topic_ids"`
}

func (req SetPinnedSavedMessagesTopicsRequest) GetFunctionName() string {
	return "setPinnedSavedMessagesTopics"
}

// Changes the order of pinned Saved Messages topics
func (client *Client) SetPinnedSavedMessagesTopics(ctx context.Context, req *SetPinnedSavedMessagesTopicsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetGroupsInCommonRequest struct {
	request
	// User identifier
	UserId int64 `json:"user_id"`
	// Chat identifier starting from which to return chats; use 0 for the first request
	OffsetChatId int64 `json:"offset_chat_id"`
	// The maximum number of chats to be returned; up to 100
	Limit int32 `json:"limit"`
}

func (req GetGroupsInCommonRequest) GetFunctionName() string {
	return "getGroupsInCommon"
}

// Returns a list of common group chats with a given user. Chats are sorted by their type and creation date
func (client *Client) GetGroupsInCommon(ctx context.Context, req *GetGroupsInCommonRequest) (*Chats, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChats(result.Data)
}

type GetChatHistoryRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Identifier of the message starting from which history must be fetched; use 0 to get results from the last message
	FromMessageId int64 `json:"from_message_id"`
	// Specify 0 to get results from exactly the message from_message_id or a negative offset up to 99 to get additionally some newer messages
	Offset int32 `json:"offset"`
	// The maximum number of messages to be returned; must be positive and can't be greater than 100. If the offset is negative, the limit must be greater than or equal to -offset. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit
	Limit int32 `json:"limit"`
	// Pass true to get only messages that are available without sending network requests
	OnlyLocal bool `json:"only_local"`
}

func (req GetChatHistoryRequest) GetFunctionName() string {
	return "getChatHistory"
}

// Returns messages in a chat. The messages are returned in reverse chronological order (i.e., in order of decreasing message_id). For optimal performance, the number of returned messages is chosen by TDLib. This is an offline method if only_local is true
func (client *Client) GetChatHistory(ctx context.Context, req *GetChatHistoryRequest) (*Messages, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessages(result.Data)
}

type GetMessageThreadHistoryRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Message identifier, which thread history needs to be returned
	MessageId int64 `json:"message_id"`
	// Identifier of the message starting from which history must be fetched; use 0 to get results from the last message
	FromMessageId int64 `json:"from_message_id"`
	// Specify 0 to get results from exactly the message from_message_id or a negative offset up to 99 to get additionally some newer messages
	Offset int32 `json:"offset"`
	// The maximum number of messages to be returned; must be positive and can't be greater than 100. If the offset is negative, the limit must be greater than or equal to -offset. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit
	Limit int32 `json:"limit"`
}

func (req GetMessageThreadHistoryRequest) GetFunctionName() string {
	return "getMessageThreadHistory"
}

// Returns messages in a message thread of a message. Can be used only if messageProperties.can_get_message_thread == true. Message thread of a channel message is in the channel's linked supergroup. The messages are returned in reverse chronological order (i.e., in order of decreasing message_id). For optimal performance, the number of returned messages is chosen by TDLib
func (client *Client) GetMessageThreadHistory(ctx context.Context, req *GetMessageThreadHistoryRequest) (*Messages, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessages(result.Data)
}

type DeleteChatHistoryRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Pass true to remove the chat from all chat lists
	RemoveFromChatList bool `json:"remove_from_chat_list"`
	// Pass true to delete chat history for all users
	Revoke bool `json:"revoke"`
}

func (req DeleteChatHistoryRequest) GetFunctionName() string {
	return "deleteChatHistory"
}

// Deletes all messages in the chat. Use chat.can_be_deleted_only_for_self and chat.can_be_deleted_for_all_users fields to find whether and how the method can be applied to the chat
func (client *Client) DeleteChatHistory(ctx context.Context, req *DeleteChatHistoryRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type DeleteChatRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
}

func (req DeleteChatRequest) GetFunctionName() string {
	return "deleteChat"
}

// Deletes a chat along with all messages in the corresponding chat for all chat members. For group chats this will release the usernames and remove all members. Use the field chat.can_be_deleted_for_all_users to find whether the method can be applied to the chat
func (client *Client) DeleteChat(ctx context.Context, req *DeleteChatRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SearchChatMessagesRequest struct {
	request
	// Identifier of the chat in which to search messages
	ChatId int64 `json:"chat_id"`
	// Query to search for
	Query string `json:"query"`
	// Identifier of the sender of messages to search for; pass null to search for messages from any sender. Not supported in secret chats
	SenderId MessageSender `json:"sender_id"`
	// Identifier of the message starting from which history must be fetched; use 0 to get results from the last message
	FromMessageId int64 `json:"from_message_id"`
	// Specify 0 to get results from exactly the message from_message_id or a negative offset to get the specified message and some newer messages
	Offset int32 `json:"offset"`
	// The maximum number of messages to be returned; must be positive and can't be greater than 100. If the offset is negative, the limit must be greater than -offset. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit
	Limit int32 `json:"limit"`
	// Additional filter for messages to search; pass null to search for all messages
	Filter SearchMessagesFilter `json:"filter"`
	// If not 0, only messages in the specified thread will be returned; supergroups only
	MessageThreadId int64 `json:"message_thread_id"`
	// If not 0, only messages in the specified Saved Messages topic will be returned; pass 0 to return all messages, or for chats other than Saved Messages
	SavedMessagesTopicId int64 `json:"saved_messages_topic_id"`
}

func (req SearchChatMessagesRequest) GetFunctionName() string {
	return "searchChatMessages"
}

// Searches for messages with given words in the chat. Returns the results in reverse chronological order, i.e. in order of decreasing message_id. Cannot be used in secret chats with a non-empty query (searchSecretMessages must be used instead), or without an enabled message database. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit. A combination of query, sender_id, filter and message_thread_id search criteria is expected to be supported, only if it is required for Telegram official application implementation
func (client *Client) SearchChatMessages(ctx context.Context, req *SearchChatMessagesRequest) (*FoundChatMessages, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFoundChatMessages(result.Data)
}

type SearchMessagesRequest struct {
	request
	// Chat list in which to search messages; pass null to search in all chats regardless of their chat list. Only Main and Archive chat lists are supported
	ChatList ChatList `json:"chat_list"`
	// Query to search for
	Query string `json:"query"`
	// Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results
	Offset string `json:"offset"`
	// The maximum number of messages to be returned; up to 100. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit
	Limit int32 `json:"limit"`
	// Additional filter for messages to search; pass null to search for all messages. Filters searchMessagesFilterMention, searchMessagesFilterUnreadMention, searchMessagesFilterUnreadReaction, searchMessagesFilterFailedToSend, and searchMessagesFilterPinned are unsupported in this function
	Filter SearchMessagesFilter `json:"filter"`
	// Additional filter for type of the chat of the searched messages; pass null to search for messages in all chats
	ChatTypeFilter SearchMessagesChatTypeFilter `json:"chat_type_filter"`
	// If not 0, the minimum date of the messages to return
	MinDate int32 `json:"min_date"`
	// If not 0, the maximum date of the messages to return
	MaxDate int32 `json:"max_date"`
}

func (req SearchMessagesRequest) GetFunctionName() string {
	return "searchMessages"
}

// Searches for messages in all chats except secret chats. Returns the results in reverse chronological order (i.e., in order of decreasing (date, chat_id, message_id)). For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit
func (client *Client) SearchMessages(ctx context.Context, req *SearchMessagesRequest) (*FoundMessages, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFoundMessages(result.Data)
}

type SearchSecretMessagesRequest struct {
	request
	// Identifier of the chat in which to search. Specify 0 to search in all secret chats
	ChatId int64 `json:"chat_id"`
	// Query to search for. If empty, searchChatMessages must be used instead
	Query string `json:"query"`
	// Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results
	Offset string `json:"offset"`
	// The maximum number of messages to be returned; up to 100. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit
	Limit int32 `json:"limit"`
	// Additional filter for messages to search; pass null to search for all messages
	Filter SearchMessagesFilter `json:"filter"`
}

func (req SearchSecretMessagesRequest) GetFunctionName() string {
	return "searchSecretMessages"
}

// Searches for messages in secret chats. Returns the results in reverse chronological order. For optimal performance, the number of returned messages is chosen by TDLib
func (client *Client) SearchSecretMessages(ctx context.Context, req *SearchSecretMessagesRequest) (*FoundMessages, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFoundMessages(result.Data)
}

type SearchSavedMessagesRequest struct {
	request
	// If not 0, only messages in the specified Saved Messages topic will be considered; pass 0 to consider all messages
	SavedMessagesTopicId int64 `json:"saved_messages_topic_id"`
	// Tag to search for; pass null to return all suitable messages
	Tag ReactionType `json:"tag"`
	// Query to search for
	Query string `json:"query"`
	// Identifier of the message starting from which messages must be fetched; use 0 to get results from the last message
	FromMessageId int64 `json:"from_message_id"`
	// Specify 0 to get results from exactly the message from_message_id or a negative offset to get the specified message and some newer messages
	Offset int32 `json:"offset"`
	// The maximum number of messages to be returned; must be positive and can't be greater than 100. If the offset is negative, the limit must be greater than -offset. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit
	Limit int32 `json:"limit"`
}

func (req SearchSavedMessagesRequest) GetFunctionName() string {
	return "searchSavedMessages"
}

// Searches for messages tagged by the given reaction and with the given words in the Saved Messages chat; for Telegram Premium users only. Returns the results in reverse chronological order, i.e. in order of decreasing message_id. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit
func (client *Client) SearchSavedMessages(ctx context.Context, req *SearchSavedMessagesRequest) (*FoundChatMessages, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFoundChatMessages(result.Data)
}

type SearchCallMessagesRequest struct {
	request
	// Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results
	Offset string `json:"offset"`
	// The maximum number of messages to be returned; up to 100. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit
	Limit int32 `json:"limit"`
	// Pass true to search only for messages with missed/declined calls
	OnlyMissed bool `json:"only_missed"`
}

func (req SearchCallMessagesRequest) GetFunctionName() string {
	return "searchCallMessages"
}

// Searches for call messages. Returns the results in reverse chronological order (i.e., in order of decreasing message_id). For optimal performance, the number of returned messages is chosen by TDLib
func (client *Client) SearchCallMessages(ctx context.Context, req *SearchCallMessagesRequest) (*FoundMessages, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFoundMessages(result.Data)
}

type SearchOutgoingDocumentMessagesRequest struct {
	request
	// Query to search for in document file name and message caption
	Query string `json:"query"`
	// The maximum number of messages to be returned; up to 100
	Limit int32 `json:"limit"`
}

func (req SearchOutgoingDocumentMessagesRequest) GetFunctionName() string {
	return "searchOutgoingDocumentMessages"
}

// Searches for outgoing messages with content of the type messageDocument in all chats except secret chats. Returns the results in reverse chronological order
func (client *Client) SearchOutgoingDocumentMessages(ctx context.Context, req *SearchOutgoingDocumentMessagesRequest) (*FoundMessages, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFoundMessages(result.Data)
}

type SearchPublicMessagesByTagRequest struct {
	request
	// Hashtag or cashtag to search for
	Tag string `json:"tag"`
	// Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results
	Offset string `json:"offset"`
	// The maximum number of messages to be returned; up to 100. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit
	Limit int32 `json:"limit"`
}

func (req SearchPublicMessagesByTagRequest) GetFunctionName() string {
	return "searchPublicMessagesByTag"
}

// Searches for public channel posts containing the given hashtag or cashtag. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit
func (client *Client) SearchPublicMessagesByTag(ctx context.Context, req *SearchPublicMessagesByTagRequest) (*FoundMessages, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFoundMessages(result.Data)
}

type SearchPublicStoriesByTagRequest struct {
	request
	// Identifier of the chat that posted the stories to search for; pass 0 to search stories in all chats
	StorySenderChatId int64 `json:"story_sender_chat_id"`
	// Hashtag or cashtag to search for
	Tag string `json:"tag"`
	// Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results
	Offset string `json:"offset"`
	// The maximum number of stories to be returned; up to 100. For optimal performance, the number of returned stories is chosen by TDLib and can be smaller than the specified limit
	Limit int32 `json:"limit"`
}

func (req SearchPublicStoriesByTagRequest) GetFunctionName() string {
	return "searchPublicStoriesByTag"
}

// Searches for public stories containing the given hashtag or cashtag. For optimal performance, the number of returned stories is chosen by TDLib and can be smaller than the specified limit
func (client *Client) SearchPublicStoriesByTag(ctx context.Context, req *SearchPublicStoriesByTagRequest) (*FoundStories, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFoundStories(result.Data)
}

type SearchPublicStoriesByLocationRequest struct {
	request
	// Address of the location
	Address *LocationAddress `json:"address"`
	// Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results
	Offset string `json:"offset"`
	// The maximum number of stories to be returned; up to 100. For optimal performance, the number of returned stories is chosen by TDLib and can be smaller than the specified limit
	Limit int32 `json:"limit"`
}

func (req SearchPublicStoriesByLocationRequest) GetFunctionName() string {
	return "searchPublicStoriesByLocation"
}

// Searches for public stories by the given address location. For optimal performance, the number of returned stories is chosen by TDLib and can be smaller than the specified limit
func (client *Client) SearchPublicStoriesByLocation(ctx context.Context, req *SearchPublicStoriesByLocationRequest) (*FoundStories, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFoundStories(result.Data)
}

type SearchPublicStoriesByVenueRequest struct {
	request
	// Provider of the venue
	VenueProvider string `json:"venue_provider"`
	// Identifier of the venue in the provider database
	VenueId string `json:"venue_id"`
	// Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results
	Offset string `json:"offset"`
	// The maximum number of stories to be returned; up to 100. For optimal performance, the number of returned stories is chosen by TDLib and can be smaller than the specified limit
	Limit int32 `json:"limit"`
}

func (req SearchPublicStoriesByVenueRequest) GetFunctionName() string {
	return "searchPublicStoriesByVenue"
}

// Searches for public stories from the given venue. For optimal performance, the number of returned stories is chosen by TDLib and can be smaller than the specified limit
func (client *Client) SearchPublicStoriesByVenue(ctx context.Context, req *SearchPublicStoriesByVenueRequest) (*FoundStories, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFoundStories(result.Data)
}

type GetSearchedForTagsRequest struct {
	request
	// Prefix of hashtags or cashtags to return
	TagPrefix string `json:"tag_prefix"`
	// The maximum number of items to be returned
	Limit int32 `json:"limit"`
}

func (req GetSearchedForTagsRequest) GetFunctionName() string {
	return "getSearchedForTags"
}

// Returns recently searched for hashtags or cashtags by their prefix
func (client *Client) GetSearchedForTags(ctx context.Context, req *GetSearchedForTagsRequest) (*Hashtags, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalHashtags(result.Data)
}

type RemoveSearchedForTagRequest struct {
	request
	// Hashtag or cashtag to delete
	Tag string `json:"tag"`
}

func (req RemoveSearchedForTagRequest) GetFunctionName() string {
	return "removeSearchedForTag"
}

// Removes a hashtag or a cashtag from the list of recently searched for hashtags or cashtags
func (client *Client) RemoveSearchedForTag(ctx context.Context, req *RemoveSearchedForTagRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ClearSearchedForTagsRequest struct {
	request
	// Pass true to clear the list of recently searched for cashtags; otherwise, the list of recently searched for hashtags will be cleared
	ClearCashtags bool `json:"clear_cashtags"`
}

func (req ClearSearchedForTagsRequest) GetFunctionName() string {
	return "clearSearchedForTags"
}

// Clears the list of recently searched for hashtags or cashtags
func (client *Client) ClearSearchedForTags(ctx context.Context, req *ClearSearchedForTagsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type DeleteAllCallMessagesRequest struct {
	request
	// Pass true to delete the messages for all users
	Revoke bool `json:"revoke"`
}

func (req DeleteAllCallMessagesRequest) GetFunctionName() string {
	return "deleteAllCallMessages"
}

// Deletes all call messages
func (client *Client) DeleteAllCallMessages(ctx context.Context, req *DeleteAllCallMessagesRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SearchChatRecentLocationMessagesRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// The maximum number of messages to be returned
	Limit int32 `json:"limit"`
}

func (req SearchChatRecentLocationMessagesRequest) GetFunctionName() string {
	return "searchChatRecentLocationMessages"
}

// Returns information about the recent locations of chat members that were sent to the chat. Returns up to 1 location message per user
func (client *Client) SearchChatRecentLocationMessages(ctx context.Context, req *SearchChatRecentLocationMessagesRequest) (*Messages, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessages(result.Data)
}

type GetChatMessageByDateRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Point in time (Unix timestamp) relative to which to search for messages
	Date int32 `json:"date"`
}

func (req GetChatMessageByDateRequest) GetFunctionName() string {
	return "getChatMessageByDate"
}

// Returns the last message sent in a chat no later than the specified date. Returns a 404 error if such message doesn't exist
func (client *Client) GetChatMessageByDate(ctx context.Context, req *GetChatMessageByDateRequest) (*Message, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessage(result.Data)
}

type GetChatSparseMessagePositionsRequest struct {
	request
	// Identifier of the chat in which to return information about message positions
	ChatId int64 `json:"chat_id"`
	// Filter for message content. Filters searchMessagesFilterEmpty, searchMessagesFilterMention, searchMessagesFilterUnreadMention, and searchMessagesFilterUnreadReaction are unsupported in this function
	Filter SearchMessagesFilter `json:"filter"`
	// The message identifier from which to return information about message positions
	FromMessageId int64 `json:"from_message_id"`
	// The expected number of message positions to be returned; 50-2000. A smaller number of positions can be returned, if there are not enough appropriate messages
	Limit int32 `json:"limit"`
	// If not 0, only messages in the specified Saved Messages topic will be considered; pass 0 to consider all messages, or for chats other than Saved Messages
	SavedMessagesTopicId int64 `json:"saved_messages_topic_id"`
}

func (req GetChatSparseMessagePositionsRequest) GetFunctionName() string {
	return "getChatSparseMessagePositions"
}

// Returns sparse positions of messages of the specified type in the chat to be used for shared media scroll implementation. Returns the results in reverse chronological order (i.e., in order of decreasing message_id). Cannot be used in secret chats or with searchMessagesFilterFailedToSend filter without an enabled message database
func (client *Client) GetChatSparseMessagePositions(ctx context.Context, req *GetChatSparseMessagePositionsRequest) (*MessagePositions, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessagePositions(result.Data)
}

type GetChatMessageCalendarRequest struct {
	request
	// Identifier of the chat in which to return information about messages
	ChatId int64 `json:"chat_id"`
	// Filter for message content. Filters searchMessagesFilterEmpty, searchMessagesFilterMention, searchMessagesFilterUnreadMention, and searchMessagesFilterUnreadReaction are unsupported in this function
	Filter SearchMessagesFilter `json:"filter"`
	// The message identifier from which to return information about messages; use 0 to get results from the last message
	FromMessageId int64 `json:"from_message_id"`
	// If not0, only messages in the specified Saved Messages topic will be considered; pass 0 to consider all messages, or for chats other than Saved Messages
	SavedMessagesTopicId int64 `json:"saved_messages_topic_id"`
}

func (req GetChatMessageCalendarRequest) GetFunctionName() string {
	return "getChatMessageCalendar"
}

// Returns information about the next messages of the specified type in the chat split by days. Returns the results in reverse chronological order. Can return partial result for the last returned day. Behavior of this method depends on the value of the option "utc_time_offset"
func (client *Client) GetChatMessageCalendar(ctx context.Context, req *GetChatMessageCalendarRequest) (*MessageCalendar, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessageCalendar(result.Data)
}

type GetChatMessageCountRequest struct {
	request
	// Identifier of the chat in which to count messages
	ChatId int64 `json:"chat_id"`
	// Filter for message content; searchMessagesFilterEmpty is unsupported in this function
	Filter SearchMessagesFilter `json:"filter"`
	// If not 0, only messages in the specified Saved Messages topic will be counted; pass 0 to count all messages, or for chats other than Saved Messages
	SavedMessagesTopicId int64 `json:"saved_messages_topic_id"`
	// Pass true to get the number of messages without sending network requests, or -1 if the number of messages is unknown locally
	ReturnLocal bool `json:"return_local"`
}

func (req GetChatMessageCountRequest) GetFunctionName() string {
	return "getChatMessageCount"
}

// Returns approximate number of messages of the specified type in the chat
func (client *Client) GetChatMessageCount(ctx context.Context, req *GetChatMessageCountRequest) (*Count, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalCount(result.Data)
}

type GetChatMessagePositionRequest struct {
	request
	// Identifier of the chat in which to find message position
	ChatId int64 `json:"chat_id"`
	// Message identifier
	MessageId int64 `json:"message_id"`
	// Filter for message content; searchMessagesFilterEmpty, searchMessagesFilterUnreadMention, searchMessagesFilterUnreadReaction, and searchMessagesFilterFailedToSend are unsupported in this function
	Filter SearchMessagesFilter `json:"filter"`
	// If not 0, only messages in the specified thread will be considered; supergroups only
	MessageThreadId int64 `json:"message_thread_id"`
	// If not 0, only messages in the specified Saved Messages topic will be considered; pass 0 to consider all relevant messages, or for chats other than Saved Messages
	SavedMessagesTopicId int64 `json:"saved_messages_topic_id"`
}

func (req GetChatMessagePositionRequest) GetFunctionName() string {
	return "getChatMessagePosition"
}

// Returns approximate 1-based position of a message among messages, which can be found by the specified filter in the chat. Cannot be used in secret chats
func (client *Client) GetChatMessagePosition(ctx context.Context, req *GetChatMessagePositionRequest) (*Count, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalCount(result.Data)
}

type GetChatScheduledMessagesRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
}

func (req GetChatScheduledMessagesRequest) GetFunctionName() string {
	return "getChatScheduledMessages"
}

// Returns all scheduled messages in a chat. The messages are returned in reverse chronological order (i.e., in order of decreasing message_id)
func (client *Client) GetChatScheduledMessages(ctx context.Context, req *GetChatScheduledMessagesRequest) (*Messages, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessages(result.Data)
}

type GetChatSponsoredMessagesRequest struct {
	request
	// Identifier of the chat
	ChatId int64 `json:"chat_id"`
}

func (req GetChatSponsoredMessagesRequest) GetFunctionName() string {
	return "getChatSponsoredMessages"
}

// Returns sponsored messages to be shown in a chat; for channel chats and chats with bots only
func (client *Client) GetChatSponsoredMessages(ctx context.Context, req *GetChatSponsoredMessagesRequest) (*SponsoredMessages, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalSponsoredMessages(result.Data)
}

type ClickChatSponsoredMessageRequest struct {
	request
	// Chat identifier of the sponsored message
	ChatId int64 `json:"chat_id"`
	// Identifier of the sponsored message
	MessageId int64 `json:"message_id"`
	// Pass true if the media was clicked in the sponsored message
	IsMediaClick bool `json:"is_media_click"`
	// Pass true if the user expanded the video from the sponsored message fullscreen before the click
	FromFullscreen bool `json:"from_fullscreen"`
}

func (req ClickChatSponsoredMessageRequest) GetFunctionName() string {
	return "clickChatSponsoredMessage"
}

// Informs TDLib that the user opened the sponsored chat via the button, the name, the chat photo, a mention in the sponsored message text, or the media in the sponsored message
func (client *Client) ClickChatSponsoredMessage(ctx context.Context, req *ClickChatSponsoredMessageRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ReportChatSponsoredMessageRequest struct {
	request
	// Chat identifier of the sponsored message
	ChatId int64 `json:"chat_id"`
	// Identifier of the sponsored message
	MessageId int64 `json:"message_id"`
	// Option identifier chosen by the user; leave empty for the initial request
	OptionId []byte `json:"option_id"`
}

func (req ReportChatSponsoredMessageRequest) GetFunctionName() string {
	return "reportChatSponsoredMessage"
}

// Reports a sponsored message to Telegram moderators
func (client *Client) ReportChatSponsoredMessage(ctx context.Context, req *ReportChatSponsoredMessageRequest) (ReportSponsoredResult, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	switch result.MetaType {
	case ConstructorReportSponsoredResultOk:
		return UnmarshalReportSponsoredResultOk(result.Data)

	case ConstructorReportSponsoredResultFailed:
		return UnmarshalReportSponsoredResultFailed(result.Data)

	case ConstructorReportSponsoredResultOptionRequired:
		return UnmarshalReportSponsoredResultOptionRequired(result.Data)

	case ConstructorReportSponsoredResultAdsHidden:
		return UnmarshalReportSponsoredResultAdsHidden(result.Data)

	case ConstructorReportSponsoredResultPremiumRequired:
		return UnmarshalReportSponsoredResultPremiumRequired(result.Data)

	default:
		return nil, errors.New("invalid type")
	}
}

type GetSearchSponsoredChatsRequest struct {
	request
	// Query the user searches for
	Query string `json:"query"`
}

func (req GetSearchSponsoredChatsRequest) GetFunctionName() string {
	return "getSearchSponsoredChats"
}

// Returns sponsored chats to be shown in the search results
func (client *Client) GetSearchSponsoredChats(ctx context.Context, req *GetSearchSponsoredChatsRequest) (*SponsoredChats, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalSponsoredChats(result.Data)
}

type ViewSponsoredChatRequest struct {
	request
	// Unique identifier of the sponsored chat
	SponsoredChatUniqueId int64 `json:"sponsored_chat_unique_id"`
}

func (req ViewSponsoredChatRequest) GetFunctionName() string {
	return "viewSponsoredChat"
}

// Informs TDLib that the user fully viewed a sponsored chat
func (client *Client) ViewSponsoredChat(ctx context.Context, req *ViewSponsoredChatRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type OpenSponsoredChatRequest struct {
	request
	// Unique identifier of the sponsored chat
	SponsoredChatUniqueId int64 `json:"sponsored_chat_unique_id"`
}

func (req OpenSponsoredChatRequest) GetFunctionName() string {
	return "openSponsoredChat"
}

// Informs TDLib that the user opened a sponsored chat
func (client *Client) OpenSponsoredChat(ctx context.Context, req *OpenSponsoredChatRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ReportSponsoredChatRequest struct {
	request
	// Unique identifier of the sponsored chat
	SponsoredChatUniqueId int64 `json:"sponsored_chat_unique_id"`
	// Option identifier chosen by the user; leave empty for the initial request
	OptionId []byte `json:"option_id"`
}

func (req ReportSponsoredChatRequest) GetFunctionName() string {
	return "reportSponsoredChat"
}

// Reports a sponsored chat to Telegram moderators
func (client *Client) ReportSponsoredChat(ctx context.Context, req *ReportSponsoredChatRequest) (ReportSponsoredResult, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	switch result.MetaType {
	case ConstructorReportSponsoredResultOk:
		return UnmarshalReportSponsoredResultOk(result.Data)

	case ConstructorReportSponsoredResultFailed:
		return UnmarshalReportSponsoredResultFailed(result.Data)

	case ConstructorReportSponsoredResultOptionRequired:
		return UnmarshalReportSponsoredResultOptionRequired(result.Data)

	case ConstructorReportSponsoredResultAdsHidden:
		return UnmarshalReportSponsoredResultAdsHidden(result.Data)

	case ConstructorReportSponsoredResultPremiumRequired:
		return UnmarshalReportSponsoredResultPremiumRequired(result.Data)

	default:
		return nil, errors.New("invalid type")
	}
}

type RemoveNotificationRequest struct {
	request
	// Identifier of notification group to which the notification belongs
	NotificationGroupId int32 `json:"notification_group_id"`
	// Identifier of removed notification
	NotificationId int32 `json:"notification_id"`
}

func (req RemoveNotificationRequest) GetFunctionName() string {
	return "removeNotification"
}

// Removes an active notification from notification list. Needs to be called only if the notification is removed by the current user
func (client *Client) RemoveNotification(ctx context.Context, req *RemoveNotificationRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type RemoveNotificationGroupRequest struct {
	request
	// Notification group identifier
	NotificationGroupId int32 `json:"notification_group_id"`
	// The maximum identifier of removed notifications
	MaxNotificationId int32 `json:"max_notification_id"`
}

func (req RemoveNotificationGroupRequest) GetFunctionName() string {
	return "removeNotificationGroup"
}

// Removes a group of active notifications. Needs to be called only if the notification group is removed by the current user
func (client *Client) RemoveNotificationGroup(ctx context.Context, req *RemoveNotificationGroupRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetMessageLinkRequest struct {
	request
	// Identifier of the chat to which the message belongs
	ChatId int64 `json:"chat_id"`
	// Identifier of the message
	MessageId int64 `json:"message_id"`
	// If not 0, timestamp from which the video/audio/video note/voice note/story playing must start, in seconds. The media can be in the message content or in its link preview
	MediaTimestamp int32 `json:"media_timestamp"`
	// Pass true to create a link for the whole media album
	ForAlbum bool `json:"for_album"`
	// Pass true to create a link to the message as a channel post comment, in a message thread, or a forum topic
	InMessageThread bool `json:"in_message_thread"`
}

func (req GetMessageLinkRequest) GetFunctionName() string {
	return "getMessageLink"
}

// Returns an HTTPS link to a message in a chat. Available only if messageProperties.can_get_link, or if messageProperties.can_get_media_timestamp_links and a media timestamp link is generated. This is an offline method
func (client *Client) GetMessageLink(ctx context.Context, req *GetMessageLinkRequest) (*MessageLink, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessageLink(result.Data)
}

type GetMessageEmbeddingCodeRequest struct {
	request
	// Identifier of the chat to which the message belongs
	ChatId int64 `json:"chat_id"`
	// Identifier of the message
	MessageId int64 `json:"message_id"`
	// Pass true to return an HTML code for embedding of the whole media album
	ForAlbum bool `json:"for_album"`
}

func (req GetMessageEmbeddingCodeRequest) GetFunctionName() string {
	return "getMessageEmbeddingCode"
}

// Returns an HTML code for embedding the message. Available only if messageProperties.can_get_embedding_code
func (client *Client) GetMessageEmbeddingCode(ctx context.Context, req *GetMessageEmbeddingCodeRequest) (*Text, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalText(result.Data)
}

type GetMessageLinkInfoRequest struct {
	request
	// The message link
	Url string `json:"url"`
}

func (req GetMessageLinkInfoRequest) GetFunctionName() string {
	return "getMessageLinkInfo"
}

// Returns information about a public or private message link. Can be called for any internal link of the type internalLinkTypeMessage
func (client *Client) GetMessageLinkInfo(ctx context.Context, req *GetMessageLinkInfoRequest) (*MessageLinkInfo, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessageLinkInfo(result.Data)
}

type TranslateTextRequest struct {
	request
	// Text to translate
	Text *FormattedText `json:"text"`
	// Language code of the language to which the message is translated. Must be one of "af", "sq", "am", "ar", "hy", "az", "eu", "be", "bn", "bs", "bg", "ca", "ceb", "zh-CN", "zh", "zh-Hans", "zh-TW", "zh-Hant", "co", "hr", "cs", "da", "nl", "en", "eo", "et", "fi", "fr", "fy", "gl", "ka", "de", "el", "gu", "ht", "ha", "haw", "he", "iw", "hi", "hmn", "hu", "is", "ig", "id", "in", "ga", "it", "ja", "jv", "kn", "kk", "km", "rw", "ko", "ku", "ky", "lo", "la", "lv", "lt", "lb", "mk", "mg", "ms", "ml", "mt", "mi", "mr", "mn", "my", "ne", "no", "ny", "or", "ps", "fa", "pl", "pt", "pa", "ro", "ru", "sm", "gd", "sr", "st", "sn", "sd", "si", "sk", "sl", "so", "es", "su", "sw", "sv", "tl", "tg", "ta", "tt", "te", "th", "tr", "tk", "uk", "ur", "ug", "uz", "vi", "cy", "xh", "yi", "ji", "yo", "zu"
	ToLanguageCode string `json:"to_language_code"`
}

func (req TranslateTextRequest) GetFunctionName() string {
	return "translateText"
}

// Translates a text to the given language. If the current user is a Telegram Premium user, then text formatting is preserved
func (client *Client) TranslateText(ctx context.Context, req *TranslateTextRequest) (*FormattedText, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFormattedText(result.Data)
}

type TranslateMessageTextRequest struct {
	request
	// Identifier of the chat to which the message belongs
	ChatId int64 `json:"chat_id"`
	// Identifier of the message
	MessageId int64 `json:"message_id"`
	// Language code of the language to which the message is translated. Must be one of "af", "sq", "am", "ar", "hy", "az", "eu", "be", "bn", "bs", "bg", "ca", "ceb", "zh-CN", "zh", "zh-Hans", "zh-TW", "zh-Hant", "co", "hr", "cs", "da", "nl", "en", "eo", "et", "fi", "fr", "fy", "gl", "ka", "de", "el", "gu", "ht", "ha", "haw", "he", "iw", "hi", "hmn", "hu", "is", "ig", "id", "in", "ga", "it", "ja", "jv", "kn", "kk", "km", "rw", "ko", "ku", "ky", "lo", "la", "lv", "lt", "lb", "mk", "mg", "ms", "ml", "mt", "mi", "mr", "mn", "my", "ne", "no", "ny", "or", "ps", "fa", "pl", "pt", "pa", "ro", "ru", "sm", "gd", "sr", "st", "sn", "sd", "si", "sk", "sl", "so", "es", "su", "sw", "sv", "tl", "tg", "ta", "tt", "te", "th", "tr", "tk", "uk", "ur", "ug", "uz", "vi", "cy", "xh", "yi", "ji", "yo", "zu"
	ToLanguageCode string `json:"to_language_code"`
}

func (req TranslateMessageTextRequest) GetFunctionName() string {
	return "translateMessageText"
}

// Extracts text or caption of the given message and translates it to the given language. If the current user is a Telegram Premium user, then text formatting is preserved
func (client *Client) TranslateMessageText(ctx context.Context, req *TranslateMessageTextRequest) (*FormattedText, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFormattedText(result.Data)
}

type RecognizeSpeechRequest struct {
	request
	// Identifier of the chat to which the message belongs
	ChatId int64 `json:"chat_id"`
	// Identifier of the message. Use messageProperties.can_recognize_speech to check whether the message is suitable
	MessageId int64 `json:"message_id"`
}

func (req RecognizeSpeechRequest) GetFunctionName() string {
	return "recognizeSpeech"
}

// Recognizes speech in a video note or a voice note message
func (client *Client) RecognizeSpeech(ctx context.Context, req *RecognizeSpeechRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type RateSpeechRecognitionRequest struct {
	request
	// Identifier of the chat to which the message belongs
	ChatId int64 `json:"chat_id"`
	// Identifier of the message
	MessageId int64 `json:"message_id"`
	// Pass true if the speech recognition is good
	IsGood bool `json:"is_good"`
}

func (req RateSpeechRecognitionRequest) GetFunctionName() string {
	return "rateSpeechRecognition"
}

// Rates recognized speech in a video note or a voice note message
func (client *Client) RateSpeechRecognition(ctx context.Context, req *RateSpeechRecognitionRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetChatAvailableMessageSendersRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
}

func (req GetChatAvailableMessageSendersRequest) GetFunctionName() string {
	return "getChatAvailableMessageSenders"
}

// Returns the list of message sender identifiers, which can be used to send messages in a chat
func (client *Client) GetChatAvailableMessageSenders(ctx context.Context, req *GetChatAvailableMessageSendersRequest) (*ChatMessageSenders, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatMessageSenders(result.Data)
}

type SetChatMessageSenderRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// New message sender for the chat
	MessageSenderId MessageSender `json:"message_sender_id"`
}

func (req SetChatMessageSenderRequest) GetFunctionName() string {
	return "setChatMessageSender"
}

// Selects a message sender to send messages in a chat
func (client *Client) SetChatMessageSender(ctx context.Context, req *SetChatMessageSenderRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SendMessageRequest struct {
	request
	// Target chat
	ChatId int64 `json:"chat_id"`
	// If not 0, the message thread identifier in which the message will be sent
	MessageThreadId int64 `json:"message_thread_id"`
	// Information about the message or story to be replied; pass null if none
	ReplyTo InputMessageReplyTo `json:"reply_to"`
	// Options to be used to send the message; pass null to use default options
	Options *MessageSendOptions `json:"options"`
	// Markup for replying to the message; pass null if none; for bots only
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// The content of the message to be sent
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

func (req SendMessageRequest) GetFunctionName() string {
	return "sendMessage"
}

// Sends a message. Returns the sent message
func (client *Client) SendMessage(ctx context.Context, req *SendMessageRequest) (*Message, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessage(result.Data)
}

type SendMessageAlbumRequest struct {
	request
	// Target chat
	ChatId int64 `json:"chat_id"`
	// If not 0, the message thread identifier in which the messages will be sent
	MessageThreadId int64 `json:"message_thread_id"`
	// Information about the message or story to be replied; pass null if none
	ReplyTo InputMessageReplyTo `json:"reply_to"`
	// Options to be used to send the messages; pass null to use default options
	Options *MessageSendOptions `json:"options"`
	// Contents of messages to be sent. At most 10 messages can be added to an album. All messages must have the same value of show_caption_above_media
	InputMessageContents []InputMessageContent `json:"input_message_contents"`
}

func (req SendMessageAlbumRequest) GetFunctionName() string {
	return "sendMessageAlbum"
}

// Sends 2-10 messages grouped together into an album. Currently, only audio, document, photo and video messages can be grouped into an album. Documents and audio files can be only grouped in an album with messages of the same type. Returns sent messages
func (client *Client) SendMessageAlbum(ctx context.Context, req *SendMessageAlbumRequest) (*Messages, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessages(result.Data)
}

type SendBotStartMessageRequest struct {
	request
	// Identifier of the bot
	BotUserId int64 `json:"bot_user_id"`
	// Identifier of the target chat
	ChatId int64 `json:"chat_id"`
	// A hidden parameter sent to the bot for deep linking purposes (https://core.telegram.org/bots#deep-linking)
	Parameter string `json:"parameter"`
}

func (req SendBotStartMessageRequest) GetFunctionName() string {
	return "sendBotStartMessage"
}

// Invites a bot to a chat (if it is not yet a member) and sends it the /start command; requires can_invite_users member right. Bots can't be invited to a private chat other than the chat with the bot. Bots can't be invited to channels (although they can be added as admins) and secret chats. Returns the sent message
func (client *Client) SendBotStartMessage(ctx context.Context, req *SendBotStartMessageRequest) (*Message, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessage(result.Data)
}

type SendInlineQueryResultMessageRequest struct {
	request
	// Target chat
	ChatId int64 `json:"chat_id"`
	// If not 0, the message thread identifier in which the message will be sent
	MessageThreadId int64 `json:"message_thread_id"`
	// Information about the message or story to be replied; pass null if none
	ReplyTo InputMessageReplyTo `json:"reply_to"`
	// Options to be used to send the message; pass null to use default options
	Options *MessageSendOptions `json:"options"`
	// Identifier of the inline query
	QueryId JsonInt64 `json:"query_id"`
	// Identifier of the inline query result
	ResultId string `json:"result_id"`
	// Pass true to hide the bot, via which the message is sent. Can be used only for bots getOption("animation_search_bot_username"), getOption("photo_search_bot_username"), and getOption("venue_search_bot_username")
	HideViaBot bool `json:"hide_via_bot"`
}

func (req SendInlineQueryResultMessageRequest) GetFunctionName() string {
	return "sendInlineQueryResultMessage"
}

// Sends the result of an inline query as a message. Returns the sent message. Always clears a chat draft message
func (client *Client) SendInlineQueryResultMessage(ctx context.Context, req *SendInlineQueryResultMessageRequest) (*Message, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessage(result.Data)
}

type ForwardMessagesRequest struct {
	request
	// Identifier of the chat to which to forward messages
	ChatId int64 `json:"chat_id"`
	// If not 0, the message thread identifier in which the message will be sent; for forum threads only
	MessageThreadId int64 `json:"message_thread_id"`
	// Identifier of the chat from which to forward messages
	FromChatId int64 `json:"from_chat_id"`
	// Identifiers of the messages to forward. Message identifiers must be in a strictly increasing order. At most 100 messages can be forwarded simultaneously. A message can be forwarded only if messageProperties.can_be_forwarded
	MessageIds []int64 `json:"message_ids"`
	// Options to be used to send the messages; pass null to use default options
	Options *MessageSendOptions `json:"options"`
	// Pass true to copy content of the messages without reference to the original sender. Always true if the messages are forwarded to a secret chat or are local. Use messageProperties.can_be_saved and messageProperties.can_be_copied_to_secret_chat to check whether the message is suitable
	SendCopy bool `json:"send_copy"`
	// Pass true to remove media captions of message copies. Ignored if send_copy is false
	RemoveCaption bool `json:"remove_caption"`
}

func (req ForwardMessagesRequest) GetFunctionName() string {
	return "forwardMessages"
}

// Forwards previously sent messages. Returns the forwarded messages in the same order as the message identifiers passed in message_ids. If a message can't be forwarded, null will be returned instead of the message
func (client *Client) ForwardMessages(ctx context.Context, req *ForwardMessagesRequest) (*Messages, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessages(result.Data)
}

type SendQuickReplyShortcutMessagesRequest struct {
	request
	// Identifier of the chat to which to send messages. The chat must be a private chat with a regular user
	ChatId int64 `json:"chat_id"`
	// Unique identifier of the quick reply shortcut
	ShortcutId int32 `json:"shortcut_id"`
	// Non-persistent identifier, which will be returned back in messageSendingStatePending object and can be used to match sent messages and corresponding updateNewMessage updates
	SendingId int32 `json:"sending_id"`
}

func (req SendQuickReplyShortcutMessagesRequest) GetFunctionName() string {
	return "sendQuickReplyShortcutMessages"
}

// Sends messages from a quick reply shortcut. Requires Telegram Business subscription. Can't be used to send paid messages
func (client *Client) SendQuickReplyShortcutMessages(ctx context.Context, req *SendQuickReplyShortcutMessagesRequest) (*Messages, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessages(result.Data)
}

type ResendMessagesRequest struct {
	request
	// Identifier of the chat to send messages
	ChatId int64 `json:"chat_id"`
	// Identifiers of the messages to resend. Message identifiers must be in a strictly increasing order
	MessageIds []int64 `json:"message_ids"`
	// New manually chosen quote from the message to be replied; pass null if none. Ignored if more than one message is re-sent, or if messageSendingStateFailed.need_another_reply_quote == false
	Quote *InputTextQuote `json:"quote"`
	// The number of Telegram Stars the user agreed to pay to send the messages. Ignored if messageSendingStateFailed.required_paid_message_star_count == 0
	PaidMessageStarCount int64 `json:"paid_message_star_count"`
}

func (req ResendMessagesRequest) GetFunctionName() string {
	return "resendMessages"
}

// Resends messages which failed to send. Can be called only for messages for which messageSendingStateFailed.can_retry is true and after specified in messageSendingStateFailed.retry_after time passed. If a message is re-sent, the corresponding failed to send message is deleted. Returns the sent messages in the same order as the message identifiers passed in message_ids. If a message can't be re-sent, null will be returned instead of the message
func (client *Client) ResendMessages(ctx context.Context, req *ResendMessagesRequest) (*Messages, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessages(result.Data)
}

type AddLocalMessageRequest struct {
	request
	// Target chat
	ChatId int64 `json:"chat_id"`
	// Identifier of the sender of the message
	SenderId MessageSender `json:"sender_id"`
	// Information about the message or story to be replied; pass null if none
	ReplyTo InputMessageReplyTo `json:"reply_to"`
	// Pass true to disable notification for the message
	DisableNotification bool `json:"disable_notification"`
	// The content of the message to be added
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

func (req AddLocalMessageRequest) GetFunctionName() string {
	return "addLocalMessage"
}

// Adds a local message to a chat. The message is persistent across application restarts only if the message database is used. Returns the added message
func (client *Client) AddLocalMessage(ctx context.Context, req *AddLocalMessageRequest) (*Message, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessage(result.Data)
}

type DeleteMessagesRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Identifiers of the messages to be deleted. Use messageProperties.can_be_deleted_only_for_self and messageProperties.can_be_deleted_for_all_users to get suitable messages
	MessageIds []int64 `json:"message_ids"`
	// Pass true to delete messages for all chat members. Always true for supergroups, channels and secret chats
	Revoke bool `json:"revoke"`
}

func (req DeleteMessagesRequest) GetFunctionName() string {
	return "deleteMessages"
}

// Deletes messages
func (client *Client) DeleteMessages(ctx context.Context, req *DeleteMessagesRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type DeleteChatMessagesBySenderRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Identifier of the sender of messages to delete
	SenderId MessageSender `json:"sender_id"`
}

func (req DeleteChatMessagesBySenderRequest) GetFunctionName() string {
	return "deleteChatMessagesBySender"
}

// Deletes all messages sent by the specified message sender in a chat. Supported only for supergroups; requires can_delete_messages administrator right
func (client *Client) DeleteChatMessagesBySender(ctx context.Context, req *DeleteChatMessagesBySenderRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type DeleteChatMessagesByDateRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// The minimum date of the messages to delete
	MinDate int32 `json:"min_date"`
	// The maximum date of the messages to delete
	MaxDate int32 `json:"max_date"`
	// Pass true to delete chat messages for all users; private chats only
	Revoke bool `json:"revoke"`
}

func (req DeleteChatMessagesByDateRequest) GetFunctionName() string {
	return "deleteChatMessagesByDate"
}

// Deletes all messages between the specified dates in a chat. Supported only for private chats and basic groups. Messages sent in the last 30 seconds will not be deleted
func (client *Client) DeleteChatMessagesByDate(ctx context.Context, req *DeleteChatMessagesByDateRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type EditMessageTextRequest struct {
	request
	// The chat the message belongs to
	ChatId int64 `json:"chat_id"`
	// Identifier of the message. Use messageProperties.can_be_edited to check whether the message can be edited
	MessageId int64 `json:"message_id"`
	// The new message reply markup; pass null if none; for bots only
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// New text content of the message. Must be of type inputMessageText
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

func (req EditMessageTextRequest) GetFunctionName() string {
	return "editMessageText"
}

// Edits the text of a message (or a text of a game message). Returns the edited message after the edit is completed on the server side
func (client *Client) EditMessageText(ctx context.Context, req *EditMessageTextRequest) (*Message, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessage(result.Data)
}

type EditMessageLiveLocationRequest struct {
	request
	// The chat the message belongs to
	ChatId int64 `json:"chat_id"`
	// Identifier of the message. Use messageProperties.can_be_edited to check whether the message can be edited
	MessageId int64 `json:"message_id"`
	// The new message reply markup; pass null if none; for bots only
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// New location content of the message; pass null to stop sharing the live location
	Location *Location `json:"location"`
	// New time relative to the message send date, for which the location can be updated, in seconds. If 0x7FFFFFFF specified, then the location can be updated forever. Otherwise, must not exceed the current live_period by more than a day, and the live location expiration date must remain in the next 90 days. Pass 0 to keep the current live_period
	LivePeriod int32 `json:"live_period"`
	// The new direction in which the location moves, in degrees; 1-360. Pass 0 if unknown
	Heading int32 `json:"heading"`
	// The new maximum distance for proximity alerts, in meters (0-100000). Pass 0 if the notification is disabled
	ProximityAlertRadius int32 `json:"proximity_alert_radius"`
}

func (req EditMessageLiveLocationRequest) GetFunctionName() string {
	return "editMessageLiveLocation"
}

// Edits the message content of a live location. Messages can be edited for a limited period of time specified in the live location. Returns the edited message after the edit is completed on the server side
func (client *Client) EditMessageLiveLocation(ctx context.Context, req *EditMessageLiveLocationRequest) (*Message, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessage(result.Data)
}

type EditMessageMediaRequest struct {
	request
	// The chat the message belongs to
	ChatId int64 `json:"chat_id"`
	// Identifier of the message. Use messageProperties.can_edit_media to check whether the message can be edited
	MessageId int64 `json:"message_id"`
	// The new message reply markup; pass null if none; for bots only
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// New content of the message. Must be one of the following types: inputMessageAnimation, inputMessageAudio, inputMessageDocument, inputMessagePhoto or inputMessageVideo
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

func (req EditMessageMediaRequest) GetFunctionName() string {
	return "editMessageMedia"
}

// Edits the media content of a message, including message caption. If only the caption needs to be edited, use editMessageCaption instead. The type of message content in an album can't be changed with exception of replacing a photo with a video or vice versa. Returns the edited message after the edit is completed on the server side
func (client *Client) EditMessageMedia(ctx context.Context, req *EditMessageMediaRequest) (*Message, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessage(result.Data)
}

type EditMessageCaptionRequest struct {
	request
	// The chat the message belongs to
	ChatId int64 `json:"chat_id"`
	// Identifier of the message. Use messageProperties.can_be_edited to check whether the message can be edited
	MessageId int64 `json:"message_id"`
	// The new message reply markup; pass null if none; for bots only
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// New message content caption; 0-getOption("message_caption_length_max") characters; pass null to remove caption
	Caption *FormattedText `json:"caption"`
	// Pass true to show the caption above the media; otherwise, the caption will be shown below the media. May be true only for animation, photo, and video messages
	ShowCaptionAboveMedia bool `json:"show_caption_above_media"`
}

func (req EditMessageCaptionRequest) GetFunctionName() string {
	return "editMessageCaption"
}

// Edits the message content caption. Returns the edited message after the edit is completed on the server side
func (client *Client) EditMessageCaption(ctx context.Context, req *EditMessageCaptionRequest) (*Message, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessage(result.Data)
}

type EditMessageReplyMarkupRequest struct {
	request
	// The chat the message belongs to
	ChatId int64 `json:"chat_id"`
	// Identifier of the message. Use messageProperties.can_be_edited to check whether the message can be edited
	MessageId int64 `json:"message_id"`
	// The new message reply markup; pass null if none
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
}

func (req EditMessageReplyMarkupRequest) GetFunctionName() string {
	return "editMessageReplyMarkup"
}

// Edits the message reply markup; for bots only. Returns the edited message after the edit is completed on the server side
func (client *Client) EditMessageReplyMarkup(ctx context.Context, req *EditMessageReplyMarkupRequest) (*Message, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessage(result.Data)
}

type EditInlineMessageTextRequest struct {
	request
	// Inline message identifier
	InlineMessageId string `json:"inline_message_id"`
	// The new message reply markup; pass null if none
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// New text content of the message. Must be of type inputMessageText
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

func (req EditInlineMessageTextRequest) GetFunctionName() string {
	return "editInlineMessageText"
}

// Edits the text of an inline text or game message sent via a bot; for bots only
func (client *Client) EditInlineMessageText(ctx context.Context, req *EditInlineMessageTextRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type EditInlineMessageLiveLocationRequest struct {
	request
	// Inline message identifier
	InlineMessageId string `json:"inline_message_id"`
	// The new message reply markup; pass null if none
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// New location content of the message; pass null to stop sharing the live location
	Location *Location `json:"location"`
	// New time relative to the message send date, for which the location can be updated, in seconds. If 0x7FFFFFFF specified, then the location can be updated forever. Otherwise, must not exceed the current live_period by more than a day, and the live location expiration date must remain in the next 90 days. Pass 0 to keep the current live_period
	LivePeriod int32 `json:"live_period"`
	// The new direction in which the location moves, in degrees; 1-360. Pass 0 if unknown
	Heading int32 `json:"heading"`
	// The new maximum distance for proximity alerts, in meters (0-100000). Pass 0 if the notification is disabled
	ProximityAlertRadius int32 `json:"proximity_alert_radius"`
}

func (req EditInlineMessageLiveLocationRequest) GetFunctionName() string {
	return "editInlineMessageLiveLocation"
}

// Edits the content of a live location in an inline message sent via a bot; for bots only
func (client *Client) EditInlineMessageLiveLocation(ctx context.Context, req *EditInlineMessageLiveLocationRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type EditInlineMessageMediaRequest struct {
	request
	// Inline message identifier
	InlineMessageId string `json:"inline_message_id"`
	// The new message reply markup; pass null if none; for bots only
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// New content of the message. Must be one of the following types: inputMessageAnimation, inputMessageAudio, inputMessageDocument, inputMessagePhoto or inputMessageVideo
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

func (req EditInlineMessageMediaRequest) GetFunctionName() string {
	return "editInlineMessageMedia"
}

// Edits the media content of a message with a text, an animation, an audio, a document, a photo or a video in an inline message sent via a bot; for bots only
func (client *Client) EditInlineMessageMedia(ctx context.Context, req *EditInlineMessageMediaRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type EditInlineMessageCaptionRequest struct {
	request
	// Inline message identifier
	InlineMessageId string `json:"inline_message_id"`
	// The new message reply markup; pass null if none
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// New message content caption; pass null to remove caption; 0-getOption("message_caption_length_max") characters
	Caption *FormattedText `json:"caption"`
	// Pass true to show the caption above the media; otherwise, the caption will be shown below the media. May be true only for animation, photo, and video messages
	ShowCaptionAboveMedia bool `json:"show_caption_above_media"`
}

func (req EditInlineMessageCaptionRequest) GetFunctionName() string {
	return "editInlineMessageCaption"
}

// Edits the caption of an inline message sent via a bot; for bots only
func (client *Client) EditInlineMessageCaption(ctx context.Context, req *EditInlineMessageCaptionRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type EditInlineMessageReplyMarkupRequest struct {
	request
	// Inline message identifier
	InlineMessageId string `json:"inline_message_id"`
	// The new message reply markup; pass null if none
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
}

func (req EditInlineMessageReplyMarkupRequest) GetFunctionName() string {
	return "editInlineMessageReplyMarkup"
}

// Edits the reply markup of an inline message sent via a bot; for bots only
func (client *Client) EditInlineMessageReplyMarkup(ctx context.Context, req *EditInlineMessageReplyMarkupRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type EditMessageSchedulingStateRequest struct {
	request
	// The chat the message belongs to
	ChatId int64 `json:"chat_id"`
	// Identifier of the message. Use messageProperties.can_edit_scheduling_state to check whether the message is suitable
	MessageId int64 `json:"message_id"`
	// The new message scheduling state; pass null to send the message immediately. Must be null for messages in the state messageSchedulingStateSendWhenVideoProcessed
	SchedulingState MessageSchedulingState `json:"scheduling_state"`
}

func (req EditMessageSchedulingStateRequest) GetFunctionName() string {
	return "editMessageSchedulingState"
}

// Edits the time when a scheduled message will be sent. Scheduling state of all messages in the same album or forwarded together with the message will be also changed
func (client *Client) EditMessageSchedulingState(ctx context.Context, req *EditMessageSchedulingStateRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetMessageFactCheckRequest struct {
	request
	// The channel chat the message belongs to
	ChatId int64 `json:"chat_id"`
	// Identifier of the message
	MessageId int64 `json:"message_id"`
	// New text of the fact-check; 0-getOption("fact_check_length_max") characters; pass null to remove it. Only Bold, Italic, and TextUrl entities with https://t.me/ links are supported
	Text *FormattedText `json:"text"`
}

func (req SetMessageFactCheckRequest) GetFunctionName() string {
	return "setMessageFactCheck"
}

// Changes the fact-check of a message. Can be only used if messageProperties.can_set_fact_check == true
func (client *Client) SetMessageFactCheck(ctx context.Context, req *SetMessageFactCheckRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SendBusinessMessageRequest struct {
	request
	// Unique identifier of business connection on behalf of which to send the request
	BusinessConnectionId string `json:"business_connection_id"`
	// Target chat
	ChatId int64 `json:"chat_id"`
	// Information about the message to be replied; pass null if none
	ReplyTo InputMessageReplyTo `json:"reply_to"`
	// Pass true to disable notification for the message
	DisableNotification bool `json:"disable_notification"`
	// Pass true if the content of the message must be protected from forwarding and saving
	ProtectContent bool `json:"protect_content"`
	// Identifier of the effect to apply to the message
	EffectId JsonInt64 `json:"effect_id"`
	// Markup for replying to the message; pass null if none
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// The content of the message to be sent
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

func (req SendBusinessMessageRequest) GetFunctionName() string {
	return "sendBusinessMessage"
}

// Sends a message on behalf of a business account; for bots only. Returns the message after it was sent
func (client *Client) SendBusinessMessage(ctx context.Context, req *SendBusinessMessageRequest) (*BusinessMessage, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalBusinessMessage(result.Data)
}

type SendBusinessMessageAlbumRequest struct {
	request
	// Unique identifier of business connection on behalf of which to send the request
	BusinessConnectionId string `json:"business_connection_id"`
	// Target chat
	ChatId int64 `json:"chat_id"`
	// Information about the message to be replied; pass null if none
	ReplyTo InputMessageReplyTo `json:"reply_to"`
	// Pass true to disable notification for the message
	DisableNotification bool `json:"disable_notification"`
	// Pass true if the content of the message must be protected from forwarding and saving
	ProtectContent bool `json:"protect_content"`
	// Identifier of the effect to apply to the message
	EffectId JsonInt64 `json:"effect_id"`
	// Contents of messages to be sent. At most 10 messages can be added to an album. All messages must have the same value of show_caption_above_media
	InputMessageContents []InputMessageContent `json:"input_message_contents"`
}

func (req SendBusinessMessageAlbumRequest) GetFunctionName() string {
	return "sendBusinessMessageAlbum"
}

// Sends 2-10 messages grouped together into an album on behalf of a business account; for bots only. Currently, only audio, document, photo and video messages can be grouped into an album. Documents and audio files can be only grouped in an album with messages of the same type. Returns sent messages
func (client *Client) SendBusinessMessageAlbum(ctx context.Context, req *SendBusinessMessageAlbumRequest) (*BusinessMessages, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalBusinessMessages(result.Data)
}

type EditBusinessMessageTextRequest struct {
	request
	// Unique identifier of business connection on behalf of which the message was sent
	BusinessConnectionId string `json:"business_connection_id"`
	// The chat the message belongs to
	ChatId int64 `json:"chat_id"`
	// Identifier of the message
	MessageId int64 `json:"message_id"`
	// The new message reply markup; pass null if none
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// New text content of the message. Must be of type inputMessageText
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

func (req EditBusinessMessageTextRequest) GetFunctionName() string {
	return "editBusinessMessageText"
}

// Edits the text of a text or game message sent on behalf of a business account; for bots only
func (client *Client) EditBusinessMessageText(ctx context.Context, req *EditBusinessMessageTextRequest) (*BusinessMessage, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalBusinessMessage(result.Data)
}

type EditBusinessMessageLiveLocationRequest struct {
	request
	// Unique identifier of business connection on behalf of which the message was sent
	BusinessConnectionId string `json:"business_connection_id"`
	// The chat the message belongs to
	ChatId int64 `json:"chat_id"`
	// Identifier of the message
	MessageId int64 `json:"message_id"`
	// The new message reply markup; pass null if none
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// New location content of the message; pass null to stop sharing the live location
	Location *Location `json:"location"`
	// New time relative to the message send date, for which the location can be updated, in seconds. If 0x7FFFFFFF specified, then the location can be updated forever. Otherwise, must not exceed the current live_period by more than a day, and the live location expiration date must remain in the next 90 days. Pass 0 to keep the current live_period
	LivePeriod int32 `json:"live_period"`
	// The new direction in which the location moves, in degrees; 1-360. Pass 0 if unknown
	Heading int32 `json:"heading"`
	// The new maximum distance for proximity alerts, in meters (0-100000). Pass 0 if the notification is disabled
	ProximityAlertRadius int32 `json:"proximity_alert_radius"`
}

func (req EditBusinessMessageLiveLocationRequest) GetFunctionName() string {
	return "editBusinessMessageLiveLocation"
}

// Edits the content of a live location in a message sent on behalf of a business account; for bots only
func (client *Client) EditBusinessMessageLiveLocation(ctx context.Context, req *EditBusinessMessageLiveLocationRequest) (*BusinessMessage, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalBusinessMessage(result.Data)
}

type EditBusinessMessageMediaRequest struct {
	request
	// Unique identifier of business connection on behalf of which the message was sent
	BusinessConnectionId string `json:"business_connection_id"`
	// The chat the message belongs to
	ChatId int64 `json:"chat_id"`
	// Identifier of the message
	MessageId int64 `json:"message_id"`
	// The new message reply markup; pass null if none; for bots only
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// New content of the message. Must be one of the following types: inputMessageAnimation, inputMessageAudio, inputMessageDocument, inputMessagePhoto or inputMessageVideo
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

func (req EditBusinessMessageMediaRequest) GetFunctionName() string {
	return "editBusinessMessageMedia"
}

// Edits the media content of a message with a text, an animation, an audio, a document, a photo or a video in a message sent on behalf of a business account; for bots only
func (client *Client) EditBusinessMessageMedia(ctx context.Context, req *EditBusinessMessageMediaRequest) (*BusinessMessage, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalBusinessMessage(result.Data)
}

type EditBusinessMessageCaptionRequest struct {
	request
	// Unique identifier of business connection on behalf of which the message was sent
	BusinessConnectionId string `json:"business_connection_id"`
	// The chat the message belongs to
	ChatId int64 `json:"chat_id"`
	// Identifier of the message
	MessageId int64 `json:"message_id"`
	// The new message reply markup; pass null if none
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// New message content caption; pass null to remove caption; 0-getOption("message_caption_length_max") characters
	Caption *FormattedText `json:"caption"`
	// Pass true to show the caption above the media; otherwise, the caption will be shown below the media. May be true only for animation, photo, and video messages
	ShowCaptionAboveMedia bool `json:"show_caption_above_media"`
}

func (req EditBusinessMessageCaptionRequest) GetFunctionName() string {
	return "editBusinessMessageCaption"
}

// Edits the caption of a message sent on behalf of a business account; for bots only
func (client *Client) EditBusinessMessageCaption(ctx context.Context, req *EditBusinessMessageCaptionRequest) (*BusinessMessage, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalBusinessMessage(result.Data)
}

type EditBusinessMessageReplyMarkupRequest struct {
	request
	// Unique identifier of business connection on behalf of which the message was sent
	BusinessConnectionId string `json:"business_connection_id"`
	// The chat the message belongs to
	ChatId int64 `json:"chat_id"`
	// Identifier of the message
	MessageId int64 `json:"message_id"`
	// The new message reply markup; pass null if none
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
}

func (req EditBusinessMessageReplyMarkupRequest) GetFunctionName() string {
	return "editBusinessMessageReplyMarkup"
}

// Edits the reply markup of a message sent on behalf of a business account; for bots only
func (client *Client) EditBusinessMessageReplyMarkup(ctx context.Context, req *EditBusinessMessageReplyMarkupRequest) (*BusinessMessage, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalBusinessMessage(result.Data)
}

type StopBusinessPollRequest struct {
	request
	// Unique identifier of business connection on behalf of which the message with the poll was sent
	BusinessConnectionId string `json:"business_connection_id"`
	// The chat the message belongs to
	ChatId int64 `json:"chat_id"`
	// Identifier of the message containing the poll
	MessageId int64 `json:"message_id"`
	// The new message reply markup; pass null if none
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
}

func (req StopBusinessPollRequest) GetFunctionName() string {
	return "stopBusinessPoll"
}

// Stops a poll sent on behalf of a business account; for bots only
func (client *Client) StopBusinessPoll(ctx context.Context, req *StopBusinessPollRequest) (*BusinessMessage, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalBusinessMessage(result.Data)
}

type SetBusinessMessageIsPinnedRequest struct {
	request
	// Unique identifier of business connection on behalf of which the message was sent
	BusinessConnectionId string `json:"business_connection_id"`
	// The chat the message belongs to
	ChatId int64 `json:"chat_id"`
	// Identifier of the message
	MessageId int64 `json:"message_id"`
	// Pass true to pin the message, pass false to unpin it
	IsPinned bool `json:"is_pinned"`
}

func (req SetBusinessMessageIsPinnedRequest) GetFunctionName() string {
	return "setBusinessMessageIsPinned"
}

// Pins or unpins a message sent on behalf of a business account; for bots only
func (client *Client) SetBusinessMessageIsPinned(ctx context.Context, req *SetBusinessMessageIsPinnedRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ReadBusinessMessageRequest struct {
	request
	// Unique identifier of business connection through which the message was received
	BusinessConnectionId string `json:"business_connection_id"`
	// The chat the message belongs to
	ChatId int64 `json:"chat_id"`
	// Identifier of the message
	MessageId int64 `json:"message_id"`
}

func (req ReadBusinessMessageRequest) GetFunctionName() string {
	return "readBusinessMessage"
}

// Reads a message on behalf of a business account; for bots only
func (client *Client) ReadBusinessMessage(ctx context.Context, req *ReadBusinessMessageRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type DeleteBusinessMessagesRequest struct {
	request
	// Unique identifier of business connection through which the messages were received
	BusinessConnectionId string `json:"business_connection_id"`
	// Identifier of the messages
	MessageIds []int64 `json:"message_ids"`
}

func (req DeleteBusinessMessagesRequest) GetFunctionName() string {
	return "deleteBusinessMessages"
}

// Deletes messages on behalf of a business account; for bots only
func (client *Client) DeleteBusinessMessages(ctx context.Context, req *DeleteBusinessMessagesRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type EditBusinessStoryRequest struct {
	request
	// Identifier of the chat that posted the story
	StorySenderChatId int64 `json:"story_sender_chat_id"`
	// Identifier of the story to edit
	StoryId int32 `json:"story_id"`
	// New content of the story
	Content InputStoryContent `json:"content"`
	// New clickable rectangle areas to be shown on the story media
	Areas *InputStoryAreas `json:"areas"`
	// New story caption
	Caption *FormattedText `json:"caption"`
	// The new privacy settings for the story
	PrivacySettings StoryPrivacySettings `json:"privacy_settings"`
}

func (req EditBusinessStoryRequest) GetFunctionName() string {
	return "editBusinessStory"
}

// Changes a story sent by the bot on behalf of a business account; for bots only
func (client *Client) EditBusinessStory(ctx context.Context, req *EditBusinessStoryRequest) (*Story, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStory(result.Data)
}

type DeleteBusinessStoryRequest struct {
	request
	// Unique identifier of business connection
	BusinessConnectionId string `json:"business_connection_id"`
	// Identifier of the story to delete
	StoryId int32 `json:"story_id"`
}

func (req DeleteBusinessStoryRequest) GetFunctionName() string {
	return "deleteBusinessStory"
}

// Deletes a story sent by the bot on behalf of a business account; for bots only
func (client *Client) DeleteBusinessStory(ctx context.Context, req *DeleteBusinessStoryRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetBusinessAccountNameRequest struct {
	request
	// Unique identifier of business connection
	BusinessConnectionId string `json:"business_connection_id"`
	// The new value of the first name for the business account; 1-64 characters
	FirstName string `json:"first_name"`
	// The new value of the optional last name for the business account; 0-64 characters
	LastName string `json:"last_name"`
}

func (req SetBusinessAccountNameRequest) GetFunctionName() string {
	return "setBusinessAccountName"
}

// Changes the first and last name of a business account; for bots only
func (client *Client) SetBusinessAccountName(ctx context.Context, req *SetBusinessAccountNameRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetBusinessAccountBioRequest struct {
	request
	// Unique identifier of business connection
	BusinessConnectionId string `json:"business_connection_id"`
	// The new value of the bio; 0-getOption("bio_length_max") characters without line feeds
	Bio string `json:"bio"`
}

func (req SetBusinessAccountBioRequest) GetFunctionName() string {
	return "setBusinessAccountBio"
}

// Changes the bio of a business account; for bots only
func (client *Client) SetBusinessAccountBio(ctx context.Context, req *SetBusinessAccountBioRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetBusinessAccountProfilePhotoRequest struct {
	request
	// Unique identifier of business connection
	BusinessConnectionId string `json:"business_connection_id"`
	// Profile photo to set; pass null to remove the photo
	Photo InputChatPhoto `json:"photo"`
	// Pass true to set the public photo, which will be visible even the main photo is hidden by privacy settings
	IsPublic bool `json:"is_public"`
}

func (req SetBusinessAccountProfilePhotoRequest) GetFunctionName() string {
	return "setBusinessAccountProfilePhoto"
}

// Changes a profile photo of a business account; for bots only
func (client *Client) SetBusinessAccountProfilePhoto(ctx context.Context, req *SetBusinessAccountProfilePhotoRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetBusinessAccountUsernameRequest struct {
	request
	// Unique identifier of business connection
	BusinessConnectionId string `json:"business_connection_id"`
	// The new value of the username
	Username string `json:"username"`
}

func (req SetBusinessAccountUsernameRequest) GetFunctionName() string {
	return "setBusinessAccountUsername"
}

// Changes the editable username of a business account; for bots only
func (client *Client) SetBusinessAccountUsername(ctx context.Context, req *SetBusinessAccountUsernameRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetBusinessAccountGiftSettingsRequest struct {
	request
	// Unique identifier of business connection
	BusinessConnectionId string `json:"business_connection_id"`
	// The new settings
	Settings *GiftSettings `json:"settings"`
}

func (req SetBusinessAccountGiftSettingsRequest) GetFunctionName() string {
	return "setBusinessAccountGiftSettings"
}

// Changes settings for gift receiving of a business account; for bots only
func (client *Client) SetBusinessAccountGiftSettings(ctx context.Context, req *SetBusinessAccountGiftSettingsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetBusinessAccountStarAmountRequest struct {
	request
	// Unique identifier of business connection
	BusinessConnectionId string `json:"business_connection_id"`
}

func (req GetBusinessAccountStarAmountRequest) GetFunctionName() string {
	return "getBusinessAccountStarAmount"
}

// Returns the amount of Telegram Stars owned by a business account; for bots only
func (client *Client) GetBusinessAccountStarAmount(ctx context.Context, req *GetBusinessAccountStarAmountRequest) (*StarAmount, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStarAmount(result.Data)
}

type TransferBusinessAccountStarsRequest struct {
	request
	// Unique identifier of business connection
	BusinessConnectionId string `json:"business_connection_id"`
	// Number of Telegram Stars to transfer
	StarCount int64 `json:"star_count"`
}

func (req TransferBusinessAccountStarsRequest) GetFunctionName() string {
	return "transferBusinessAccountStars"
}

// Transfer Telegram Stars from the business account to the business bot; for bots only
func (client *Client) TransferBusinessAccountStars(ctx context.Context, req *TransferBusinessAccountStarsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type CheckQuickReplyShortcutNameRequest struct {
	request
	// The name of the shortcut; 1-32 characters
	Name string `json:"name"`
}

func (req CheckQuickReplyShortcutNameRequest) GetFunctionName() string {
	return "checkQuickReplyShortcutName"
}

// Checks validness of a name for a quick reply shortcut. Can be called synchronously
func CheckQuickReplyShortcutName(req *CheckQuickReplyShortcutNameRequest) (*Ok, error) {
	result, err := Execute(req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

// deprecated
// Checks validness of a name for a quick reply shortcut. Can be called synchronously
func (client *Client) CheckQuickReplyShortcutName(req *CheckQuickReplyShortcutNameRequest) (*Ok, error) {
	return CheckQuickReplyShortcutName(req)
}

type LoadQuickReplyShortcutsRequest struct {
	request
}

func (req LoadQuickReplyShortcutsRequest) GetFunctionName() string {
	return "loadQuickReplyShortcuts"
}

// Loads quick reply shortcuts created by the current user. The loaded data will be sent through updateQuickReplyShortcut and updateQuickReplyShortcuts
func (client *Client) LoadQuickReplyShortcuts(ctx context.Context) (*Ok, error) {
	req := &LoadQuickReplyShortcutsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetQuickReplyShortcutNameRequest struct {
	request
	// Unique identifier of the quick reply shortcut
	ShortcutId int32 `json:"shortcut_id"`
	// New name for the shortcut. Use checkQuickReplyShortcutName to check its validness
	Name string `json:"name"`
}

func (req SetQuickReplyShortcutNameRequest) GetFunctionName() string {
	return "setQuickReplyShortcutName"
}

// Changes name of a quick reply shortcut
func (client *Client) SetQuickReplyShortcutName(ctx context.Context, req *SetQuickReplyShortcutNameRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type DeleteQuickReplyShortcutRequest struct {
	request
	// Unique identifier of the quick reply shortcut
	ShortcutId int32 `json:"shortcut_id"`
}

func (req DeleteQuickReplyShortcutRequest) GetFunctionName() string {
	return "deleteQuickReplyShortcut"
}

// Deletes a quick reply shortcut
func (client *Client) DeleteQuickReplyShortcut(ctx context.Context, req *DeleteQuickReplyShortcutRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ReorderQuickReplyShortcutsRequest struct {
	request
	// The new order of quick reply shortcuts
	ShortcutIds []int32 `json:"shortcut_ids"`
}

func (req ReorderQuickReplyShortcutsRequest) GetFunctionName() string {
	return "reorderQuickReplyShortcuts"
}

// Changes the order of quick reply shortcuts
func (client *Client) ReorderQuickReplyShortcuts(ctx context.Context, req *ReorderQuickReplyShortcutsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type LoadQuickReplyShortcutMessagesRequest struct {
	request
	// Unique identifier of the quick reply shortcut
	ShortcutId int32 `json:"shortcut_id"`
}

func (req LoadQuickReplyShortcutMessagesRequest) GetFunctionName() string {
	return "loadQuickReplyShortcutMessages"
}

// Loads quick reply messages that can be sent by a given quick reply shortcut. The loaded messages will be sent through updateQuickReplyShortcutMessages
func (client *Client) LoadQuickReplyShortcutMessages(ctx context.Context, req *LoadQuickReplyShortcutMessagesRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type DeleteQuickReplyShortcutMessagesRequest struct {
	request
	// Unique identifier of the quick reply shortcut to which the messages belong
	ShortcutId int32 `json:"shortcut_id"`
	// Unique identifiers of the messages
	MessageIds []int64 `json:"message_ids"`
}

func (req DeleteQuickReplyShortcutMessagesRequest) GetFunctionName() string {
	return "deleteQuickReplyShortcutMessages"
}

// Deletes specified quick reply messages
func (client *Client) DeleteQuickReplyShortcutMessages(ctx context.Context, req *DeleteQuickReplyShortcutMessagesRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type AddQuickReplyShortcutMessageRequest struct {
	request
	// Name of the target shortcut
	ShortcutName string `json:"shortcut_name"`
	// Identifier of a quick reply message in the same shortcut to be replied; pass 0 if none
	ReplyToMessageId int64 `json:"reply_to_message_id"`
	// The content of the message to be added; inputMessagePoll, inputMessageForwarded and inputMessageLocation with live_period aren't supported
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

func (req AddQuickReplyShortcutMessageRequest) GetFunctionName() string {
	return "addQuickReplyShortcutMessage"
}

// Adds a message to a quick reply shortcut. If shortcut doesn't exist and there are less than getOption("quick_reply_shortcut_count_max") shortcuts, then a new shortcut is created. The shortcut must not contain more than getOption("quick_reply_shortcut_message_count_max") messages after adding the new message. Returns the added message
func (client *Client) AddQuickReplyShortcutMessage(ctx context.Context, req *AddQuickReplyShortcutMessageRequest) (*QuickReplyMessage, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalQuickReplyMessage(result.Data)
}

type AddQuickReplyShortcutInlineQueryResultMessageRequest struct {
	request
	// Name of the target shortcut
	ShortcutName string `json:"shortcut_name"`
	// Identifier of a quick reply message in the same shortcut to be replied; pass 0 if none
	ReplyToMessageId int64 `json:"reply_to_message_id"`
	// Identifier of the inline query
	QueryId JsonInt64 `json:"query_id"`
	// Identifier of the inline query result
	ResultId string `json:"result_id"`
	// Pass true to hide the bot, via which the message is sent. Can be used only for bots getOption("animation_search_bot_username"), getOption("photo_search_bot_username"), and getOption("venue_search_bot_username")
	HideViaBot bool `json:"hide_via_bot"`
}

func (req AddQuickReplyShortcutInlineQueryResultMessageRequest) GetFunctionName() string {
	return "addQuickReplyShortcutInlineQueryResultMessage"
}

// Adds a message to a quick reply shortcut via inline bot. If shortcut doesn't exist and there are less than getOption("quick_reply_shortcut_count_max") shortcuts, then a new shortcut is created. The shortcut must not contain more than getOption("quick_reply_shortcut_message_count_max") messages after adding the new message. Returns the added message
func (client *Client) AddQuickReplyShortcutInlineQueryResultMessage(ctx context.Context, req *AddQuickReplyShortcutInlineQueryResultMessageRequest) (*QuickReplyMessage, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalQuickReplyMessage(result.Data)
}

type AddQuickReplyShortcutMessageAlbumRequest struct {
	request
	// Name of the target shortcut
	ShortcutName string `json:"shortcut_name"`
	// Identifier of a quick reply message in the same shortcut to be replied; pass 0 if none
	ReplyToMessageId int64 `json:"reply_to_message_id"`
	// Contents of messages to be sent. At most 10 messages can be added to an album. All messages must have the same value of show_caption_above_media
	InputMessageContents []InputMessageContent `json:"input_message_contents"`
}

func (req AddQuickReplyShortcutMessageAlbumRequest) GetFunctionName() string {
	return "addQuickReplyShortcutMessageAlbum"
}

// Adds 2-10 messages grouped together into an album to a quick reply shortcut. Currently, only audio, document, photo and video messages can be grouped into an album. Documents and audio files can be only grouped in an album with messages of the same type. Returns sent messages
func (client *Client) AddQuickReplyShortcutMessageAlbum(ctx context.Context, req *AddQuickReplyShortcutMessageAlbumRequest) (*QuickReplyMessages, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalQuickReplyMessages(result.Data)
}

type ReaddQuickReplyShortcutMessagesRequest struct {
	request
	// Name of the target shortcut
	ShortcutName string `json:"shortcut_name"`
	// Identifiers of the quick reply messages to readd. Message identifiers must be in a strictly increasing order
	MessageIds []int64 `json:"message_ids"`
}

func (req ReaddQuickReplyShortcutMessagesRequest) GetFunctionName() string {
	return "readdQuickReplyShortcutMessages"
}

// Readds quick reply messages which failed to add. Can be called only for messages for which messageSendingStateFailed.can_retry is true and after specified in messageSendingStateFailed.retry_after time passed. If a message is readded, the corresponding failed to send message is deleted. Returns the sent messages in the same order as the message identifiers passed in message_ids. If a message can't be readded, null will be returned instead of the message
func (client *Client) ReaddQuickReplyShortcutMessages(ctx context.Context, req *ReaddQuickReplyShortcutMessagesRequest) (*QuickReplyMessages, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalQuickReplyMessages(result.Data)
}

type EditQuickReplyMessageRequest struct {
	request
	// Unique identifier of the quick reply shortcut with the message
	ShortcutId int32 `json:"shortcut_id"`
	// Identifier of the message
	MessageId int64 `json:"message_id"`
	// New content of the message. Must be one of the following types: inputMessageText, inputMessageAnimation, inputMessageAudio, inputMessageDocument, inputMessagePhoto or inputMessageVideo
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

func (req EditQuickReplyMessageRequest) GetFunctionName() string {
	return "editQuickReplyMessage"
}

// Asynchronously edits the text, media or caption of a quick reply message. Use quickReplyMessage.can_be_edited to check whether a message can be edited. Media message can be edited only to a media message. The type of message content in an album can't be changed with exception of replacing a photo with a video or vice versa
func (client *Client) EditQuickReplyMessage(ctx context.Context, req *EditQuickReplyMessageRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetForumTopicDefaultIconsRequest struct {
	request
}

func (req GetForumTopicDefaultIconsRequest) GetFunctionName() string {
	return "getForumTopicDefaultIcons"
}

// Returns the list of custom emoji, which can be used as forum topic icon by all users
func (client *Client) GetForumTopicDefaultIcons(ctx context.Context) (*Stickers, error) {
	req := &GetForumTopicDefaultIconsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStickers(result.Data)
}

type CreateForumTopicRequest struct {
	request
	// Identifier of the chat
	ChatId int64 `json:"chat_id"`
	// Name of the topic; 1-128 characters
	Name string `json:"name"`
	// Icon of the topic. Icon color must be one of 0x6FB9F0, 0xFFD67E, 0xCB86DB, 0x8EEE98, 0xFF93B2, or 0xFB6F5F. Telegram Premium users can use any custom emoji as topic icon, other users can use only a custom emoji returned by getForumTopicDefaultIcons
	Icon *ForumTopicIcon `json:"icon"`
}

func (req CreateForumTopicRequest) GetFunctionName() string {
	return "createForumTopic"
}

// Creates a topic in a forum supergroup chat; requires can_manage_topics administrator or can_create_topics member right in the supergroup
func (client *Client) CreateForumTopic(ctx context.Context, req *CreateForumTopicRequest) (*ForumTopicInfo, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalForumTopicInfo(result.Data)
}

type EditForumTopicRequest struct {
	request
	// Identifier of the chat
	ChatId int64 `json:"chat_id"`
	// Message thread identifier of the forum topic
	MessageThreadId int64 `json:"message_thread_id"`
	// New name of the topic; 0-128 characters. If empty, the previous topic name is kept
	Name string `json:"name"`
	// Pass true to edit the icon of the topic. Icon of the General topic can't be edited
	EditIconCustomEmoji bool `json:"edit_icon_custom_emoji"`
	// Identifier of the new custom emoji for topic icon; pass 0 to remove the custom emoji. Ignored if edit_icon_custom_emoji is false. Telegram Premium users can use any custom emoji, other users can use only a custom emoji returned by getForumTopicDefaultIcons
	IconCustomEmojiId JsonInt64 `json:"icon_custom_emoji_id"`
}

func (req EditForumTopicRequest) GetFunctionName() string {
	return "editForumTopic"
}

// Edits title and icon of a topic in a forum supergroup chat; requires can_manage_topics right in the supergroup unless the user is creator of the topic
func (client *Client) EditForumTopic(ctx context.Context, req *EditForumTopicRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetForumTopicRequest struct {
	request
	// Identifier of the chat
	ChatId int64 `json:"chat_id"`
	// Message thread identifier of the forum topic
	MessageThreadId int64 `json:"message_thread_id"`
}

func (req GetForumTopicRequest) GetFunctionName() string {
	return "getForumTopic"
}

// Returns information about a forum topic
func (client *Client) GetForumTopic(ctx context.Context, req *GetForumTopicRequest) (*ForumTopic, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalForumTopic(result.Data)
}

type GetForumTopicLinkRequest struct {
	request
	// Identifier of the chat
	ChatId int64 `json:"chat_id"`
	// Message thread identifier of the forum topic
	MessageThreadId int64 `json:"message_thread_id"`
}

func (req GetForumTopicLinkRequest) GetFunctionName() string {
	return "getForumTopicLink"
}

// Returns an HTTPS link to a topic in a forum chat. This is an offline method
func (client *Client) GetForumTopicLink(ctx context.Context, req *GetForumTopicLinkRequest) (*MessageLink, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessageLink(result.Data)
}

type GetForumTopicsRequest struct {
	request
	// Identifier of the forum chat
	ChatId int64 `json:"chat_id"`
	// Query to search for in the forum topic's name
	Query string `json:"query"`
	// The date starting from which the results need to be fetched. Use 0 or any date in the future to get results from the last topic
	OffsetDate int32 `json:"offset_date"`
	// The message identifier of the last message in the last found topic, or 0 for the first request
	OffsetMessageId int64 `json:"offset_message_id"`
	// The message thread identifier of the last found topic, or 0 for the first request
	OffsetMessageThreadId int64 `json:"offset_message_thread_id"`
	// The maximum number of forum topics to be returned; up to 100. For optimal performance, the number of returned forum topics is chosen by TDLib and can be smaller than the specified limit
	Limit int32 `json:"limit"`
}

func (req GetForumTopicsRequest) GetFunctionName() string {
	return "getForumTopics"
}

// Returns found forum topics in a forum chat. This is a temporary method for getting information about topic list from the server
func (client *Client) GetForumTopics(ctx context.Context, req *GetForumTopicsRequest) (*ForumTopics, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalForumTopics(result.Data)
}

type SetForumTopicNotificationSettingsRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Message thread identifier of the forum topic
	MessageThreadId int64 `json:"message_thread_id"`
	// New notification settings for the forum topic. If the topic is muted for more than 366 days, it is considered to be muted forever
	NotificationSettings *ChatNotificationSettings `json:"notification_settings"`
}

func (req SetForumTopicNotificationSettingsRequest) GetFunctionName() string {
	return "setForumTopicNotificationSettings"
}

// Changes the notification settings of a forum topic
func (client *Client) SetForumTopicNotificationSettings(ctx context.Context, req *SetForumTopicNotificationSettingsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleForumTopicIsClosedRequest struct {
	request
	// Identifier of the chat
	ChatId int64 `json:"chat_id"`
	// Message thread identifier of the forum topic
	MessageThreadId int64 `json:"message_thread_id"`
	// Pass true to close the topic; pass false to reopen it
	IsClosed bool `json:"is_closed"`
}

func (req ToggleForumTopicIsClosedRequest) GetFunctionName() string {
	return "toggleForumTopicIsClosed"
}

// Toggles whether a topic is closed in a forum supergroup chat; requires can_manage_topics right in the supergroup unless the user is creator of the topic
func (client *Client) ToggleForumTopicIsClosed(ctx context.Context, req *ToggleForumTopicIsClosedRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleGeneralForumTopicIsHiddenRequest struct {
	request
	// Identifier of the chat
	ChatId int64 `json:"chat_id"`
	// Pass true to hide and close the General topic; pass false to unhide it
	IsHidden bool `json:"is_hidden"`
}

func (req ToggleGeneralForumTopicIsHiddenRequest) GetFunctionName() string {
	return "toggleGeneralForumTopicIsHidden"
}

// Toggles whether a General topic is hidden in a forum supergroup chat; requires can_manage_topics right in the supergroup
func (client *Client) ToggleGeneralForumTopicIsHidden(ctx context.Context, req *ToggleGeneralForumTopicIsHiddenRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleForumTopicIsPinnedRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Message thread identifier of the forum topic
	MessageThreadId int64 `json:"message_thread_id"`
	// Pass true to pin the topic; pass false to unpin it
	IsPinned bool `json:"is_pinned"`
}

func (req ToggleForumTopicIsPinnedRequest) GetFunctionName() string {
	return "toggleForumTopicIsPinned"
}

// Changes the pinned state of a forum topic; requires can_manage_topics right in the supergroup. There can be up to getOption("pinned_forum_topic_count_max") pinned forum topics
func (client *Client) ToggleForumTopicIsPinned(ctx context.Context, req *ToggleForumTopicIsPinnedRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetPinnedForumTopicsRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// The new list of pinned forum topics
	MessageThreadIds []int64 `json:"message_thread_ids"`
}

func (req SetPinnedForumTopicsRequest) GetFunctionName() string {
	return "setPinnedForumTopics"
}

// Changes the order of pinned forum topics; requires can_manage_topics right in the supergroup
func (client *Client) SetPinnedForumTopics(ctx context.Context, req *SetPinnedForumTopicsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type DeleteForumTopicRequest struct {
	request
	// Identifier of the chat
	ChatId int64 `json:"chat_id"`
	// Message thread identifier of the forum topic
	MessageThreadId int64 `json:"message_thread_id"`
}

func (req DeleteForumTopicRequest) GetFunctionName() string {
	return "deleteForumTopic"
}

// Deletes all messages in a forum topic; requires can_delete_messages administrator right in the supergroup unless the user is creator of the topic, the topic has no messages from other users and has at most 11 messages
func (client *Client) DeleteForumTopic(ctx context.Context, req *DeleteForumTopicRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetEmojiReactionRequest struct {
	request
	// Text representation of the reaction
	Emoji string `json:"emoji"`
}

func (req GetEmojiReactionRequest) GetFunctionName() string {
	return "getEmojiReaction"
}

// Returns information about an emoji reaction. Returns a 404 error if the reaction is not found
func (client *Client) GetEmojiReaction(ctx context.Context, req *GetEmojiReactionRequest) (*EmojiReaction, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalEmojiReaction(result.Data)
}

type GetCustomEmojiReactionAnimationsRequest struct {
	request
}

func (req GetCustomEmojiReactionAnimationsRequest) GetFunctionName() string {
	return "getCustomEmojiReactionAnimations"
}

// Returns TGS stickers with generic animations for custom emoji reactions
func (client *Client) GetCustomEmojiReactionAnimations(ctx context.Context) (*Stickers, error) {
	req := &GetCustomEmojiReactionAnimationsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStickers(result.Data)
}

type GetMessageAvailableReactionsRequest struct {
	request
	// Identifier of the chat to which the message belongs
	ChatId int64 `json:"chat_id"`
	// Identifier of the message
	MessageId int64 `json:"message_id"`
	// Number of reaction per row, 5-25
	RowSize int32 `json:"row_size"`
}

func (req GetMessageAvailableReactionsRequest) GetFunctionName() string {
	return "getMessageAvailableReactions"
}

// Returns reactions, which can be added to a message. The list can change after updateActiveEmojiReactions, updateChatAvailableReactions for the chat, or updateMessageInteractionInfo for the message
func (client *Client) GetMessageAvailableReactions(ctx context.Context, req *GetMessageAvailableReactionsRequest) (*AvailableReactions, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalAvailableReactions(result.Data)
}

type ClearRecentReactionsRequest struct {
	request
}

func (req ClearRecentReactionsRequest) GetFunctionName() string {
	return "clearRecentReactions"
}

// Clears the list of recently used reactions
func (client *Client) ClearRecentReactions(ctx context.Context) (*Ok, error) {
	req := &ClearRecentReactionsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type AddMessageReactionRequest struct {
	request
	// Identifier of the chat to which the message belongs
	ChatId int64 `json:"chat_id"`
	// Identifier of the message
	MessageId int64 `json:"message_id"`
	// Type of the reaction to add. Use addPendingPaidMessageReaction instead to add the paid reaction
	ReactionType ReactionType `json:"reaction_type"`
	// Pass true if the reaction is added with a big animation
	IsBig bool `json:"is_big"`
	// Pass true if the reaction needs to be added to recent reactions; tags are never added to the list of recent reactions
	UpdateRecentReactions bool `json:"update_recent_reactions"`
}

func (req AddMessageReactionRequest) GetFunctionName() string {
	return "addMessageReaction"
}

// Adds a reaction or a tag to a message. Use getMessageAvailableReactions to receive the list of available reactions for the message
func (client *Client) AddMessageReaction(ctx context.Context, req *AddMessageReactionRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type RemoveMessageReactionRequest struct {
	request
	// Identifier of the chat to which the message belongs
	ChatId int64 `json:"chat_id"`
	// Identifier of the message
	MessageId int64 `json:"message_id"`
	// Type of the reaction to remove. The paid reaction can't be removed
	ReactionType ReactionType `json:"reaction_type"`
}

func (req RemoveMessageReactionRequest) GetFunctionName() string {
	return "removeMessageReaction"
}

// Removes a reaction from a message. A chosen reaction can always be removed
func (client *Client) RemoveMessageReaction(ctx context.Context, req *RemoveMessageReactionRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetChatAvailablePaidMessageReactionSendersRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
}

func (req GetChatAvailablePaidMessageReactionSendersRequest) GetFunctionName() string {
	return "getChatAvailablePaidMessageReactionSenders"
}

// Returns the list of message sender identifiers, which can be used to send a paid reaction in a chat
func (client *Client) GetChatAvailablePaidMessageReactionSenders(ctx context.Context, req *GetChatAvailablePaidMessageReactionSendersRequest) (*MessageSenders, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessageSenders(result.Data)
}

type AddPendingPaidMessageReactionRequest struct {
	request
	// Identifier of the chat to which the message belongs
	ChatId int64 `json:"chat_id"`
	// Identifier of the message
	MessageId int64 `json:"message_id"`
	// Number of Telegram Stars to be used for the reaction. The total number of pending paid reactions must not exceed getOption("paid_reaction_star_count_max")
	StarCount int64 `json:"star_count"`
	// Type of the paid reaction; pass null if the user didn't choose reaction type explicitly, for example, the reaction is set from the message bubble
	Type PaidReactionType `json:"type"`
}

func (req AddPendingPaidMessageReactionRequest) GetFunctionName() string {
	return "addPendingPaidMessageReaction"
}

// Adds the paid message reaction to a message. Use getMessageAvailableReactions to check whether the reaction is available for the message
func (client *Client) AddPendingPaidMessageReaction(ctx context.Context, req *AddPendingPaidMessageReactionRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type CommitPendingPaidMessageReactionsRequest struct {
	request
	// Identifier of the chat to which the message belongs
	ChatId int64 `json:"chat_id"`
	// Identifier of the message
	MessageId int64 `json:"message_id"`
}

func (req CommitPendingPaidMessageReactionsRequest) GetFunctionName() string {
	return "commitPendingPaidMessageReactions"
}

// Applies all pending paid reactions on a message
func (client *Client) CommitPendingPaidMessageReactions(ctx context.Context, req *CommitPendingPaidMessageReactionsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type RemovePendingPaidMessageReactionsRequest struct {
	request
	// Identifier of the chat to which the message belongs
	ChatId int64 `json:"chat_id"`
	// Identifier of the message
	MessageId int64 `json:"message_id"`
}

func (req RemovePendingPaidMessageReactionsRequest) GetFunctionName() string {
	return "removePendingPaidMessageReactions"
}

// Removes all pending paid reactions on a message
func (client *Client) RemovePendingPaidMessageReactions(ctx context.Context, req *RemovePendingPaidMessageReactionsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetPaidMessageReactionTypeRequest struct {
	request
	// Identifier of the chat to which the message belongs
	ChatId int64 `json:"chat_id"`
	// Identifier of the message
	MessageId int64 `json:"message_id"`
	// New type of the paid reaction
	Type PaidReactionType `json:"type"`
}

func (req SetPaidMessageReactionTypeRequest) GetFunctionName() string {
	return "setPaidMessageReactionType"
}

// Changes type of paid message reaction of the current user on a message. The message must have paid reaction added by the current user
func (client *Client) SetPaidMessageReactionType(ctx context.Context, req *SetPaidMessageReactionTypeRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetMessageReactionsRequest struct {
	request
	// Identifier of the chat to which the message belongs
	ChatId int64 `json:"chat_id"`
	// Identifier of the message
	MessageId int64 `json:"message_id"`
	// Types of the reaction to set; pass an empty list to remove the reactions
	ReactionTypes []ReactionType `json:"reaction_types"`
	// Pass true if the reactions are added with a big animation
	IsBig bool `json:"is_big"`
}

func (req SetMessageReactionsRequest) GetFunctionName() string {
	return "setMessageReactions"
}

// Sets reactions on a message; for bots only
func (client *Client) SetMessageReactions(ctx context.Context, req *SetMessageReactionsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetMessageAddedReactionsRequest struct {
	request
	// Identifier of the chat to which the message belongs
	ChatId int64 `json:"chat_id"`
	// Identifier of the message. Use message.interaction_info.reactions.can_get_added_reactions to check whether added reactions can be received for the message
	MessageId int64 `json:"message_id"`
	// Type of the reactions to return; pass null to return all added reactions; reactionTypePaid isn't supported
	ReactionType ReactionType `json:"reaction_type"`
	// Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results
	Offset string `json:"offset"`
	// The maximum number of reactions to be returned; must be positive and can't be greater than 100
	Limit int32 `json:"limit"`
}

func (req GetMessageAddedReactionsRequest) GetFunctionName() string {
	return "getMessageAddedReactions"
}

// Returns reactions added for a message, along with their sender
func (client *Client) GetMessageAddedReactions(ctx context.Context, req *GetMessageAddedReactionsRequest) (*AddedReactions, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalAddedReactions(result.Data)
}

type SetDefaultReactionTypeRequest struct {
	request
	// New type of the default reaction. The paid reaction can't be set as default
	ReactionType ReactionType `json:"reaction_type"`
}

func (req SetDefaultReactionTypeRequest) GetFunctionName() string {
	return "setDefaultReactionType"
}

// Changes type of default reaction for the current user
func (client *Client) SetDefaultReactionType(ctx context.Context, req *SetDefaultReactionTypeRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetSavedMessagesTagsRequest struct {
	request
	// Identifier of Saved Messages topic which tags will be returned; pass 0 to get all Saved Messages tags
	SavedMessagesTopicId int64 `json:"saved_messages_topic_id"`
}

func (req GetSavedMessagesTagsRequest) GetFunctionName() string {
	return "getSavedMessagesTags"
}

// Returns tags used in Saved Messages or a Saved Messages topic
func (client *Client) GetSavedMessagesTags(ctx context.Context, req *GetSavedMessagesTagsRequest) (*SavedMessagesTags, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalSavedMessagesTags(result.Data)
}

type SetSavedMessagesTagLabelRequest struct {
	request
	// The tag which label will be changed
	Tag ReactionType `json:"tag"`
	// New label for the tag; 0-12 characters
	Label string `json:"label"`
}

func (req SetSavedMessagesTagLabelRequest) GetFunctionName() string {
	return "setSavedMessagesTagLabel"
}

// Changes label of a Saved Messages tag; for Telegram Premium users only
func (client *Client) SetSavedMessagesTagLabel(ctx context.Context, req *SetSavedMessagesTagLabelRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetMessageEffectRequest struct {
	request
	// Unique identifier of the effect
	EffectId JsonInt64 `json:"effect_id"`
}

func (req GetMessageEffectRequest) GetFunctionName() string {
	return "getMessageEffect"
}

// Returns information about a message effect. Returns a 404 error if the effect is not found
func (client *Client) GetMessageEffect(ctx context.Context, req *GetMessageEffectRequest) (*MessageEffect, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessageEffect(result.Data)
}

type SearchQuoteRequest struct {
	request
	// Text in which to search for the quote
	Text *FormattedText `json:"text"`
	// Quote to search for
	Quote *FormattedText `json:"quote"`
	// Approximate quote position in UTF-16 code units
	QuotePosition int32 `json:"quote_position"`
}

func (req SearchQuoteRequest) GetFunctionName() string {
	return "searchQuote"
}

// Searches for a given quote in a text. Returns found quote start position in UTF-16 code units. Returns a 404 error if the quote is not found. Can be called synchronously
func SearchQuote(req *SearchQuoteRequest) (*FoundPosition, error) {
	result, err := Execute(req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFoundPosition(result.Data)
}

// deprecated
// Searches for a given quote in a text. Returns found quote start position in UTF-16 code units. Returns a 404 error if the quote is not found. Can be called synchronously
func (client *Client) SearchQuote(req *SearchQuoteRequest) (*FoundPosition, error) {
	return SearchQuote(req)
}

type GetTextEntitiesRequest struct {
	request
	// The text in which to look for entities
	Text string `json:"text"`
}

func (req GetTextEntitiesRequest) GetFunctionName() string {
	return "getTextEntities"
}

// Returns all entities (mentions, hashtags, cashtags, bot commands, bank card numbers, URLs, and email addresses) found in the text. Can be called synchronously
func GetTextEntities(req *GetTextEntitiesRequest) (*TextEntities, error) {
	result, err := Execute(req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalTextEntities(result.Data)
}

// deprecated
// Returns all entities (mentions, hashtags, cashtags, bot commands, bank card numbers, URLs, and email addresses) found in the text. Can be called synchronously
func (client *Client) GetTextEntities(req *GetTextEntitiesRequest) (*TextEntities, error) {
	return GetTextEntities(req)
}

type ParseTextEntitiesRequest struct {
	request
	// The text to parse
	Text string `json:"text"`
	// Text parse mode
	ParseMode TextParseMode `json:"parse_mode"`
}

func (req ParseTextEntitiesRequest) GetFunctionName() string {
	return "parseTextEntities"
}

// Parses Bold, Italic, Underline, Strikethrough, Spoiler, CustomEmoji, BlockQuote, ExpandableBlockQuote, Code, Pre, PreCode, TextUrl and MentionName entities from a marked-up text. Can be called synchronously
func ParseTextEntities(req *ParseTextEntitiesRequest) (*FormattedText, error) {
	result, err := Execute(req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFormattedText(result.Data)
}

// deprecated
// Parses Bold, Italic, Underline, Strikethrough, Spoiler, CustomEmoji, BlockQuote, ExpandableBlockQuote, Code, Pre, PreCode, TextUrl and MentionName entities from a marked-up text. Can be called synchronously
func (client *Client) ParseTextEntities(req *ParseTextEntitiesRequest) (*FormattedText, error) {
	return ParseTextEntities(req)
}

type ParseMarkdownRequest struct {
	request
	// The text to parse. For example, "__italic__ ~~strikethrough~~ ||spoiler|| **bold** `code` ```pre``` __[italic__ text_url](telegram.org) __italic**bold italic__bold**"
	Text *FormattedText `json:"text"`
}

func (req ParseMarkdownRequest) GetFunctionName() string {
	return "parseMarkdown"
}

// Parses Markdown entities in a human-friendly format, ignoring markup errors. Can be called synchronously
func ParseMarkdown(req *ParseMarkdownRequest) (*FormattedText, error) {
	result, err := Execute(req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFormattedText(result.Data)
}

// deprecated
// Parses Markdown entities in a human-friendly format, ignoring markup errors. Can be called synchronously
func (client *Client) ParseMarkdown(req *ParseMarkdownRequest) (*FormattedText, error) {
	return ParseMarkdown(req)
}

type GetMarkdownTextRequest struct {
	request
	// The text
	Text *FormattedText `json:"text"`
}

func (req GetMarkdownTextRequest) GetFunctionName() string {
	return "getMarkdownText"
}

// Replaces text entities with Markdown formatting in a human-friendly format. Entities that can't be represented in Markdown unambiguously are kept as is. Can be called synchronously
func GetMarkdownText(req *GetMarkdownTextRequest) (*FormattedText, error) {
	result, err := Execute(req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFormattedText(result.Data)
}

// deprecated
// Replaces text entities with Markdown formatting in a human-friendly format. Entities that can't be represented in Markdown unambiguously are kept as is. Can be called synchronously
func (client *Client) GetMarkdownText(req *GetMarkdownTextRequest) (*FormattedText, error) {
	return GetMarkdownText(req)
}

type GetCountryFlagEmojiRequest struct {
	request
	// A two-letter ISO 3166-1 alpha-2 country code as received from getCountries
	CountryCode string `json:"country_code"`
}

func (req GetCountryFlagEmojiRequest) GetFunctionName() string {
	return "getCountryFlagEmoji"
}

// Returns an emoji for the given country. Returns an empty string on failure. Can be called synchronously
func GetCountryFlagEmoji(req *GetCountryFlagEmojiRequest) (*Text, error) {
	result, err := Execute(req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalText(result.Data)
}

// deprecated
// Returns an emoji for the given country. Returns an empty string on failure. Can be called synchronously
func (client *Client) GetCountryFlagEmoji(req *GetCountryFlagEmojiRequest) (*Text, error) {
	return GetCountryFlagEmoji(req)
}

type GetFileMimeTypeRequest struct {
	request
	// The name of the file or path to the file
	FileName string `json:"file_name"`
}

func (req GetFileMimeTypeRequest) GetFunctionName() string {
	return "getFileMimeType"
}

// Returns the MIME type of a file, guessed by its extension. Returns an empty string on failure. Can be called synchronously
func GetFileMimeType(req *GetFileMimeTypeRequest) (*Text, error) {
	result, err := Execute(req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalText(result.Data)
}

// deprecated
// Returns the MIME type of a file, guessed by its extension. Returns an empty string on failure. Can be called synchronously
func (client *Client) GetFileMimeType(req *GetFileMimeTypeRequest) (*Text, error) {
	return GetFileMimeType(req)
}

type GetFileExtensionRequest struct {
	request
	// The MIME type of the file
	MimeType string `json:"mime_type"`
}

func (req GetFileExtensionRequest) GetFunctionName() string {
	return "getFileExtension"
}

// Returns the extension of a file, guessed by its MIME type. Returns an empty string on failure. Can be called synchronously
func GetFileExtension(req *GetFileExtensionRequest) (*Text, error) {
	result, err := Execute(req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalText(result.Data)
}

// deprecated
// Returns the extension of a file, guessed by its MIME type. Returns an empty string on failure. Can be called synchronously
func (client *Client) GetFileExtension(req *GetFileExtensionRequest) (*Text, error) {
	return GetFileExtension(req)
}

type CleanFileNameRequest struct {
	request
	// File name or path to the file
	FileName string `json:"file_name"`
}

func (req CleanFileNameRequest) GetFunctionName() string {
	return "cleanFileName"
}

// Removes potentially dangerous characters from the name of a file. Returns an empty string on failure. Can be called synchronously
func CleanFileName(req *CleanFileNameRequest) (*Text, error) {
	result, err := Execute(req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalText(result.Data)
}

// deprecated
// Removes potentially dangerous characters from the name of a file. Returns an empty string on failure. Can be called synchronously
func (client *Client) CleanFileName(req *CleanFileNameRequest) (*Text, error) {
	return CleanFileName(req)
}

type GetLanguagePackStringRequest struct {
	request
	// Path to the language pack database in which strings are stored
	LanguagePackDatabasePath string `json:"language_pack_database_path"`
	// Localization target to which the language pack belongs
	LocalizationTarget string `json:"localization_target"`
	// Language pack identifier
	LanguagePackId string `json:"language_pack_id"`
	// Language pack key of the string to be returned
	Key string `json:"key"`
}

func (req GetLanguagePackStringRequest) GetFunctionName() string {
	return "getLanguagePackString"
}

// Returns a string stored in the local database from the specified localization target and language pack by its key. Returns a 404 error if the string is not found. Can be called synchronously
func GetLanguagePackString(req *GetLanguagePackStringRequest) (LanguagePackStringValue, error) {
	result, err := Execute(req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	switch result.MetaType {
	case ConstructorLanguagePackStringValueOrdinary:
		return UnmarshalLanguagePackStringValueOrdinary(result.Data)

	case ConstructorLanguagePackStringValuePluralized:
		return UnmarshalLanguagePackStringValuePluralized(result.Data)

	case ConstructorLanguagePackStringValueDeleted:
		return UnmarshalLanguagePackStringValueDeleted(result.Data)

	default:
		return nil, errors.New("invalid type")
	}
}

// deprecated
// Returns a string stored in the local database from the specified localization target and language pack by its key. Returns a 404 error if the string is not found. Can be called synchronously
func (client *Client) GetLanguagePackString(req *GetLanguagePackStringRequest) (LanguagePackStringValue, error) {
	return GetLanguagePackString(req)
}

type GetJsonValueRequest struct {
	request
	// The JSON-serialized string
	Json string `json:"json"`
}

func (req GetJsonValueRequest) GetFunctionName() string {
	return "getJsonValue"
}

// Converts a JSON-serialized string to corresponding JsonValue object. Can be called synchronously
func GetJsonValue(req *GetJsonValueRequest) (JsonValue, error) {
	result, err := Execute(req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	switch result.MetaType {
	case ConstructorJsonValueNull:
		return UnmarshalJsonValueNull(result.Data)

	case ConstructorJsonValueBoolean:
		return UnmarshalJsonValueBoolean(result.Data)

	case ConstructorJsonValueNumber:
		return UnmarshalJsonValueNumber(result.Data)

	case ConstructorJsonValueString:
		return UnmarshalJsonValueString(result.Data)

	case ConstructorJsonValueArray:
		return UnmarshalJsonValueArray(result.Data)

	case ConstructorJsonValueObject:
		return UnmarshalJsonValueObject(result.Data)

	default:
		return nil, errors.New("invalid type")
	}
}

// deprecated
// Converts a JSON-serialized string to corresponding JsonValue object. Can be called synchronously
func (client *Client) GetJsonValue(req *GetJsonValueRequest) (JsonValue, error) {
	return GetJsonValue(req)
}

type GetJsonStringRequest struct {
	request
	// The JsonValue object
	JsonValue JsonValue `json:"json_value"`
}

func (req GetJsonStringRequest) GetFunctionName() string {
	return "getJsonString"
}

// Converts a JsonValue object to corresponding JSON-serialized string. Can be called synchronously
func GetJsonString(req *GetJsonStringRequest) (*Text, error) {
	result, err := Execute(req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalText(result.Data)
}

// deprecated
// Converts a JsonValue object to corresponding JSON-serialized string. Can be called synchronously
func (client *Client) GetJsonString(req *GetJsonStringRequest) (*Text, error) {
	return GetJsonString(req)
}

type GetThemeParametersJsonStringRequest struct {
	request
	// Theme parameters to convert to JSON
	Theme *ThemeParameters `json:"theme"`
}

func (req GetThemeParametersJsonStringRequest) GetFunctionName() string {
	return "getThemeParametersJsonString"
}

// Converts a themeParameters object to corresponding JSON-serialized string. Can be called synchronously
func GetThemeParametersJsonString(req *GetThemeParametersJsonStringRequest) (*Text, error) {
	result, err := Execute(req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalText(result.Data)
}

// deprecated
// Converts a themeParameters object to corresponding JSON-serialized string. Can be called synchronously
func (client *Client) GetThemeParametersJsonString(req *GetThemeParametersJsonStringRequest) (*Text, error) {
	return GetThemeParametersJsonString(req)
}

type SetPollAnswerRequest struct {
	request
	// Identifier of the chat to which the poll belongs
	ChatId int64 `json:"chat_id"`
	// Identifier of the message containing the poll
	MessageId int64 `json:"message_id"`
	// 0-based identifiers of answer options, chosen by the user. User can choose more than 1 answer option only is the poll allows multiple answers
	OptionIds []int32 `json:"option_ids"`
}

func (req SetPollAnswerRequest) GetFunctionName() string {
	return "setPollAnswer"
}

// Changes the user answer to a poll. A poll in quiz mode can be answered only once
func (client *Client) SetPollAnswer(ctx context.Context, req *SetPollAnswerRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetPollVotersRequest struct {
	request
	// Identifier of the chat to which the poll belongs
	ChatId int64 `json:"chat_id"`
	// Identifier of the message containing the poll
	MessageId int64 `json:"message_id"`
	// 0-based identifier of the answer option
	OptionId int32 `json:"option_id"`
	// Number of voters to skip in the result; must be non-negative
	Offset int32 `json:"offset"`
	// The maximum number of voters to be returned; must be positive and can't be greater than 50. For optimal performance, the number of returned voters is chosen by TDLib and can be smaller than the specified limit, even if the end of the voter list has not been reached
	Limit int32 `json:"limit"`
}

func (req GetPollVotersRequest) GetFunctionName() string {
	return "getPollVoters"
}

// Returns message senders voted for the specified option in a non-anonymous polls. For optimal performance, the number of returned users is chosen by TDLib
func (client *Client) GetPollVoters(ctx context.Context, req *GetPollVotersRequest) (*MessageSenders, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessageSenders(result.Data)
}

type StopPollRequest struct {
	request
	// Identifier of the chat to which the poll belongs
	ChatId int64 `json:"chat_id"`
	// Identifier of the message containing the poll. Use messageProperties.can_be_edited to check whether the poll can be stopped
	MessageId int64 `json:"message_id"`
	// The new message reply markup; pass null if none; for bots only
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
}

func (req StopPollRequest) GetFunctionName() string {
	return "stopPoll"
}

// Stops a poll
func (client *Client) StopPoll(ctx context.Context, req *StopPollRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type HideSuggestedActionRequest struct {
	request
	// Suggested action to hide
	Action SuggestedAction `json:"action"`
}

func (req HideSuggestedActionRequest) GetFunctionName() string {
	return "hideSuggestedAction"
}

// Hides a suggested action
func (client *Client) HideSuggestedAction(ctx context.Context, req *HideSuggestedActionRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type HideContactCloseBirthdaysRequest struct {
	request
}

func (req HideContactCloseBirthdaysRequest) GetFunctionName() string {
	return "hideContactCloseBirthdays"
}

// Hides the list of contacts that have close birthdays for 24 hours
func (client *Client) HideContactCloseBirthdays(ctx context.Context) (*Ok, error) {
	req := &HideContactCloseBirthdaysRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetBusinessConnectionRequest struct {
	request
	// Identifier of the business connection to return
	ConnectionId string `json:"connection_id"`
}

func (req GetBusinessConnectionRequest) GetFunctionName() string {
	return "getBusinessConnection"
}

// Returns information about a business connection by its identifier; for bots only
func (client *Client) GetBusinessConnection(ctx context.Context, req *GetBusinessConnectionRequest) (*BusinessConnection, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalBusinessConnection(result.Data)
}

type GetLoginUrlInfoRequest struct {
	request
	// Chat identifier of the message with the button
	ChatId int64 `json:"chat_id"`
	// Message identifier of the message with the button. The message must not be scheduled
	MessageId int64 `json:"message_id"`
	// Button identifier
	ButtonId int64 `json:"button_id"`
}

func (req GetLoginUrlInfoRequest) GetFunctionName() string {
	return "getLoginUrlInfo"
}

// Returns information about a button of type inlineKeyboardButtonTypeLoginUrl. The method needs to be called when the user presses the button
func (client *Client) GetLoginUrlInfo(ctx context.Context, req *GetLoginUrlInfoRequest) (LoginUrlInfo, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	switch result.MetaType {
	case ConstructorLoginUrlInfoOpen:
		return UnmarshalLoginUrlInfoOpen(result.Data)

	case ConstructorLoginUrlInfoRequestConfirmation:
		return UnmarshalLoginUrlInfoRequestConfirmation(result.Data)

	default:
		return nil, errors.New("invalid type")
	}
}

type GetLoginUrlRequest struct {
	request
	// Chat identifier of the message with the button
	ChatId int64 `json:"chat_id"`
	// Message identifier of the message with the button
	MessageId int64 `json:"message_id"`
	// Button identifier
	ButtonId int64 `json:"button_id"`
	// Pass true to allow the bot to send messages to the current user
	AllowWriteAccess bool `json:"allow_write_access"`
}

func (req GetLoginUrlRequest) GetFunctionName() string {
	return "getLoginUrl"
}

// Returns an HTTP URL which can be used to automatically authorize the user on a website after clicking an inline button of type inlineKeyboardButtonTypeLoginUrl. Use the method getLoginUrlInfo to find whether a prior user confirmation is needed. If an error is returned, then the button must be handled as an ordinary URL button
func (client *Client) GetLoginUrl(ctx context.Context, req *GetLoginUrlRequest) (*HttpUrl, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalHttpUrl(result.Data)
}

type ShareUsersWithBotRequest struct {
	request
	// Identifier of the chat with the bot
	ChatId int64 `json:"chat_id"`
	// Identifier of the message with the button
	MessageId int64 `json:"message_id"`
	// Identifier of the button
	ButtonId int32 `json:"button_id"`
	// Identifiers of the shared users
	SharedUserIds []int64 `json:"shared_user_ids"`
	// Pass true to check that the users can be shared by the button instead of actually sharing them
	OnlyCheck bool `json:"only_check"`
}

func (req ShareUsersWithBotRequest) GetFunctionName() string {
	return "shareUsersWithBot"
}

// Shares users after pressing a keyboardButtonTypeRequestUsers button with the bot
func (client *Client) ShareUsersWithBot(ctx context.Context, req *ShareUsersWithBotRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ShareChatWithBotRequest struct {
	request
	// Identifier of the chat with the bot
	ChatId int64 `json:"chat_id"`
	// Identifier of the message with the button
	MessageId int64 `json:"message_id"`
	// Identifier of the button
	ButtonId int32 `json:"button_id"`
	// Identifier of the shared chat
	SharedChatId int64 `json:"shared_chat_id"`
	// Pass true to check that the chat can be shared by the button instead of actually sharing it. Doesn't check bot_is_member and bot_administrator_rights restrictions. If the bot must be a member, then all chats from getGroupsInCommon and all chats, where the user can add the bot, are suitable. In the latter case the bot will be automatically added to the chat. If the bot must be an administrator, then all chats, where the bot already has requested rights or can be added to administrators by the user, are suitable. In the latter case the bot will be automatically granted requested rights
	OnlyCheck bool `json:"only_check"`
}

func (req ShareChatWithBotRequest) GetFunctionName() string {
	return "shareChatWithBot"
}

// Shares a chat after pressing a keyboardButtonTypeRequestChat button with the bot
func (client *Client) ShareChatWithBot(ctx context.Context, req *ShareChatWithBotRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetInlineQueryResultsRequest struct {
	request
	// Identifier of the target bot
	BotUserId int64 `json:"bot_user_id"`
	// Identifier of the chat where the query was sent
	ChatId int64 `json:"chat_id"`
	// Location of the user; pass null if unknown or the bot doesn't need user's location
	UserLocation *Location `json:"user_location"`
	// Text of the query
	Query string `json:"query"`
	// Offset of the first entry to return; use empty string to get the first chunk of results
	Offset string `json:"offset"`
}

func (req GetInlineQueryResultsRequest) GetFunctionName() string {
	return "getInlineQueryResults"
}

// Sends an inline query to a bot and returns its results. Returns an error with code 502 if the bot fails to answer the query before the query timeout expires
func (client *Client) GetInlineQueryResults(ctx context.Context, req *GetInlineQueryResultsRequest) (*InlineQueryResults, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalInlineQueryResults(result.Data)
}

type AnswerInlineQueryRequest struct {
	request
	// Identifier of the inline query
	InlineQueryId JsonInt64 `json:"inline_query_id"`
	// Pass true if results may be cached and returned only for the user that sent the query. By default, results may be returned to any user who sends the same query
	IsPersonal bool `json:"is_personal"`
	// Button to be shown above inline query results; pass null if none
	Button *InlineQueryResultsButton `json:"button"`
	// The results of the query
	Results []InputInlineQueryResult `json:"results"`
	// Allowed time to cache the results of the query, in seconds
	CacheTime int32 `json:"cache_time"`
	// Offset for the next inline query; pass an empty string if there are no more results
	NextOffset string `json:"next_offset"`
}

func (req AnswerInlineQueryRequest) GetFunctionName() string {
	return "answerInlineQuery"
}

// Sets the result of an inline query; for bots only
func (client *Client) AnswerInlineQuery(ctx context.Context, req *AnswerInlineQueryRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SavePreparedInlineMessageRequest struct {
	request
	// Identifier of the user
	UserId int64 `json:"user_id"`
	// The description of the message
	Result InputInlineQueryResult `json:"result"`
	// Types of the chats to which the message can be sent
	ChatTypes *TargetChatTypes `json:"chat_types"`
}

func (req SavePreparedInlineMessageRequest) GetFunctionName() string {
	return "savePreparedInlineMessage"
}

// Saves an inline message to be sent by the given user; for bots only
func (client *Client) SavePreparedInlineMessage(ctx context.Context, req *SavePreparedInlineMessageRequest) (*PreparedInlineMessageId, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalPreparedInlineMessageId(result.Data)
}

type GetPreparedInlineMessageRequest struct {
	request
	// Identifier of the bot that created the message
	BotUserId int64 `json:"bot_user_id"`
	// Identifier of the prepared message
	PreparedMessageId string `json:"prepared_message_id"`
}

func (req GetPreparedInlineMessageRequest) GetFunctionName() string {
	return "getPreparedInlineMessage"
}

// Saves an inline message to be sent by the given user
func (client *Client) GetPreparedInlineMessage(ctx context.Context, req *GetPreparedInlineMessageRequest) (*PreparedInlineMessage, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalPreparedInlineMessage(result.Data)
}

type GetGrossingWebAppBotsRequest struct {
	request
	// Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results
	Offset string `json:"offset"`
	// The maximum number of bots to be returned; up to 100
	Limit int32 `json:"limit"`
}

func (req GetGrossingWebAppBotsRequest) GetFunctionName() string {
	return "getGrossingWebAppBots"
}

// Returns the most grossing Web App bots
func (client *Client) GetGrossingWebAppBots(ctx context.Context, req *GetGrossingWebAppBotsRequest) (*FoundUsers, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFoundUsers(result.Data)
}

type SearchWebAppRequest struct {
	request
	// Identifier of the target bot
	BotUserId int64 `json:"bot_user_id"`
	// Short name of the Web App
	WebAppShortName string `json:"web_app_short_name"`
}

func (req SearchWebAppRequest) GetFunctionName() string {
	return "searchWebApp"
}

// Returns information about a Web App by its short name. Returns a 404 error if the Web App is not found
func (client *Client) SearchWebApp(ctx context.Context, req *SearchWebAppRequest) (*FoundWebApp, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFoundWebApp(result.Data)
}

type GetWebAppPlaceholderRequest struct {
	request
	// Identifier of the target bot
	BotUserId int64 `json:"bot_user_id"`
}

func (req GetWebAppPlaceholderRequest) GetFunctionName() string {
	return "getWebAppPlaceholder"
}

// Returns a default placeholder for Web Apps of a bot. This is an offline method. Returns a 404 error if the placeholder isn't known
func (client *Client) GetWebAppPlaceholder(ctx context.Context, req *GetWebAppPlaceholderRequest) (*Outline, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOutline(result.Data)
}

type GetWebAppLinkUrlRequest struct {
	request
	// Identifier of the chat in which the link was clicked; pass 0 if none
	ChatId int64 `json:"chat_id"`
	// Identifier of the target bot
	BotUserId int64 `json:"bot_user_id"`
	// Short name of the Web App
	WebAppShortName string `json:"web_app_short_name"`
	// Start parameter from internalLinkTypeWebApp
	StartParameter string `json:"start_parameter"`
	// Pass true if the current user allowed the bot to send them messages
	AllowWriteAccess bool `json:"allow_write_access"`
	// Parameters to use to open the Web App
	Parameters *WebAppOpenParameters `json:"parameters"`
}

func (req GetWebAppLinkUrlRequest) GetFunctionName() string {
	return "getWebAppLinkUrl"
}

// Returns an HTTPS URL of a Web App to open after a link of the type internalLinkTypeWebApp is clicked
func (client *Client) GetWebAppLinkUrl(ctx context.Context, req *GetWebAppLinkUrlRequest) (*HttpUrl, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalHttpUrl(result.Data)
}

type GetMainWebAppRequest struct {
	request
	// Identifier of the chat in which the Web App is opened; pass 0 if none
	ChatId int64 `json:"chat_id"`
	// Identifier of the target bot. If the bot is restricted for the current user, then show an error instead of calling the method
	BotUserId int64 `json:"bot_user_id"`
	// Start parameter from internalLinkTypeMainWebApp
	StartParameter string `json:"start_parameter"`
	// Parameters to use to open the Web App
	Parameters *WebAppOpenParameters `json:"parameters"`
}

func (req GetMainWebAppRequest) GetFunctionName() string {
	return "getMainWebApp"
}

// Returns information needed to open the main Web App of a bot
func (client *Client) GetMainWebApp(ctx context.Context, req *GetMainWebAppRequest) (*MainWebApp, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMainWebApp(result.Data)
}

type GetWebAppUrlRequest struct {
	request
	// Identifier of the target bot. If the bot is restricted for the current user, then show an error instead of calling the method
	BotUserId int64 `json:"bot_user_id"`
	// The URL from a keyboardButtonTypeWebApp button, inlineQueryResultsButtonTypeWebApp button, or an empty string when the bot is opened from the side menu
	Url string `json:"url"`
	// Parameters to use to open the Web App
	Parameters *WebAppOpenParameters `json:"parameters"`
}

func (req GetWebAppUrlRequest) GetFunctionName() string {
	return "getWebAppUrl"
}

// Returns an HTTPS URL of a Web App to open from the side menu, a keyboardButtonTypeWebApp button, or an inlineQueryResultsButtonTypeWebApp button
func (client *Client) GetWebAppUrl(ctx context.Context, req *GetWebAppUrlRequest) (*HttpUrl, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalHttpUrl(result.Data)
}

type SendWebAppDataRequest struct {
	request
	// Identifier of the target bot
	BotUserId int64 `json:"bot_user_id"`
	// Text of the keyboardButtonTypeWebApp button, which opened the Web App
	ButtonText string `json:"button_text"`
	// The data
	Data string `json:"data"`
}

func (req SendWebAppDataRequest) GetFunctionName() string {
	return "sendWebAppData"
}

// Sends data received from a keyboardButtonTypeWebApp Web App to a bot
func (client *Client) SendWebAppData(ctx context.Context, req *SendWebAppDataRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type OpenWebAppRequest struct {
	request
	// Identifier of the chat in which the Web App is opened. The Web App can't be opened in secret chats
	ChatId int64 `json:"chat_id"`
	// Identifier of the bot, providing the Web App. If the bot is restricted for the current user, then show an error instead of calling the method
	BotUserId int64 `json:"bot_user_id"`
	// The URL from an inlineKeyboardButtonTypeWebApp button, a botMenuButton button, an internalLinkTypeAttachmentMenuBot link, or an empty string otherwise
	Url string `json:"url"`
	// If not 0, the message thread identifier in which the message will be sent
	MessageThreadId int64 `json:"message_thread_id"`
	// Information about the message or story to be replied in the message sent by the Web App; pass null if none
	ReplyTo InputMessageReplyTo `json:"reply_to"`
	// Parameters to use to open the Web App
	Parameters *WebAppOpenParameters `json:"parameters"`
}

func (req OpenWebAppRequest) GetFunctionName() string {
	return "openWebApp"
}

// Informs TDLib that a Web App is being opened from the attachment menu, a botMenuButton button, an internalLinkTypeAttachmentMenuBot link, or an inlineKeyboardButtonTypeWebApp button. For each bot, a confirmation alert about data sent to the bot must be shown once
func (client *Client) OpenWebApp(ctx context.Context, req *OpenWebAppRequest) (*WebAppInfo, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalWebAppInfo(result.Data)
}

type CloseWebAppRequest struct {
	request
	// Identifier of Web App launch, received from openWebApp
	WebAppLaunchId JsonInt64 `json:"web_app_launch_id"`
}

func (req CloseWebAppRequest) GetFunctionName() string {
	return "closeWebApp"
}

// Informs TDLib that a previously opened Web App was closed
func (client *Client) CloseWebApp(ctx context.Context, req *CloseWebAppRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type AnswerWebAppQueryRequest struct {
	request
	// Identifier of the Web App query
	WebAppQueryId string `json:"web_app_query_id"`
	// The result of the query
	Result InputInlineQueryResult `json:"result"`
}

func (req AnswerWebAppQueryRequest) GetFunctionName() string {
	return "answerWebAppQuery"
}

// Sets the result of interaction with a Web App and sends corresponding message on behalf of the user to the chat from which the query originated; for bots only
func (client *Client) AnswerWebAppQuery(ctx context.Context, req *AnswerWebAppQueryRequest) (*SentWebAppMessage, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalSentWebAppMessage(result.Data)
}

type CheckWebAppFileDownloadRequest struct {
	request
	// Identifier of the bot, providing the Web App
	BotUserId int64 `json:"bot_user_id"`
	// Name of the file
	FileName string `json:"file_name"`
	// URL of the file
	Url string `json:"url"`
}

func (req CheckWebAppFileDownloadRequest) GetFunctionName() string {
	return "checkWebAppFileDownload"
}

// Checks whether a file can be downloaded and saved locally by Web App request
func (client *Client) CheckWebAppFileDownload(ctx context.Context, req *CheckWebAppFileDownloadRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetCallbackQueryAnswerRequest struct {
	request
	// Identifier of the chat with the message
	ChatId int64 `json:"chat_id"`
	// Identifier of the message from which the query originated. The message must not be scheduled
	MessageId int64 `json:"message_id"`
	// Query payload
	Payload CallbackQueryPayload `json:"payload"`
}

func (req GetCallbackQueryAnswerRequest) GetFunctionName() string {
	return "getCallbackQueryAnswer"
}

// Sends a callback query to a bot and returns an answer. Returns an error with code 502 if the bot fails to answer the query before the query timeout expires
func (client *Client) GetCallbackQueryAnswer(ctx context.Context, req *GetCallbackQueryAnswerRequest) (*CallbackQueryAnswer, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalCallbackQueryAnswer(result.Data)
}

type AnswerCallbackQueryRequest struct {
	request
	// Identifier of the callback query
	CallbackQueryId JsonInt64 `json:"callback_query_id"`
	// Text of the answer
	Text string `json:"text"`
	// Pass true to show an alert to the user instead of a toast notification
	ShowAlert bool `json:"show_alert"`
	// URL to be opened
	Url string `json:"url"`
	// Time during which the result of the query can be cached, in seconds
	CacheTime int32 `json:"cache_time"`
}

func (req AnswerCallbackQueryRequest) GetFunctionName() string {
	return "answerCallbackQuery"
}

// Sets the result of a callback query; for bots only
func (client *Client) AnswerCallbackQuery(ctx context.Context, req *AnswerCallbackQueryRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type AnswerShippingQueryRequest struct {
	request
	// Identifier of the shipping query
	ShippingQueryId JsonInt64 `json:"shipping_query_id"`
	// Available shipping options
	ShippingOptions []*ShippingOption `json:"shipping_options"`
	// An error message, empty on success
	ErrorMessage string `json:"error_message"`
}

func (req AnswerShippingQueryRequest) GetFunctionName() string {
	return "answerShippingQuery"
}

// Sets the result of a shipping query; for bots only
func (client *Client) AnswerShippingQuery(ctx context.Context, req *AnswerShippingQueryRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type AnswerPreCheckoutQueryRequest struct {
	request
	// Identifier of the pre-checkout query
	PreCheckoutQueryId JsonInt64 `json:"pre_checkout_query_id"`
	// An error message, empty on success
	ErrorMessage string `json:"error_message"`
}

func (req AnswerPreCheckoutQueryRequest) GetFunctionName() string {
	return "answerPreCheckoutQuery"
}

// Sets the result of a pre-checkout query; for bots only
func (client *Client) AnswerPreCheckoutQuery(ctx context.Context, req *AnswerPreCheckoutQueryRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetGameScoreRequest struct {
	request
	// The chat to which the message with the game belongs
	ChatId int64 `json:"chat_id"`
	// Identifier of the message
	MessageId int64 `json:"message_id"`
	// Pass true to edit the game message to include the current scoreboard
	EditMessage bool `json:"edit_message"`
	// User identifier
	UserId int64 `json:"user_id"`
	// The new score
	Score int32 `json:"score"`
	// Pass true to update the score even if it decreases. If the score is 0, the user will be deleted from the high score table
	Force bool `json:"force"`
}

func (req SetGameScoreRequest) GetFunctionName() string {
	return "setGameScore"
}

// Updates the game score of the specified user in the game; for bots only
func (client *Client) SetGameScore(ctx context.Context, req *SetGameScoreRequest) (*Message, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessage(result.Data)
}

type SetInlineGameScoreRequest struct {
	request
	// Inline message identifier
	InlineMessageId string `json:"inline_message_id"`
	// Pass true to edit the game message to include the current scoreboard
	EditMessage bool `json:"edit_message"`
	// User identifier
	UserId int64 `json:"user_id"`
	// The new score
	Score int32 `json:"score"`
	// Pass true to update the score even if it decreases. If the score is 0, the user will be deleted from the high score table
	Force bool `json:"force"`
}

func (req SetInlineGameScoreRequest) GetFunctionName() string {
	return "setInlineGameScore"
}

// Updates the game score of the specified user in a game; for bots only
func (client *Client) SetInlineGameScore(ctx context.Context, req *SetInlineGameScoreRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetGameHighScoresRequest struct {
	request
	// The chat that contains the message with the game
	ChatId int64 `json:"chat_id"`
	// Identifier of the message
	MessageId int64 `json:"message_id"`
	// User identifier
	UserId int64 `json:"user_id"`
}

func (req GetGameHighScoresRequest) GetFunctionName() string {
	return "getGameHighScores"
}

// Returns the high scores for a game and some part of the high score table in the range of the specified user; for bots only
func (client *Client) GetGameHighScores(ctx context.Context, req *GetGameHighScoresRequest) (*GameHighScores, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalGameHighScores(result.Data)
}

type GetInlineGameHighScoresRequest struct {
	request
	// Inline message identifier
	InlineMessageId string `json:"inline_message_id"`
	// User identifier
	UserId int64 `json:"user_id"`
}

func (req GetInlineGameHighScoresRequest) GetFunctionName() string {
	return "getInlineGameHighScores"
}

// Returns game high scores and some part of the high score table in the range of the specified user; for bots only
func (client *Client) GetInlineGameHighScores(ctx context.Context, req *GetInlineGameHighScoresRequest) (*GameHighScores, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalGameHighScores(result.Data)
}

type DeleteChatReplyMarkupRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// The message identifier of the used keyboard
	MessageId int64 `json:"message_id"`
}

func (req DeleteChatReplyMarkupRequest) GetFunctionName() string {
	return "deleteChatReplyMarkup"
}

// Deletes the default reply markup from a chat. Must be called after a one-time keyboard or a replyMarkupForceReply reply markup has been used. An updateChatReplyMarkup update will be sent if the reply markup is changed
func (client *Client) DeleteChatReplyMarkup(ctx context.Context, req *DeleteChatReplyMarkupRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SendChatActionRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// If not 0, the message thread identifier in which the action was performed
	MessageThreadId int64 `json:"message_thread_id"`
	// Unique identifier of business connection on behalf of which to send the request; for bots only
	BusinessConnectionId string `json:"business_connection_id"`
	// The action description; pass null to cancel the currently active action
	Action ChatAction `json:"action"`
}

func (req SendChatActionRequest) GetFunctionName() string {
	return "sendChatAction"
}

// Sends a notification about user activity in a chat
func (client *Client) SendChatAction(ctx context.Context, req *SendChatActionRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type OpenChatRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
}

func (req OpenChatRequest) GetFunctionName() string {
	return "openChat"
}

// Informs TDLib that the chat is opened by the user. Many useful activities depend on the chat being opened or closed (e.g., in supergroups and channels all updates are received only for opened chats)
func (client *Client) OpenChat(ctx context.Context, req *OpenChatRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type CloseChatRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
}

func (req CloseChatRequest) GetFunctionName() string {
	return "closeChat"
}

// Informs TDLib that the chat is closed by the user. Many useful activities depend on the chat being opened or closed
func (client *Client) CloseChat(ctx context.Context, req *CloseChatRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ViewMessagesRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// The identifiers of the messages being viewed
	MessageIds []int64 `json:"message_ids"`
	// Source of the message view; pass null to guess the source based on chat open state
	Source MessageSource `json:"source"`
	// Pass true to mark as read the specified messages even the chat is closed
	ForceRead bool `json:"force_read"`
}

func (req ViewMessagesRequest) GetFunctionName() string {
	return "viewMessages"
}

// Informs TDLib that messages are being viewed by the user. Sponsored messages must be marked as viewed only when the entire text of the message is shown on the screen (excluding the button). Many useful activities depend on whether the messages are currently being viewed or not (e.g., marking messages as read, incrementing a view counter, updating a view counter, removing deleted messages in supergroups and channels)
func (client *Client) ViewMessages(ctx context.Context, req *ViewMessagesRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type OpenMessageContentRequest struct {
	request
	// Chat identifier of the message
	ChatId int64 `json:"chat_id"`
	// Identifier of the message with the opened content
	MessageId int64 `json:"message_id"`
}

func (req OpenMessageContentRequest) GetFunctionName() string {
	return "openMessageContent"
}

// Informs TDLib that the message content has been opened (e.g., the user has opened a photo, video, document, location or venue, or has listened to an audio file or voice note message). An updateMessageContentOpened update will be generated if something has changed
func (client *Client) OpenMessageContent(ctx context.Context, req *OpenMessageContentRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ClickAnimatedEmojiMessageRequest struct {
	request
	// Chat identifier of the message
	ChatId int64 `json:"chat_id"`
	// Identifier of the clicked message
	MessageId int64 `json:"message_id"`
}

func (req ClickAnimatedEmojiMessageRequest) GetFunctionName() string {
	return "clickAnimatedEmojiMessage"
}

// Informs TDLib that a message with an animated emoji was clicked by the user. Returns a big animated sticker to be played or a 404 error if usual animation needs to be played
func (client *Client) ClickAnimatedEmojiMessage(ctx context.Context, req *ClickAnimatedEmojiMessageRequest) (*Sticker, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalSticker(result.Data)
}

type GetInternalLinkRequest struct {
	request
	// Expected type of the link
	Type InternalLinkType `json:"type"`
	// Pass true to create an HTTPS link (only available for some link types); pass false to create a tg: link
	IsHttp bool `json:"is_http"`
}

func (req GetInternalLinkRequest) GetFunctionName() string {
	return "getInternalLink"
}

// Returns an HTTPS or a tg: link with the given type. Can be called before authorization
func (client *Client) GetInternalLink(ctx context.Context, req *GetInternalLinkRequest) (*HttpUrl, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalHttpUrl(result.Data)
}

type GetInternalLinkTypeRequest struct {
	request
	// The link
	Link string `json:"link"`
}

func (req GetInternalLinkTypeRequest) GetFunctionName() string {
	return "getInternalLinkType"
}

// Returns information about the type of internal link. Returns a 404 error if the link is not internal. Can be called before authorization
func (client *Client) GetInternalLinkType(ctx context.Context, req *GetInternalLinkTypeRequest) (InternalLinkType, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	switch result.MetaType {
	case ConstructorInternalLinkTypeActiveSessions:
		return UnmarshalInternalLinkTypeActiveSessions(result.Data)

	case ConstructorInternalLinkTypeAttachmentMenuBot:
		return UnmarshalInternalLinkTypeAttachmentMenuBot(result.Data)

	case ConstructorInternalLinkTypeAuthenticationCode:
		return UnmarshalInternalLinkTypeAuthenticationCode(result.Data)

	case ConstructorInternalLinkTypeBackground:
		return UnmarshalInternalLinkTypeBackground(result.Data)

	case ConstructorInternalLinkTypeBotAddToChannel:
		return UnmarshalInternalLinkTypeBotAddToChannel(result.Data)

	case ConstructorInternalLinkTypeBotStart:
		return UnmarshalInternalLinkTypeBotStart(result.Data)

	case ConstructorInternalLinkTypeBotStartInGroup:
		return UnmarshalInternalLinkTypeBotStartInGroup(result.Data)

	case ConstructorInternalLinkTypeBusinessChat:
		return UnmarshalInternalLinkTypeBusinessChat(result.Data)

	case ConstructorInternalLinkTypeBuyStars:
		return UnmarshalInternalLinkTypeBuyStars(result.Data)

	case ConstructorInternalLinkTypeChangePhoneNumber:
		return UnmarshalInternalLinkTypeChangePhoneNumber(result.Data)

	case ConstructorInternalLinkTypeChatAffiliateProgram:
		return UnmarshalInternalLinkTypeChatAffiliateProgram(result.Data)

	case ConstructorInternalLinkTypeChatBoost:
		return UnmarshalInternalLinkTypeChatBoost(result.Data)

	case ConstructorInternalLinkTypeChatFolderInvite:
		return UnmarshalInternalLinkTypeChatFolderInvite(result.Data)

	case ConstructorInternalLinkTypeChatFolderSettings:
		return UnmarshalInternalLinkTypeChatFolderSettings(result.Data)

	case ConstructorInternalLinkTypeChatInvite:
		return UnmarshalInternalLinkTypeChatInvite(result.Data)

	case ConstructorInternalLinkTypeDefaultMessageAutoDeleteTimerSettings:
		return UnmarshalInternalLinkTypeDefaultMessageAutoDeleteTimerSettings(result.Data)

	case ConstructorInternalLinkTypeEditProfileSettings:
		return UnmarshalInternalLinkTypeEditProfileSettings(result.Data)

	case ConstructorInternalLinkTypeGame:
		return UnmarshalInternalLinkTypeGame(result.Data)

	case ConstructorInternalLinkTypeInstantView:
		return UnmarshalInternalLinkTypeInstantView(result.Data)

	case ConstructorInternalLinkTypeInvoice:
		return UnmarshalInternalLinkTypeInvoice(result.Data)

	case ConstructorInternalLinkTypeLanguagePack:
		return UnmarshalInternalLinkTypeLanguagePack(result.Data)

	case ConstructorInternalLinkTypeLanguageSettings:
		return UnmarshalInternalLinkTypeLanguageSettings(result.Data)

	case ConstructorInternalLinkTypeMainWebApp:
		return UnmarshalInternalLinkTypeMainWebApp(result.Data)

	case ConstructorInternalLinkTypeMessage:
		return UnmarshalInternalLinkTypeMessage(result.Data)

	case ConstructorInternalLinkTypeMessageDraft:
		return UnmarshalInternalLinkTypeMessageDraft(result.Data)

	case ConstructorInternalLinkTypePassportDataRequest:
		return UnmarshalInternalLinkTypePassportDataRequest(result.Data)

	case ConstructorInternalLinkTypePhoneNumberConfirmation:
		return UnmarshalInternalLinkTypePhoneNumberConfirmation(result.Data)

	case ConstructorInternalLinkTypePremiumFeatures:
		return UnmarshalInternalLinkTypePremiumFeatures(result.Data)

	case ConstructorInternalLinkTypePremiumGift:
		return UnmarshalInternalLinkTypePremiumGift(result.Data)

	case ConstructorInternalLinkTypePremiumGiftCode:
		return UnmarshalInternalLinkTypePremiumGiftCode(result.Data)

	case ConstructorInternalLinkTypePrivacyAndSecuritySettings:
		return UnmarshalInternalLinkTypePrivacyAndSecuritySettings(result.Data)

	case ConstructorInternalLinkTypeProxy:
		return UnmarshalInternalLinkTypeProxy(result.Data)

	case ConstructorInternalLinkTypePublicChat:
		return UnmarshalInternalLinkTypePublicChat(result.Data)

	case ConstructorInternalLinkTypeQrCodeAuthentication:
		return UnmarshalInternalLinkTypeQrCodeAuthentication(result.Data)

	case ConstructorInternalLinkTypeRestorePurchases:
		return UnmarshalInternalLinkTypeRestorePurchases(result.Data)

	case ConstructorInternalLinkTypeSettings:
		return UnmarshalInternalLinkTypeSettings(result.Data)

	case ConstructorInternalLinkTypeStickerSet:
		return UnmarshalInternalLinkTypeStickerSet(result.Data)

	case ConstructorInternalLinkTypeStory:
		return UnmarshalInternalLinkTypeStory(result.Data)

	case ConstructorInternalLinkTypeTheme:
		return UnmarshalInternalLinkTypeTheme(result.Data)

	case ConstructorInternalLinkTypeThemeSettings:
		return UnmarshalInternalLinkTypeThemeSettings(result.Data)

	case ConstructorInternalLinkTypeUnknownDeepLink:
		return UnmarshalInternalLinkTypeUnknownDeepLink(result.Data)

	case ConstructorInternalLinkTypeUnsupportedProxy:
		return UnmarshalInternalLinkTypeUnsupportedProxy(result.Data)

	case ConstructorInternalLinkTypeUpgradedGift:
		return UnmarshalInternalLinkTypeUpgradedGift(result.Data)

	case ConstructorInternalLinkTypeUserPhoneNumber:
		return UnmarshalInternalLinkTypeUserPhoneNumber(result.Data)

	case ConstructorInternalLinkTypeUserToken:
		return UnmarshalInternalLinkTypeUserToken(result.Data)

	case ConstructorInternalLinkTypeVideoChat:
		return UnmarshalInternalLinkTypeVideoChat(result.Data)

	case ConstructorInternalLinkTypeWebApp:
		return UnmarshalInternalLinkTypeWebApp(result.Data)

	default:
		return nil, errors.New("invalid type")
	}
}

type GetExternalLinkInfoRequest struct {
	request
	// The link
	Link string `json:"link"`
}

func (req GetExternalLinkInfoRequest) GetFunctionName() string {
	return "getExternalLinkInfo"
}

// Returns information about an action to be done when the current user clicks an external link. Don't use this method for links from secret chats if link preview is disabled in secret chats
func (client *Client) GetExternalLinkInfo(ctx context.Context, req *GetExternalLinkInfoRequest) (LoginUrlInfo, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	switch result.MetaType {
	case ConstructorLoginUrlInfoOpen:
		return UnmarshalLoginUrlInfoOpen(result.Data)

	case ConstructorLoginUrlInfoRequestConfirmation:
		return UnmarshalLoginUrlInfoRequestConfirmation(result.Data)

	default:
		return nil, errors.New("invalid type")
	}
}

type GetExternalLinkRequest struct {
	request
	// The HTTP link
	Link string `json:"link"`
	// Pass true if the current user allowed the bot, returned in getExternalLinkInfo, to send them messages
	AllowWriteAccess bool `json:"allow_write_access"`
}

func (req GetExternalLinkRequest) GetFunctionName() string {
	return "getExternalLink"
}

// Returns an HTTP URL which can be used to automatically authorize the current user on a website after clicking an HTTP link. Use the method getExternalLinkInfo to find whether a prior user confirmation is needed
func (client *Client) GetExternalLink(ctx context.Context, req *GetExternalLinkRequest) (*HttpUrl, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalHttpUrl(result.Data)
}

type ReadAllChatMentionsRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
}

func (req ReadAllChatMentionsRequest) GetFunctionName() string {
	return "readAllChatMentions"
}

// Marks all mentions in a chat as read
func (client *Client) ReadAllChatMentions(ctx context.Context, req *ReadAllChatMentionsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ReadAllMessageThreadMentionsRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Message thread identifier in which mentions are marked as read
	MessageThreadId int64 `json:"message_thread_id"`
}

func (req ReadAllMessageThreadMentionsRequest) GetFunctionName() string {
	return "readAllMessageThreadMentions"
}

// Marks all mentions in a forum topic as read
func (client *Client) ReadAllMessageThreadMentions(ctx context.Context, req *ReadAllMessageThreadMentionsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ReadAllChatReactionsRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
}

func (req ReadAllChatReactionsRequest) GetFunctionName() string {
	return "readAllChatReactions"
}

// Marks all reactions in a chat or a forum topic as read
func (client *Client) ReadAllChatReactions(ctx context.Context, req *ReadAllChatReactionsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ReadAllMessageThreadReactionsRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Message thread identifier in which reactions are marked as read
	MessageThreadId int64 `json:"message_thread_id"`
}

func (req ReadAllMessageThreadReactionsRequest) GetFunctionName() string {
	return "readAllMessageThreadReactions"
}

// Marks all reactions in a forum topic as read
func (client *Client) ReadAllMessageThreadReactions(ctx context.Context, req *ReadAllMessageThreadReactionsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type CreatePrivateChatRequest struct {
	request
	// User identifier
	UserId int64 `json:"user_id"`
	// Pass true to create the chat without a network request. In this case all information about the chat except its type, title and photo can be incorrect
	Force bool `json:"force"`
}

func (req CreatePrivateChatRequest) GetFunctionName() string {
	return "createPrivateChat"
}

// Returns an existing chat corresponding to a given user
func (client *Client) CreatePrivateChat(ctx context.Context, req *CreatePrivateChatRequest) (*Chat, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChat(result.Data)
}

type CreateBasicGroupChatRequest struct {
	request
	// Basic group identifier
	BasicGroupId int64 `json:"basic_group_id"`
	// Pass true to create the chat without a network request. In this case all information about the chat except its type, title and photo can be incorrect
	Force bool `json:"force"`
}

func (req CreateBasicGroupChatRequest) GetFunctionName() string {
	return "createBasicGroupChat"
}

// Returns an existing chat corresponding to a known basic group
func (client *Client) CreateBasicGroupChat(ctx context.Context, req *CreateBasicGroupChatRequest) (*Chat, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChat(result.Data)
}

type CreateSupergroupChatRequest struct {
	request
	// Supergroup or channel identifier
	SupergroupId int64 `json:"supergroup_id"`
	// Pass true to create the chat without a network request. In this case all information about the chat except its type, title and photo can be incorrect
	Force bool `json:"force"`
}

func (req CreateSupergroupChatRequest) GetFunctionName() string {
	return "createSupergroupChat"
}

// Returns an existing chat corresponding to a known supergroup or channel
func (client *Client) CreateSupergroupChat(ctx context.Context, req *CreateSupergroupChatRequest) (*Chat, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChat(result.Data)
}

type CreateSecretChatRequest struct {
	request
	// Secret chat identifier
	SecretChatId int32 `json:"secret_chat_id"`
}

func (req CreateSecretChatRequest) GetFunctionName() string {
	return "createSecretChat"
}

// Returns an existing chat corresponding to a known secret chat
func (client *Client) CreateSecretChat(ctx context.Context, req *CreateSecretChatRequest) (*Chat, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChat(result.Data)
}

type CreateNewBasicGroupChatRequest struct {
	request
	// Identifiers of users to be added to the basic group; may be empty to create a basic group without other members
	UserIds []int64 `json:"user_ids"`
	// Title of the new basic group; 1-128 characters
	Title string `json:"title"`
	// Message auto-delete time value, in seconds; must be from 0 up to 365 * 86400 and be divisible by 86400. If 0, then messages aren't deleted automatically
	MessageAutoDeleteTime int32 `json:"message_auto_delete_time"`
}

func (req CreateNewBasicGroupChatRequest) GetFunctionName() string {
	return "createNewBasicGroupChat"
}

// Creates a new basic group and sends a corresponding messageBasicGroupChatCreate. Returns information about the newly created chat
func (client *Client) CreateNewBasicGroupChat(ctx context.Context, req *CreateNewBasicGroupChatRequest) (*CreatedBasicGroupChat, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalCreatedBasicGroupChat(result.Data)
}

type CreateNewSupergroupChatRequest struct {
	request
	// Title of the new chat; 1-128 characters
	Title string `json:"title"`
	// Pass true to create a forum supergroup chat
	IsForum bool `json:"is_forum"`
	// Pass true to create a channel chat; ignored if a forum is created
	IsChannel bool `json:"is_channel"`
	// Chat description; 0-255 characters
	Description string `json:"description"`
	// Chat location if a location-based supergroup is being created; pass null to create an ordinary supergroup chat
	Location *ChatLocation `json:"location"`
	// Message auto-delete time value, in seconds; must be from 0 up to 365 * 86400 and be divisible by 86400. If 0, then messages aren't deleted automatically
	MessageAutoDeleteTime int32 `json:"message_auto_delete_time"`
	// Pass true to create a supergroup for importing messages using importMessages
	ForImport bool `json:"for_import"`
}

func (req CreateNewSupergroupChatRequest) GetFunctionName() string {
	return "createNewSupergroupChat"
}

// Creates a new supergroup or channel and sends a corresponding messageSupergroupChatCreate. Returns the newly created chat
func (client *Client) CreateNewSupergroupChat(ctx context.Context, req *CreateNewSupergroupChatRequest) (*Chat, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChat(result.Data)
}

type CreateNewSecretChatRequest struct {
	request
	// Identifier of the target user
	UserId int64 `json:"user_id"`
}

func (req CreateNewSecretChatRequest) GetFunctionName() string {
	return "createNewSecretChat"
}

// Creates a new secret chat. Returns the newly created chat
func (client *Client) CreateNewSecretChat(ctx context.Context, req *CreateNewSecretChatRequest) (*Chat, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChat(result.Data)
}

type UpgradeBasicGroupChatToSupergroupChatRequest struct {
	request
	// Identifier of the chat to upgrade
	ChatId int64 `json:"chat_id"`
}

func (req UpgradeBasicGroupChatToSupergroupChatRequest) GetFunctionName() string {
	return "upgradeBasicGroupChatToSupergroupChat"
}

// Creates a new supergroup from an existing basic group and sends a corresponding messageChatUpgradeTo and messageChatUpgradeFrom; requires owner privileges. Deactivates the original basic group
func (client *Client) UpgradeBasicGroupChatToSupergroupChat(ctx context.Context, req *UpgradeBasicGroupChatToSupergroupChatRequest) (*Chat, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChat(result.Data)
}

type GetChatListsToAddChatRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
}

func (req GetChatListsToAddChatRequest) GetFunctionName() string {
	return "getChatListsToAddChat"
}

// Returns chat lists to which the chat can be added. This is an offline method
func (client *Client) GetChatListsToAddChat(ctx context.Context, req *GetChatListsToAddChatRequest) (*ChatLists, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatLists(result.Data)
}

type AddChatToListRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// The chat list. Use getChatListsToAddChat to get suitable chat lists
	ChatList ChatList `json:"chat_list"`
}

func (req AddChatToListRequest) GetFunctionName() string {
	return "addChatToList"
}

// Adds a chat to a chat list. A chat can't be simultaneously in Main and Archive chat lists, so it is automatically removed from another one if needed
func (client *Client) AddChatToList(ctx context.Context, req *AddChatToListRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetChatFolderRequest struct {
	request
	// Chat folder identifier
	ChatFolderId int32 `json:"chat_folder_id"`
}

func (req GetChatFolderRequest) GetFunctionName() string {
	return "getChatFolder"
}

// Returns information about a chat folder by its identifier
func (client *Client) GetChatFolder(ctx context.Context, req *GetChatFolderRequest) (*ChatFolder, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatFolder(result.Data)
}

type CreateChatFolderRequest struct {
	request
	// The new chat folder
	Folder *ChatFolder `json:"folder"`
}

func (req CreateChatFolderRequest) GetFunctionName() string {
	return "createChatFolder"
}

// Creates new chat folder. Returns information about the created chat folder. There can be up to getOption("chat_folder_count_max") chat folders, but the limit can be increased with Telegram Premium
func (client *Client) CreateChatFolder(ctx context.Context, req *CreateChatFolderRequest) (*ChatFolderInfo, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatFolderInfo(result.Data)
}

type EditChatFolderRequest struct {
	request
	// Chat folder identifier
	ChatFolderId int32 `json:"chat_folder_id"`
	// The edited chat folder
	Folder *ChatFolder `json:"folder"`
}

func (req EditChatFolderRequest) GetFunctionName() string {
	return "editChatFolder"
}

// Edits existing chat folder. Returns information about the edited chat folder
func (client *Client) EditChatFolder(ctx context.Context, req *EditChatFolderRequest) (*ChatFolderInfo, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatFolderInfo(result.Data)
}

type DeleteChatFolderRequest struct {
	request
	// Chat folder identifier
	ChatFolderId int32 `json:"chat_folder_id"`
	// Identifiers of the chats to leave. The chats must be pinned or always included in the folder
	LeaveChatIds []int64 `json:"leave_chat_ids"`
}

func (req DeleteChatFolderRequest) GetFunctionName() string {
	return "deleteChatFolder"
}

// Deletes existing chat folder
func (client *Client) DeleteChatFolder(ctx context.Context, req *DeleteChatFolderRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetChatFolderChatsToLeaveRequest struct {
	request
	// Chat folder identifier
	ChatFolderId int32 `json:"chat_folder_id"`
}

func (req GetChatFolderChatsToLeaveRequest) GetFunctionName() string {
	return "getChatFolderChatsToLeave"
}

// Returns identifiers of pinned or always included chats from a chat folder, which are suggested to be left when the chat folder is deleted
func (client *Client) GetChatFolderChatsToLeave(ctx context.Context, req *GetChatFolderChatsToLeaveRequest) (*Chats, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChats(result.Data)
}

type GetChatFolderChatCountRequest struct {
	request
	// The new chat folder
	Folder *ChatFolder `json:"folder"`
}

func (req GetChatFolderChatCountRequest) GetFunctionName() string {
	return "getChatFolderChatCount"
}

// Returns approximate number of chats in a being created chat folder. Main and archive chat lists must be fully preloaded for this function to work correctly
func (client *Client) GetChatFolderChatCount(ctx context.Context, req *GetChatFolderChatCountRequest) (*Count, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalCount(result.Data)
}

type ReorderChatFoldersRequest struct {
	request
	// Identifiers of chat folders in the new correct order
	ChatFolderIds []int32 `json:"chat_folder_ids"`
	// Position of the main chat list among chat folders, 0-based. Can be non-zero only for Premium users
	MainChatListPosition int32 `json:"main_chat_list_position"`
}

func (req ReorderChatFoldersRequest) GetFunctionName() string {
	return "reorderChatFolders"
}

// Changes the order of chat folders
func (client *Client) ReorderChatFolders(ctx context.Context, req *ReorderChatFoldersRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleChatFolderTagsRequest struct {
	request
	// Pass true to enable folder tags; pass false to disable them
	AreTagsEnabled bool `json:"are_tags_enabled"`
}

func (req ToggleChatFolderTagsRequest) GetFunctionName() string {
	return "toggleChatFolderTags"
}

// Toggles whether chat folder tags are enabled
func (client *Client) ToggleChatFolderTags(ctx context.Context, req *ToggleChatFolderTagsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetRecommendedChatFoldersRequest struct {
	request
}

func (req GetRecommendedChatFoldersRequest) GetFunctionName() string {
	return "getRecommendedChatFolders"
}

// Returns recommended chat folders for the current user
func (client *Client) GetRecommendedChatFolders(ctx context.Context) (*RecommendedChatFolders, error) {
	req := &GetRecommendedChatFoldersRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalRecommendedChatFolders(result.Data)
}

type GetChatFolderDefaultIconNameRequest struct {
	request
	// Chat folder
	Folder *ChatFolder `json:"folder"`
}

func (req GetChatFolderDefaultIconNameRequest) GetFunctionName() string {
	return "getChatFolderDefaultIconName"
}

// Returns default icon name for a folder. Can be called synchronously
func GetChatFolderDefaultIconName(req *GetChatFolderDefaultIconNameRequest) (*ChatFolderIcon, error) {
	result, err := Execute(req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatFolderIcon(result.Data)
}

// deprecated
// Returns default icon name for a folder. Can be called synchronously
func (client *Client) GetChatFolderDefaultIconName(req *GetChatFolderDefaultIconNameRequest) (*ChatFolderIcon, error) {
	return GetChatFolderDefaultIconName(req)
}

type GetChatsForChatFolderInviteLinkRequest struct {
	request
	// Chat folder identifier
	ChatFolderId int32 `json:"chat_folder_id"`
}

func (req GetChatsForChatFolderInviteLinkRequest) GetFunctionName() string {
	return "getChatsForChatFolderInviteLink"
}

// Returns identifiers of chats from a chat folder, suitable for adding to a chat folder invite link
func (client *Client) GetChatsForChatFolderInviteLink(ctx context.Context, req *GetChatsForChatFolderInviteLinkRequest) (*Chats, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChats(result.Data)
}

type CreateChatFolderInviteLinkRequest struct {
	request
	// Chat folder identifier
	ChatFolderId int32 `json:"chat_folder_id"`
	// Name of the link; 0-32 characters
	Name string `json:"name"`
	// Identifiers of chats to be accessible by the invite link. Use getChatsForChatFolderInviteLink to get suitable chats. Basic groups will be automatically converted to supergroups before link creation
	ChatIds []int64 `json:"chat_ids"`
}

func (req CreateChatFolderInviteLinkRequest) GetFunctionName() string {
	return "createChatFolderInviteLink"
}

// Creates a new invite link for a chat folder. A link can be created for a chat folder if it has only pinned and included chats
func (client *Client) CreateChatFolderInviteLink(ctx context.Context, req *CreateChatFolderInviteLinkRequest) (*ChatFolderInviteLink, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatFolderInviteLink(result.Data)
}

type GetChatFolderInviteLinksRequest struct {
	request
	// Chat folder identifier
	ChatFolderId int32 `json:"chat_folder_id"`
}

func (req GetChatFolderInviteLinksRequest) GetFunctionName() string {
	return "getChatFolderInviteLinks"
}

// Returns invite links created by the current user for a shareable chat folder
func (client *Client) GetChatFolderInviteLinks(ctx context.Context, req *GetChatFolderInviteLinksRequest) (*ChatFolderInviteLinks, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatFolderInviteLinks(result.Data)
}

type EditChatFolderInviteLinkRequest struct {
	request
	// Chat folder identifier
	ChatFolderId int32 `json:"chat_folder_id"`
	// Invite link to be edited
	InviteLink string `json:"invite_link"`
	// New name of the link; 0-32 characters
	Name string `json:"name"`
	// New identifiers of chats to be accessible by the invite link. Use getChatsForChatFolderInviteLink to get suitable chats. Basic groups will be automatically converted to supergroups before link editing
	ChatIds []int64 `json:"chat_ids"`
}

func (req EditChatFolderInviteLinkRequest) GetFunctionName() string {
	return "editChatFolderInviteLink"
}

// Edits an invite link for a chat folder
func (client *Client) EditChatFolderInviteLink(ctx context.Context, req *EditChatFolderInviteLinkRequest) (*ChatFolderInviteLink, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatFolderInviteLink(result.Data)
}

type DeleteChatFolderInviteLinkRequest struct {
	request
	// Chat folder identifier
	ChatFolderId int32 `json:"chat_folder_id"`
	// Invite link to be deleted
	InviteLink string `json:"invite_link"`
}

func (req DeleteChatFolderInviteLinkRequest) GetFunctionName() string {
	return "deleteChatFolderInviteLink"
}

// Deletes an invite link for a chat folder
func (client *Client) DeleteChatFolderInviteLink(ctx context.Context, req *DeleteChatFolderInviteLinkRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type CheckChatFolderInviteLinkRequest struct {
	request
	// Invite link to be checked
	InviteLink string `json:"invite_link"`
}

func (req CheckChatFolderInviteLinkRequest) GetFunctionName() string {
	return "checkChatFolderInviteLink"
}

// Checks the validity of an invite link for a chat folder and returns information about the corresponding chat folder
func (client *Client) CheckChatFolderInviteLink(ctx context.Context, req *CheckChatFolderInviteLinkRequest) (*ChatFolderInviteLinkInfo, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatFolderInviteLinkInfo(result.Data)
}

type AddChatFolderByInviteLinkRequest struct {
	request
	// Invite link for the chat folder
	InviteLink string `json:"invite_link"`
	// Identifiers of the chats added to the chat folder. The chats are automatically joined if they aren't joined yet
	ChatIds []int64 `json:"chat_ids"`
}

func (req AddChatFolderByInviteLinkRequest) GetFunctionName() string {
	return "addChatFolderByInviteLink"
}

// Adds a chat folder by an invite link
func (client *Client) AddChatFolderByInviteLink(ctx context.Context, req *AddChatFolderByInviteLinkRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetChatFolderNewChatsRequest struct {
	request
	// Chat folder identifier
	ChatFolderId int32 `json:"chat_folder_id"`
}

func (req GetChatFolderNewChatsRequest) GetFunctionName() string {
	return "getChatFolderNewChats"
}

// Returns new chats added to a shareable chat folder by its owner. The method must be called at most once in getOption("chat_folder_new_chats_update_period") for the given chat folder
func (client *Client) GetChatFolderNewChats(ctx context.Context, req *GetChatFolderNewChatsRequest) (*Chats, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChats(result.Data)
}

type ProcessChatFolderNewChatsRequest struct {
	request
	// Chat folder identifier
	ChatFolderId int32 `json:"chat_folder_id"`
	// Identifiers of the new chats, which are added to the chat folder. The chats are automatically joined if they aren't joined yet
	AddedChatIds []int64 `json:"added_chat_ids"`
}

func (req ProcessChatFolderNewChatsRequest) GetFunctionName() string {
	return "processChatFolderNewChats"
}

// Process new chats added to a shareable chat folder by its owner
func (client *Client) ProcessChatFolderNewChats(ctx context.Context, req *ProcessChatFolderNewChatsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetArchiveChatListSettingsRequest struct {
	request
}

func (req GetArchiveChatListSettingsRequest) GetFunctionName() string {
	return "getArchiveChatListSettings"
}

// Returns settings for automatic moving of chats to and from the Archive chat lists
func (client *Client) GetArchiveChatListSettings(ctx context.Context) (*ArchiveChatListSettings, error) {
	req := &GetArchiveChatListSettingsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalArchiveChatListSettings(result.Data)
}

type SetArchiveChatListSettingsRequest struct {
	request
	// New settings
	Settings *ArchiveChatListSettings `json:"settings"`
}

func (req SetArchiveChatListSettingsRequest) GetFunctionName() string {
	return "setArchiveChatListSettings"
}

// Changes settings for automatic moving of chats to and from the Archive chat lists
func (client *Client) SetArchiveChatListSettings(ctx context.Context, req *SetArchiveChatListSettingsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetChatTitleRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// New title of the chat; 1-128 characters
	Title string `json:"title"`
}

func (req SetChatTitleRequest) GetFunctionName() string {
	return "setChatTitle"
}

// Changes the chat title. Supported only for basic groups, supergroups and channels. Requires can_change_info member right
func (client *Client) SetChatTitle(ctx context.Context, req *SetChatTitleRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetChatPhotoRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// New chat photo; pass null to delete the chat photo
	Photo InputChatPhoto `json:"photo"`
}

func (req SetChatPhotoRequest) GetFunctionName() string {
	return "setChatPhoto"
}

// Changes the photo of a chat. Supported only for basic groups, supergroups and channels. Requires can_change_info member right
func (client *Client) SetChatPhoto(ctx context.Context, req *SetChatPhotoRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetChatAccentColorRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Identifier of the accent color to use. The chat must have at least accentColor.min_channel_chat_boost_level boost level to pass the corresponding color
	AccentColorId int32 `json:"accent_color_id"`
	// Identifier of a custom emoji to be shown on the reply header and link preview background; 0 if none. Use chatBoostLevelFeatures.can_set_background_custom_emoji to check whether a custom emoji can be set
	BackgroundCustomEmojiId JsonInt64 `json:"background_custom_emoji_id"`
}

func (req SetChatAccentColorRequest) GetFunctionName() string {
	return "setChatAccentColor"
}

// Changes accent color and background custom emoji of a channel chat. Requires can_change_info administrator right
func (client *Client) SetChatAccentColor(ctx context.Context, req *SetChatAccentColorRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetChatProfileAccentColorRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Identifier of the accent color to use for profile; pass -1 if none. The chat must have at least profileAccentColor.min_supergroup_chat_boost_level for supergroups or profileAccentColor.min_channel_chat_boost_level for channels boost level to pass the corresponding color
	ProfileAccentColorId int32 `json:"profile_accent_color_id"`
	// Identifier of a custom emoji to be shown on the chat's profile photo background; 0 if none. Use chatBoostLevelFeatures.can_set_profile_background_custom_emoji to check whether a custom emoji can be set
	ProfileBackgroundCustomEmojiId JsonInt64 `json:"profile_background_custom_emoji_id"`
}

func (req SetChatProfileAccentColorRequest) GetFunctionName() string {
	return "setChatProfileAccentColor"
}

// Changes accent color and background custom emoji for profile of a supergroup or channel chat. Requires can_change_info administrator right
func (client *Client) SetChatProfileAccentColor(ctx context.Context, req *SetChatProfileAccentColorRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetChatMessageAutoDeleteTimeRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// New time value, in seconds; unless the chat is secret, it must be from 0 up to 365 * 86400 and be divisible by 86400. If 0, then messages aren't deleted automatically
	MessageAutoDeleteTime int32 `json:"message_auto_delete_time"`
}

func (req SetChatMessageAutoDeleteTimeRequest) GetFunctionName() string {
	return "setChatMessageAutoDeleteTime"
}

// Changes the message auto-delete or self-destruct (for secret chats) time in a chat. Requires change_info administrator right in basic groups, supergroups and channels. Message auto-delete time can't be changed in a chat with the current user (Saved Messages) and the chat 777000 (Telegram).
func (client *Client) SetChatMessageAutoDeleteTime(ctx context.Context, req *SetChatMessageAutoDeleteTimeRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetChatEmojiStatusRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// New emoji status; pass null to remove emoji status
	EmojiStatus *EmojiStatus `json:"emoji_status"`
}

func (req SetChatEmojiStatusRequest) GetFunctionName() string {
	return "setChatEmojiStatus"
}

// Changes the emoji status of a chat. Use chatBoostLevelFeatures.can_set_emoji_status to check whether an emoji status can be set. Requires can_change_info administrator right
func (client *Client) SetChatEmojiStatus(ctx context.Context, req *SetChatEmojiStatusRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetChatPermissionsRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// New non-administrator members permissions in the chat
	Permissions *ChatPermissions `json:"permissions"`
}

func (req SetChatPermissionsRequest) GetFunctionName() string {
	return "setChatPermissions"
}

// Changes the chat members permissions. Supported only for basic groups and supergroups. Requires can_restrict_members administrator right
func (client *Client) SetChatPermissions(ctx context.Context, req *SetChatPermissionsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetChatBackgroundRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// The input background to use; pass null to create a new filled or chat theme background
	Background InputBackground `json:"background"`
	// Background type; pass null to use default background type for the chosen background; backgroundTypeChatTheme isn't supported for private and secret chats. Use chatBoostLevelFeatures.chat_theme_background_count and chatBoostLevelFeatures.can_set_custom_background to check whether the background type can be set in the boosted chat
	Type BackgroundType `json:"type"`
	// Dimming of the background in dark themes, as a percentage; 0-100. Applied only to Wallpaper and Fill types of background
	DarkThemeDimming int32 `json:"dark_theme_dimming"`
	// Pass true to set background only for self; pass false to set background for all chat users. Always false for backgrounds set in boosted chats. Background can be set for both users only by Telegram Premium users and if set background isn't of the type inputBackgroundPrevious
	OnlyForSelf bool `json:"only_for_self"`
}

func (req SetChatBackgroundRequest) GetFunctionName() string {
	return "setChatBackground"
}

// Sets the background in a specific chat. Supported only in private and secret chats with non-deleted users, and in chats with sufficient boost level and can_change_info administrator right
func (client *Client) SetChatBackground(ctx context.Context, req *SetChatBackgroundRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type DeleteChatBackgroundRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Pass true to restore previously set background. Can be used only in private and secret chats with non-deleted users if userFullInfo.set_chat_background == true. Supposed to be used from messageChatSetBackground messages with the currently set background that was set for both sides by the other user
	RestorePrevious bool `json:"restore_previous"`
}

func (req DeleteChatBackgroundRequest) GetFunctionName() string {
	return "deleteChatBackground"
}

// Deletes background in a specific chat
func (client *Client) DeleteChatBackground(ctx context.Context, req *DeleteChatBackgroundRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetChatThemeRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Name of the new chat theme; pass an empty string to return the default theme
	ThemeName string `json:"theme_name"`
}

func (req SetChatThemeRequest) GetFunctionName() string {
	return "setChatTheme"
}

// Changes the chat theme. Supported only in private and secret chats
func (client *Client) SetChatTheme(ctx context.Context, req *SetChatThemeRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetChatDraftMessageRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// If not 0, the message thread identifier in which the draft was changed
	MessageThreadId int64 `json:"message_thread_id"`
	// New draft message; pass null to remove the draft. All files in draft message content must be of the type inputFileLocal. Media thumbnails and captions are ignored
	DraftMessage *DraftMessage `json:"draft_message"`
}

func (req SetChatDraftMessageRequest) GetFunctionName() string {
	return "setChatDraftMessage"
}

// Changes the draft message in a chat
func (client *Client) SetChatDraftMessage(ctx context.Context, req *SetChatDraftMessageRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetChatNotificationSettingsRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// New notification settings for the chat. If the chat is muted for more than 366 days, it is considered to be muted forever
	NotificationSettings *ChatNotificationSettings `json:"notification_settings"`
}

func (req SetChatNotificationSettingsRequest) GetFunctionName() string {
	return "setChatNotificationSettings"
}

// Changes the notification settings of a chat. Notification settings of a chat with the current user (Saved Messages) can't be changed
func (client *Client) SetChatNotificationSettings(ctx context.Context, req *SetChatNotificationSettingsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleChatHasProtectedContentRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// New value of has_protected_content
	HasProtectedContent bool `json:"has_protected_content"`
}

func (req ToggleChatHasProtectedContentRequest) GetFunctionName() string {
	return "toggleChatHasProtectedContent"
}

// Changes the ability of users to save, forward, or copy chat content. Supported only for basic groups, supergroups and channels. Requires owner privileges
func (client *Client) ToggleChatHasProtectedContent(ctx context.Context, req *ToggleChatHasProtectedContentRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleChatViewAsTopicsRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// New value of view_as_topics
	ViewAsTopics bool `json:"view_as_topics"`
}

func (req ToggleChatViewAsTopicsRequest) GetFunctionName() string {
	return "toggleChatViewAsTopics"
}

// Changes the view_as_topics setting of a forum chat or Saved Messages
func (client *Client) ToggleChatViewAsTopics(ctx context.Context, req *ToggleChatViewAsTopicsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleChatIsTranslatableRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// New value of is_translatable
	IsTranslatable bool `json:"is_translatable"`
}

func (req ToggleChatIsTranslatableRequest) GetFunctionName() string {
	return "toggleChatIsTranslatable"
}

// Changes the translatable state of a chat
func (client *Client) ToggleChatIsTranslatable(ctx context.Context, req *ToggleChatIsTranslatableRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleChatIsMarkedAsUnreadRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// New value of is_marked_as_unread
	IsMarkedAsUnread bool `json:"is_marked_as_unread"`
}

func (req ToggleChatIsMarkedAsUnreadRequest) GetFunctionName() string {
	return "toggleChatIsMarkedAsUnread"
}

// Changes the marked as unread state of a chat
func (client *Client) ToggleChatIsMarkedAsUnread(ctx context.Context, req *ToggleChatIsMarkedAsUnreadRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleChatDefaultDisableNotificationRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// New value of default_disable_notification
	DefaultDisableNotification bool `json:"default_disable_notification"`
}

func (req ToggleChatDefaultDisableNotificationRequest) GetFunctionName() string {
	return "toggleChatDefaultDisableNotification"
}

// Changes the value of the default disable_notification parameter, used when a message is sent to a chat
func (client *Client) ToggleChatDefaultDisableNotification(ctx context.Context, req *ToggleChatDefaultDisableNotificationRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetChatAvailableReactionsRequest struct {
	request
	// Identifier of the chat
	ChatId int64 `json:"chat_id"`
	// Reactions available in the chat. All explicitly specified emoji reactions must be active. In channel chats up to the chat's boost level custom emoji reactions can be explicitly specified
	AvailableReactions ChatAvailableReactions `json:"available_reactions"`
}

func (req SetChatAvailableReactionsRequest) GetFunctionName() string {
	return "setChatAvailableReactions"
}

// Changes reactions, available in a chat. Available for basic groups, supergroups, and channels. Requires can_change_info member right
func (client *Client) SetChatAvailableReactions(ctx context.Context, req *SetChatAvailableReactionsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetChatClientDataRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// New value of client_data
	ClientData string `json:"client_data"`
}

func (req SetChatClientDataRequest) GetFunctionName() string {
	return "setChatClientData"
}

// Changes application-specific data associated with a chat
func (client *Client) SetChatClientData(ctx context.Context, req *SetChatClientDataRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetChatDescriptionRequest struct {
	request
	// Identifier of the chat
	ChatId int64 `json:"chat_id"`
	// New chat description; 0-255 characters
	Description string `json:"description"`
}

func (req SetChatDescriptionRequest) GetFunctionName() string {
	return "setChatDescription"
}

// Changes information about a chat. Available for basic groups, supergroups, and channels. Requires can_change_info member right
func (client *Client) SetChatDescription(ctx context.Context, req *SetChatDescriptionRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetChatDiscussionGroupRequest struct {
	request
	// Identifier of the channel chat. Pass 0 to remove a link from the supergroup passed in the second argument to a linked channel chat (requires can_pin_messages member right in the supergroup)
	ChatId int64 `json:"chat_id"`
	// Identifier of a new channel's discussion group. Use 0 to remove the discussion group. Use the method getSuitableDiscussionChats to find all suitable groups. Basic group chats must be first upgraded to supergroup chats. If new chat members don't have access to old messages in the supergroup, then toggleSupergroupIsAllHistoryAvailable must be used first to change that
	DiscussionChatId int64 `json:"discussion_chat_id"`
}

func (req SetChatDiscussionGroupRequest) GetFunctionName() string {
	return "setChatDiscussionGroup"
}

// Changes the discussion group of a channel chat; requires can_change_info administrator right in the channel if it is specified
func (client *Client) SetChatDiscussionGroup(ctx context.Context, req *SetChatDiscussionGroupRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetChatLocationRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// New location for the chat; must be valid and not null
	Location *ChatLocation `json:"location"`
}

func (req SetChatLocationRequest) GetFunctionName() string {
	return "setChatLocation"
}

// Changes the location of a chat. Available only for some location-based supergroups, use supergroupFullInfo.can_set_location to check whether the method is allowed to use
func (client *Client) SetChatLocation(ctx context.Context, req *SetChatLocationRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetChatSlowModeDelayRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// New slow mode delay for the chat, in seconds; must be one of 0, 10, 30, 60, 300, 900, 3600
	SlowModeDelay int32 `json:"slow_mode_delay"`
}

func (req SetChatSlowModeDelayRequest) GetFunctionName() string {
	return "setChatSlowModeDelay"
}

// Changes the slow mode delay of a chat. Available only for supergroups; requires can_restrict_members right
func (client *Client) SetChatSlowModeDelay(ctx context.Context, req *SetChatSlowModeDelayRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type PinChatMessageRequest struct {
	request
	// Identifier of the chat
	ChatId int64 `json:"chat_id"`
	// Identifier of the new pinned message
	MessageId int64 `json:"message_id"`
	// Pass true to disable notification about the pinned message. Notifications are always disabled in channels and private chats
	DisableNotification bool `json:"disable_notification"`
	// Pass true to pin the message only for self; private chats only
	OnlyForSelf bool `json:"only_for_self"`
}

func (req PinChatMessageRequest) GetFunctionName() string {
	return "pinChatMessage"
}

// Pins a message in a chat. A message can be pinned only if messageProperties.can_be_pinned
func (client *Client) PinChatMessage(ctx context.Context, req *PinChatMessageRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type UnpinChatMessageRequest struct {
	request
	// Identifier of the chat
	ChatId int64 `json:"chat_id"`
	// Identifier of the removed pinned message
	MessageId int64 `json:"message_id"`
}

func (req UnpinChatMessageRequest) GetFunctionName() string {
	return "unpinChatMessage"
}

// Removes a pinned message from a chat; requires can_pin_messages member right if the chat is a basic group or supergroup, or can_edit_messages administrator right if the chat is a channel
func (client *Client) UnpinChatMessage(ctx context.Context, req *UnpinChatMessageRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type UnpinAllChatMessagesRequest struct {
	request
	// Identifier of the chat
	ChatId int64 `json:"chat_id"`
}

func (req UnpinAllChatMessagesRequest) GetFunctionName() string {
	return "unpinAllChatMessages"
}

// Removes all pinned messages from a chat; requires can_pin_messages member right if the chat is a basic group or supergroup, or can_edit_messages administrator right if the chat is a channel
func (client *Client) UnpinAllChatMessages(ctx context.Context, req *UnpinAllChatMessagesRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type UnpinAllMessageThreadMessagesRequest struct {
	request
	// Identifier of the chat
	ChatId int64 `json:"chat_id"`
	// Message thread identifier in which messages will be unpinned
	MessageThreadId int64 `json:"message_thread_id"`
}

func (req UnpinAllMessageThreadMessagesRequest) GetFunctionName() string {
	return "unpinAllMessageThreadMessages"
}

// Removes all pinned messages from a forum topic; requires can_pin_messages member right in the supergroup
func (client *Client) UnpinAllMessageThreadMessages(ctx context.Context, req *UnpinAllMessageThreadMessagesRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type JoinChatRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
}

func (req JoinChatRequest) GetFunctionName() string {
	return "joinChat"
}

// Adds the current user as a new member to a chat. Private and secret chats can't be joined using this method. May return an error with a message "INVITE_REQUEST_SENT" if only a join request was created
func (client *Client) JoinChat(ctx context.Context, req *JoinChatRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type LeaveChatRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
}

func (req LeaveChatRequest) GetFunctionName() string {
	return "leaveChat"
}

// Removes the current user from chat members. Private and secret chats can't be left using this method
func (client *Client) LeaveChat(ctx context.Context, req *LeaveChatRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type AddChatMemberRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Identifier of the user
	UserId int64 `json:"user_id"`
	// The number of earlier messages from the chat to be forwarded to the new member; up to 100. Ignored for supergroups and channels, or if the added user is a bot
	ForwardLimit int32 `json:"forward_limit"`
}

func (req AddChatMemberRequest) GetFunctionName() string {
	return "addChatMember"
}

// Adds a new member to a chat; requires can_invite_users member right. Members can't be added to private or secret chats. Returns information about members that weren't added
func (client *Client) AddChatMember(ctx context.Context, req *AddChatMemberRequest) (*FailedToAddMembers, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFailedToAddMembers(result.Data)
}

type AddChatMembersRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Identifiers of the users to be added to the chat. The maximum number of added users is 20 for supergroups and 100 for channels
	UserIds []int64 `json:"user_ids"`
}

func (req AddChatMembersRequest) GetFunctionName() string {
	return "addChatMembers"
}

// Adds multiple new members to a chat; requires can_invite_users member right. Currently, this method is only available for supergroups and channels. This method can't be used to join a chat. Members can't be added to a channel if it has more than 200 members. Returns information about members that weren't added
func (client *Client) AddChatMembers(ctx context.Context, req *AddChatMembersRequest) (*FailedToAddMembers, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFailedToAddMembers(result.Data)
}

type SetChatMemberStatusRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Member identifier. Chats can be only banned and unbanned in supergroups and channels
	MemberId MessageSender `json:"member_id"`
	// The new status of the member in the chat
	Status ChatMemberStatus `json:"status"`
}

func (req SetChatMemberStatusRequest) GetFunctionName() string {
	return "setChatMemberStatus"
}

// Changes the status of a chat member; requires can_invite_users member right to add a chat member, can_promote_members administrator right to change administrator rights of the member, and can_restrict_members administrator right to change restrictions of a user. This function is currently not suitable for transferring chat ownership; use transferChatOwnership instead. Use addChatMember or banChatMember if some additional parameters needs to be passed
func (client *Client) SetChatMemberStatus(ctx context.Context, req *SetChatMemberStatusRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type BanChatMemberRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Member identifier
	MemberId MessageSender `json:"member_id"`
	// Point in time (Unix timestamp) when the user will be unbanned; 0 if never. If the user is banned for more than 366 days or for less than 30 seconds from the current time, the user is considered to be banned forever. Ignored in basic groups and if a chat is banned
	BannedUntilDate int32 `json:"banned_until_date"`
	// Pass true to delete all messages in the chat for the user that is being removed. Always true for supergroups and channels
	RevokeMessages bool `json:"revoke_messages"`
}

func (req BanChatMemberRequest) GetFunctionName() string {
	return "banChatMember"
}

// Bans a member in a chat; requires can_restrict_members administrator right. Members can't be banned in private or secret chats. In supergroups and channels, the user will not be able to return to the group on their own using invite links, etc., unless unbanned first
func (client *Client) BanChatMember(ctx context.Context, req *BanChatMemberRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type CanTransferOwnershipRequest struct {
	request
}

func (req CanTransferOwnershipRequest) GetFunctionName() string {
	return "canTransferOwnership"
}

// Checks whether the current session can be used to transfer a chat ownership to another user
func (client *Client) CanTransferOwnership(ctx context.Context) (CanTransferOwnershipResult, error) {
	req := &CanTransferOwnershipRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	switch result.MetaType {
	case ConstructorCanTransferOwnershipResultOk:
		return UnmarshalCanTransferOwnershipResultOk(result.Data)

	case ConstructorCanTransferOwnershipResultPasswordNeeded:
		return UnmarshalCanTransferOwnershipResultPasswordNeeded(result.Data)

	case ConstructorCanTransferOwnershipResultPasswordTooFresh:
		return UnmarshalCanTransferOwnershipResultPasswordTooFresh(result.Data)

	case ConstructorCanTransferOwnershipResultSessionTooFresh:
		return UnmarshalCanTransferOwnershipResultSessionTooFresh(result.Data)

	default:
		return nil, errors.New("invalid type")
	}
}

type TransferChatOwnershipRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Identifier of the user to which transfer the ownership. The ownership can't be transferred to a bot or to a deleted user
	UserId int64 `json:"user_id"`
	// The 2-step verification password of the current user
	Password string `json:"password"`
}

func (req TransferChatOwnershipRequest) GetFunctionName() string {
	return "transferChatOwnership"
}

// Changes the owner of a chat; requires owner privileges in the chat. Use the method canTransferOwnership to check whether the ownership can be transferred from the current session. Available only for supergroups and channel chats
func (client *Client) TransferChatOwnership(ctx context.Context, req *TransferChatOwnershipRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetChatMemberRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Member identifier
	MemberId MessageSender `json:"member_id"`
}

func (req GetChatMemberRequest) GetFunctionName() string {
	return "getChatMember"
}

// Returns information about a single member of a chat
func (client *Client) GetChatMember(ctx context.Context, req *GetChatMemberRequest) (*ChatMember, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatMember(result.Data)
}

type SearchChatMembersRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Query to search for
	Query string `json:"query"`
	// The maximum number of users to be returned; up to 200
	Limit int32 `json:"limit"`
	// The type of users to search for; pass null to search among all chat members
	Filter ChatMembersFilter `json:"filter"`
}

func (req SearchChatMembersRequest) GetFunctionName() string {
	return "searchChatMembers"
}

// Searches for a specified query in the first name, last name and usernames of the members of a specified chat. Requires administrator rights if the chat is a channel
func (client *Client) SearchChatMembers(ctx context.Context, req *SearchChatMembersRequest) (*ChatMembers, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatMembers(result.Data)
}

type GetChatAdministratorsRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
}

func (req GetChatAdministratorsRequest) GetFunctionName() string {
	return "getChatAdministrators"
}

// Returns a list of administrators of the chat with their custom titles
func (client *Client) GetChatAdministrators(ctx context.Context, req *GetChatAdministratorsRequest) (*ChatAdministrators, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatAdministrators(result.Data)
}

type ClearAllDraftMessagesRequest struct {
	request
	// Pass true to keep local message drafts in secret chats
	ExcludeSecretChats bool `json:"exclude_secret_chats"`
}

func (req ClearAllDraftMessagesRequest) GetFunctionName() string {
	return "clearAllDraftMessages"
}

// Clears message drafts in all chats
func (client *Client) ClearAllDraftMessages(ctx context.Context, req *ClearAllDraftMessagesRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetSavedNotificationSoundRequest struct {
	request
	// Identifier of the notification sound
	NotificationSoundId JsonInt64 `json:"notification_sound_id"`
}

func (req GetSavedNotificationSoundRequest) GetFunctionName() string {
	return "getSavedNotificationSound"
}

// Returns saved notification sound by its identifier. Returns a 404 error if there is no saved notification sound with the specified identifier
func (client *Client) GetSavedNotificationSound(ctx context.Context, req *GetSavedNotificationSoundRequest) (*NotificationSounds, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalNotificationSounds(result.Data)
}

type GetSavedNotificationSoundsRequest struct {
	request
}

func (req GetSavedNotificationSoundsRequest) GetFunctionName() string {
	return "getSavedNotificationSounds"
}

// Returns the list of saved notification sounds. If a sound isn't in the list, then default sound needs to be used
func (client *Client) GetSavedNotificationSounds(ctx context.Context) (*NotificationSounds, error) {
	req := &GetSavedNotificationSoundsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalNotificationSounds(result.Data)
}

type AddSavedNotificationSoundRequest struct {
	request
	// Notification sound file to add
	Sound InputFile `json:"sound"`
}

func (req AddSavedNotificationSoundRequest) GetFunctionName() string {
	return "addSavedNotificationSound"
}

// Adds a new notification sound to the list of saved notification sounds. The new notification sound is added to the top of the list. If it is already in the list, its position isn't changed
func (client *Client) AddSavedNotificationSound(ctx context.Context, req *AddSavedNotificationSoundRequest) (*NotificationSound, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalNotificationSound(result.Data)
}

type RemoveSavedNotificationSoundRequest struct {
	request
	// Identifier of the notification sound
	NotificationSoundId JsonInt64 `json:"notification_sound_id"`
}

func (req RemoveSavedNotificationSoundRequest) GetFunctionName() string {
	return "removeSavedNotificationSound"
}

// Removes a notification sound from the list of saved notification sounds
func (client *Client) RemoveSavedNotificationSound(ctx context.Context, req *RemoveSavedNotificationSoundRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetChatNotificationSettingsExceptionsRequest struct {
	request
	// If specified, only chats from the scope will be returned; pass null to return chats from all scopes
	Scope NotificationSettingsScope `json:"scope"`
	// Pass true to include in the response chats with only non-default sound
	CompareSound bool `json:"compare_sound"`
}

func (req GetChatNotificationSettingsExceptionsRequest) GetFunctionName() string {
	return "getChatNotificationSettingsExceptions"
}

// Returns the list of chats with non-default notification settings for new messages
func (client *Client) GetChatNotificationSettingsExceptions(ctx context.Context, req *GetChatNotificationSettingsExceptionsRequest) (*Chats, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChats(result.Data)
}

type GetScopeNotificationSettingsRequest struct {
	request
	// Types of chats for which to return the notification settings information
	Scope NotificationSettingsScope `json:"scope"`
}

func (req GetScopeNotificationSettingsRequest) GetFunctionName() string {
	return "getScopeNotificationSettings"
}

// Returns the notification settings for chats of a given type
func (client *Client) GetScopeNotificationSettings(ctx context.Context, req *GetScopeNotificationSettingsRequest) (*ScopeNotificationSettings, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalScopeNotificationSettings(result.Data)
}

type SetScopeNotificationSettingsRequest struct {
	request
	// Types of chats for which to change the notification settings
	Scope NotificationSettingsScope `json:"scope"`
	// The new notification settings for the given scope
	NotificationSettings *ScopeNotificationSettings `json:"notification_settings"`
}

func (req SetScopeNotificationSettingsRequest) GetFunctionName() string {
	return "setScopeNotificationSettings"
}

// Changes notification settings for chats of a given type
func (client *Client) SetScopeNotificationSettings(ctx context.Context, req *SetScopeNotificationSettingsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetReactionNotificationSettingsRequest struct {
	request
	// The new notification settings for reactions
	NotificationSettings *ReactionNotificationSettings `json:"notification_settings"`
}

func (req SetReactionNotificationSettingsRequest) GetFunctionName() string {
	return "setReactionNotificationSettings"
}

// Changes notification settings for reactions
func (client *Client) SetReactionNotificationSettings(ctx context.Context, req *SetReactionNotificationSettingsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ResetAllNotificationSettingsRequest struct {
	request
}

func (req ResetAllNotificationSettingsRequest) GetFunctionName() string {
	return "resetAllNotificationSettings"
}

// Resets all chat and scope notification settings to their default values. By default, all chats are unmuted and message previews are shown
func (client *Client) ResetAllNotificationSettings(ctx context.Context) (*Ok, error) {
	req := &ResetAllNotificationSettingsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleChatIsPinnedRequest struct {
	request
	// Chat list in which to change the pinned state of the chat
	ChatList ChatList `json:"chat_list"`
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Pass true to pin the chat; pass false to unpin it
	IsPinned bool `json:"is_pinned"`
}

func (req ToggleChatIsPinnedRequest) GetFunctionName() string {
	return "toggleChatIsPinned"
}

// Changes the pinned state of a chat. There can be up to getOption("pinned_chat_count_max")/getOption("pinned_archived_chat_count_max") pinned non-secret chats and the same number of secret chats in the main/archive chat list. The limit can be increased with Telegram Premium
func (client *Client) ToggleChatIsPinned(ctx context.Context, req *ToggleChatIsPinnedRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetPinnedChatsRequest struct {
	request
	// Chat list in which to change the order of pinned chats
	ChatList ChatList `json:"chat_list"`
	// The new list of pinned chats
	ChatIds []int64 `json:"chat_ids"`
}

func (req SetPinnedChatsRequest) GetFunctionName() string {
	return "setPinnedChats"
}

// Changes the order of pinned chats
func (client *Client) SetPinnedChats(ctx context.Context, req *SetPinnedChatsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ReadChatListRequest struct {
	request
	// Chat list in which to mark all chats as read
	ChatList ChatList `json:"chat_list"`
}

func (req ReadChatListRequest) GetFunctionName() string {
	return "readChatList"
}

// Traverse all chats in a chat list and marks all messages in the chats as read
func (client *Client) ReadChatList(ctx context.Context, req *ReadChatListRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetCurrentWeatherRequest struct {
	request
	// The location
	Location *Location `json:"location"`
}

func (req GetCurrentWeatherRequest) GetFunctionName() string {
	return "getCurrentWeather"
}

// Returns the current weather in the given location
func (client *Client) GetCurrentWeather(ctx context.Context, req *GetCurrentWeatherRequest) (*CurrentWeather, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalCurrentWeather(result.Data)
}

type GetStoryRequest struct {
	request
	// Identifier of the chat that posted the story
	StorySenderChatId int64 `json:"story_sender_chat_id"`
	// Story identifier
	StoryId int32 `json:"story_id"`
	// Pass true to get only locally available information without sending network requests
	OnlyLocal bool `json:"only_local"`
}

func (req GetStoryRequest) GetFunctionName() string {
	return "getStory"
}

// Returns a story
func (client *Client) GetStory(ctx context.Context, req *GetStoryRequest) (*Story, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStory(result.Data)
}

type GetChatsToSendStoriesRequest struct {
	request
}

func (req GetChatsToSendStoriesRequest) GetFunctionName() string {
	return "getChatsToSendStories"
}

// Returns supergroup and channel chats in which the current user has the right to post stories. The chats must be rechecked with canSendStory before actually trying to post a story there
func (client *Client) GetChatsToSendStories(ctx context.Context) (*Chats, error) {
	req := &GetChatsToSendStoriesRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChats(result.Data)
}

type CanSendStoryRequest struct {
	request
	// Chat identifier. Pass Saved Messages chat identifier when posting a story on behalf of the current user
	ChatId int64 `json:"chat_id"`
}

func (req CanSendStoryRequest) GetFunctionName() string {
	return "canSendStory"
}

// Checks whether the current user can send a story on behalf of a chat; requires can_post_stories right for supergroup and channel chats
func (client *Client) CanSendStory(ctx context.Context, req *CanSendStoryRequest) (CanSendStoryResult, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	switch result.MetaType {
	case ConstructorCanSendStoryResultOk:
		return UnmarshalCanSendStoryResultOk(result.Data)

	case ConstructorCanSendStoryResultPremiumNeeded:
		return UnmarshalCanSendStoryResultPremiumNeeded(result.Data)

	case ConstructorCanSendStoryResultBoostNeeded:
		return UnmarshalCanSendStoryResultBoostNeeded(result.Data)

	case ConstructorCanSendStoryResultActiveStoryLimitExceeded:
		return UnmarshalCanSendStoryResultActiveStoryLimitExceeded(result.Data)

	case ConstructorCanSendStoryResultWeeklyLimitExceeded:
		return UnmarshalCanSendStoryResultWeeklyLimitExceeded(result.Data)

	case ConstructorCanSendStoryResultMonthlyLimitExceeded:
		return UnmarshalCanSendStoryResultMonthlyLimitExceeded(result.Data)

	default:
		return nil, errors.New("invalid type")
	}
}

type SendStoryRequest struct {
	request
	// Identifier of the chat that will post the story. Pass Saved Messages chat identifier when posting a story on behalf of the current user
	ChatId int64 `json:"chat_id"`
	// Content of the story
	Content InputStoryContent `json:"content"`
	// Clickable rectangle areas to be shown on the story media; pass null if none
	Areas *InputStoryAreas `json:"areas"`
	// Story caption; pass null to use an empty caption; 0-getOption("story_caption_length_max") characters; can have entities only if getOption("can_use_text_entities_in_story_caption")
	Caption *FormattedText `json:"caption"`
	// The privacy settings for the story; ignored for stories sent to supergroup and channel chats
	PrivacySettings StoryPrivacySettings `json:"privacy_settings"`
	// Period after which the story is moved to archive, in seconds; must be one of 6 * 3600, 12 * 3600, 86400, or 2 * 86400 for Telegram Premium users, and 86400 otherwise
	ActivePeriod int32 `json:"active_period"`
	// Full identifier of the original story, which content was used to create the story; pass null if the story isn't repost of another story
	FromStoryFullId *StoryFullId `json:"from_story_full_id"`
	// Pass true to keep the story accessible after expiration
	IsPostedToChatPage bool `json:"is_posted_to_chat_page"`
	// Pass true if the content of the story must be protected from forwarding and screenshotting
	ProtectContent bool `json:"protect_content"`
}

func (req SendStoryRequest) GetFunctionName() string {
	return "sendStory"
}

// Sends a new story to a chat; requires can_post_stories right for supergroup and channel chats. Returns a temporary story
func (client *Client) SendStory(ctx context.Context, req *SendStoryRequest) (*Story, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStory(result.Data)
}

type EditStoryRequest struct {
	request
	// Identifier of the chat that posted the story
	StorySenderChatId int64 `json:"story_sender_chat_id"`
	// Identifier of the story to edit
	StoryId int32 `json:"story_id"`
	// New content of the story; pass null to keep the current content
	Content InputStoryContent `json:"content"`
	// New clickable rectangle areas to be shown on the story media; pass null to keep the current areas. Areas can't be edited if story content isn't changed
	Areas *InputStoryAreas `json:"areas"`
	// New story caption; pass null to keep the current caption
	Caption *FormattedText `json:"caption"`
}

func (req EditStoryRequest) GetFunctionName() string {
	return "editStory"
}

// Changes content and caption of a story. Can be called only if story.can_be_edited == true
func (client *Client) EditStory(ctx context.Context, req *EditStoryRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type EditStoryCoverRequest struct {
	request
	// Identifier of the chat that posted the story
	StorySenderChatId int64 `json:"story_sender_chat_id"`
	// Identifier of the story to edit
	StoryId int32 `json:"story_id"`
	// New timestamp of the frame, which will be used as video thumbnail
	CoverFrameTimestamp float64 `json:"cover_frame_timestamp"`
}

func (req EditStoryCoverRequest) GetFunctionName() string {
	return "editStoryCover"
}

// Changes cover of a video story. Can be called only if story.can_be_edited == true and the story isn't being edited now
func (client *Client) EditStoryCover(ctx context.Context, req *EditStoryCoverRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetStoryPrivacySettingsRequest struct {
	request
	// Identifier of the story
	StoryId int32 `json:"story_id"`
	// The new privacy settings for the story
	PrivacySettings StoryPrivacySettings `json:"privacy_settings"`
}

func (req SetStoryPrivacySettingsRequest) GetFunctionName() string {
	return "setStoryPrivacySettings"
}

// Changes privacy settings of a story. The method can be called only for stories posted on behalf of the current user and if story.can_be_edited == true
func (client *Client) SetStoryPrivacySettings(ctx context.Context, req *SetStoryPrivacySettingsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleStoryIsPostedToChatPageRequest struct {
	request
	// Identifier of the chat that posted the story
	StorySenderChatId int64 `json:"story_sender_chat_id"`
	// Identifier of the story
	StoryId int32 `json:"story_id"`
	// Pass true to make the story accessible after expiration; pass false to make it private
	IsPostedToChatPage bool `json:"is_posted_to_chat_page"`
}

func (req ToggleStoryIsPostedToChatPageRequest) GetFunctionName() string {
	return "toggleStoryIsPostedToChatPage"
}

// Toggles whether a story is accessible after expiration. Can be called only if story.can_toggle_is_posted_to_chat_page == true
func (client *Client) ToggleStoryIsPostedToChatPage(ctx context.Context, req *ToggleStoryIsPostedToChatPageRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type DeleteStoryRequest struct {
	request
	// Identifier of the chat that posted the story
	StorySenderChatId int64 `json:"story_sender_chat_id"`
	// Identifier of the story to delete
	StoryId int32 `json:"story_id"`
}

func (req DeleteStoryRequest) GetFunctionName() string {
	return "deleteStory"
}

// Deletes a previously sent story. Can be called only if story.can_be_deleted == true
func (client *Client) DeleteStory(ctx context.Context, req *DeleteStoryRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetStoryNotificationSettingsExceptionsRequest struct {
	request
}

func (req GetStoryNotificationSettingsExceptionsRequest) GetFunctionName() string {
	return "getStoryNotificationSettingsExceptions"
}

// Returns the list of chats with non-default notification settings for stories
func (client *Client) GetStoryNotificationSettingsExceptions(ctx context.Context) (*Chats, error) {
	req := &GetStoryNotificationSettingsExceptionsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChats(result.Data)
}

type LoadActiveStoriesRequest struct {
	request
	// The story list in which to load active stories
	StoryList StoryList `json:"story_list"`
}

func (req LoadActiveStoriesRequest) GetFunctionName() string {
	return "loadActiveStories"
}

// Loads more active stories from a story list. The loaded stories will be sent through updates. Active stories are sorted by the pair (active_stories.order, active_stories.story_sender_chat_id) in descending order. Returns a 404 error if all active stories have been loaded
func (client *Client) LoadActiveStories(ctx context.Context, req *LoadActiveStoriesRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetChatActiveStoriesListRequest struct {
	request
	// Identifier of the chat that posted stories
	ChatId int64 `json:"chat_id"`
	// New list for active stories posted by the chat
	StoryList StoryList `json:"story_list"`
}

func (req SetChatActiveStoriesListRequest) GetFunctionName() string {
	return "setChatActiveStoriesList"
}

// Changes story list in which stories from the chat are shown
func (client *Client) SetChatActiveStoriesList(ctx context.Context, req *SetChatActiveStoriesListRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetChatActiveStoriesRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
}

func (req GetChatActiveStoriesRequest) GetFunctionName() string {
	return "getChatActiveStories"
}

// Returns the list of active stories posted by the given chat
func (client *Client) GetChatActiveStories(ctx context.Context, req *GetChatActiveStoriesRequest) (*ChatActiveStories, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatActiveStories(result.Data)
}

type GetChatPostedToChatPageStoriesRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Identifier of the story starting from which stories must be returned; use 0 to get results from pinned and the newest story
	FromStoryId int32 `json:"from_story_id"`
	// The maximum number of stories to be returned. For optimal performance, the number of returned stories is chosen by TDLib and can be smaller than the specified limit
	Limit int32 `json:"limit"`
}

func (req GetChatPostedToChatPageStoriesRequest) GetFunctionName() string {
	return "getChatPostedToChatPageStories"
}

// Returns the list of stories that posted by the given chat to its chat page. If from_story_id == 0, then pinned stories are returned first. Then, stories are returned in reverse chronological order (i.e., in order of decreasing story_id). For optimal performance, the number of returned stories is chosen by TDLib
func (client *Client) GetChatPostedToChatPageStories(ctx context.Context, req *GetChatPostedToChatPageStoriesRequest) (*Stories, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStories(result.Data)
}

type GetChatArchivedStoriesRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Identifier of the story starting from which stories must be returned; use 0 to get results from the last story
	FromStoryId int32 `json:"from_story_id"`
	// The maximum number of stories to be returned. For optimal performance, the number of returned stories is chosen by TDLib and can be smaller than the specified limit
	Limit int32 `json:"limit"`
}

func (req GetChatArchivedStoriesRequest) GetFunctionName() string {
	return "getChatArchivedStories"
}

// Returns the list of all stories posted by the given chat; requires can_edit_stories right in the chat. The stories are returned in reverse chronological order (i.e., in order of decreasing story_id). For optimal performance, the number of returned stories is chosen by TDLib
func (client *Client) GetChatArchivedStories(ctx context.Context, req *GetChatArchivedStoriesRequest) (*Stories, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStories(result.Data)
}

type SetChatPinnedStoriesRequest struct {
	request
	// Identifier of the chat that posted the stories
	ChatId int64 `json:"chat_id"`
	// New list of pinned stories. All stories must be posted to the chat page first. There can be up to getOption("pinned_story_count_max") pinned stories on a chat page
	StoryIds []int32 `json:"story_ids"`
}

func (req SetChatPinnedStoriesRequest) GetFunctionName() string {
	return "setChatPinnedStories"
}

// Changes the list of pinned stories on a chat page; requires can_edit_stories right in the chat
func (client *Client) SetChatPinnedStories(ctx context.Context, req *SetChatPinnedStoriesRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type OpenStoryRequest struct {
	request
	// The identifier of the sender of the opened story
	StorySenderChatId int64 `json:"story_sender_chat_id"`
	// The identifier of the story
	StoryId int32 `json:"story_id"`
}

func (req OpenStoryRequest) GetFunctionName() string {
	return "openStory"
}

// Informs TDLib that a story is opened and is being viewed by the user
func (client *Client) OpenStory(ctx context.Context, req *OpenStoryRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type CloseStoryRequest struct {
	request
	// The identifier of the sender of the story to close
	StorySenderChatId int64 `json:"story_sender_chat_id"`
	// The identifier of the story
	StoryId int32 `json:"story_id"`
}

func (req CloseStoryRequest) GetFunctionName() string {
	return "closeStory"
}

// Informs TDLib that a story is closed by the user
func (client *Client) CloseStory(ctx context.Context, req *CloseStoryRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetStoryAvailableReactionsRequest struct {
	request
	// Number of reaction per row, 5-25
	RowSize int32 `json:"row_size"`
}

func (req GetStoryAvailableReactionsRequest) GetFunctionName() string {
	return "getStoryAvailableReactions"
}

// Returns reactions, which can be chosen for a story
func (client *Client) GetStoryAvailableReactions(ctx context.Context, req *GetStoryAvailableReactionsRequest) (*AvailableReactions, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalAvailableReactions(result.Data)
}

type SetStoryReactionRequest struct {
	request
	// The identifier of the sender of the story
	StorySenderChatId int64 `json:"story_sender_chat_id"`
	// The identifier of the story
	StoryId int32 `json:"story_id"`
	// Type of the reaction to set; pass null to remove the reaction. Custom emoji reactions can be used only by Telegram Premium users. Paid reactions can't be set
	ReactionType ReactionType `json:"reaction_type"`
	// Pass true if the reaction needs to be added to recent reactions
	UpdateRecentReactions bool `json:"update_recent_reactions"`
}

func (req SetStoryReactionRequest) GetFunctionName() string {
	return "setStoryReaction"
}

// Changes chosen reaction on a story that has already been sent
func (client *Client) SetStoryReaction(ctx context.Context, req *SetStoryReactionRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetStoryInteractionsRequest struct {
	request
	// Story identifier
	StoryId int32 `json:"story_id"`
	// Query to search for in names, usernames and titles; may be empty to get all relevant interactions
	Query string `json:"query"`
	// Pass true to get only interactions by contacts; pass false to get all relevant interactions
	OnlyContacts bool `json:"only_contacts"`
	// Pass true to get forwards and reposts first, then reactions, then other views; pass false to get interactions sorted just by interaction date
	PreferForwards bool `json:"prefer_forwards"`
	// Pass true to get interactions with reaction first; pass false to get interactions sorted just by interaction date. Ignored if prefer_forwards == true
	PreferWithReaction bool `json:"prefer_with_reaction"`
	// Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results
	Offset string `json:"offset"`
	// The maximum number of story interactions to return
	Limit int32 `json:"limit"`
}

func (req GetStoryInteractionsRequest) GetFunctionName() string {
	return "getStoryInteractions"
}

// Returns interactions with a story. The method can be called only for stories posted on behalf of the current user
func (client *Client) GetStoryInteractions(ctx context.Context, req *GetStoryInteractionsRequest) (*StoryInteractions, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStoryInteractions(result.Data)
}

type GetChatStoryInteractionsRequest struct {
	request
	// The identifier of the sender of the story
	StorySenderChatId int64 `json:"story_sender_chat_id"`
	// Story identifier
	StoryId int32 `json:"story_id"`
	// Pass the default heart reaction or a suggested reaction type to receive only interactions with the specified reaction type; pass null to receive all interactions; reactionTypePaid isn't supported
	ReactionType ReactionType `json:"reaction_type"`
	// Pass true to get forwards and reposts first, then reactions, then other views; pass false to get interactions sorted just by interaction date
	PreferForwards bool `json:"prefer_forwards"`
	// Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results
	Offset string `json:"offset"`
	// The maximum number of story interactions to return
	Limit int32 `json:"limit"`
}

func (req GetChatStoryInteractionsRequest) GetFunctionName() string {
	return "getChatStoryInteractions"
}

// Returns interactions with a story posted in a chat. Can be used only if story is posted on behalf of a chat and the user is an administrator in the chat
func (client *Client) GetChatStoryInteractions(ctx context.Context, req *GetChatStoryInteractionsRequest) (*StoryInteractions, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStoryInteractions(result.Data)
}

type ReportStoryRequest struct {
	request
	// The identifier of the sender of the story to report
	StorySenderChatId int64 `json:"story_sender_chat_id"`
	// The identifier of the story to report
	StoryId int32 `json:"story_id"`
	// Option identifier chosen by the user; leave empty for the initial request
	OptionId []byte `json:"option_id"`
	// Additional report details; 0-1024 characters; leave empty for the initial request
	Text string `json:"text"`
}

func (req ReportStoryRequest) GetFunctionName() string {
	return "reportStory"
}

// Reports a story to the Telegram moderators
func (client *Client) ReportStory(ctx context.Context, req *ReportStoryRequest) (ReportStoryResult, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	switch result.MetaType {
	case ConstructorReportStoryResultOk:
		return UnmarshalReportStoryResultOk(result.Data)

	case ConstructorReportStoryResultOptionRequired:
		return UnmarshalReportStoryResultOptionRequired(result.Data)

	case ConstructorReportStoryResultTextRequired:
		return UnmarshalReportStoryResultTextRequired(result.Data)

	default:
		return nil, errors.New("invalid type")
	}
}

type ActivateStoryStealthModeRequest struct {
	request
}

func (req ActivateStoryStealthModeRequest) GetFunctionName() string {
	return "activateStoryStealthMode"
}

// Activates stealth mode for stories, which hides all views of stories from the current user in the last "story_stealth_mode_past_period" seconds and for the next "story_stealth_mode_future_period" seconds; for Telegram Premium users only
func (client *Client) ActivateStoryStealthMode(ctx context.Context) (*Ok, error) {
	req := &ActivateStoryStealthModeRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetStoryPublicForwardsRequest struct {
	request
	// The identifier of the sender of the story
	StorySenderChatId int64 `json:"story_sender_chat_id"`
	// The identifier of the story
	StoryId int32 `json:"story_id"`
	// Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results
	Offset string `json:"offset"`
	// The maximum number of messages and stories to be returned; must be positive and can't be greater than 100. For optimal performance, the number of returned objects is chosen by TDLib and can be smaller than the specified limit
	Limit int32 `json:"limit"`
}

func (req GetStoryPublicForwardsRequest) GetFunctionName() string {
	return "getStoryPublicForwards"
}

// Returns forwards of a story as a message to public chats and reposts by public channels. Can be used only if the story is posted on behalf of the current user or story.can_get_statistics == true. For optimal performance, the number of returned messages and stories is chosen by TDLib
func (client *Client) GetStoryPublicForwards(ctx context.Context, req *GetStoryPublicForwardsRequest) (*PublicForwards, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalPublicForwards(result.Data)
}

type GetChatBoostLevelFeaturesRequest struct {
	request
	// Pass true to get the list of features for channels; pass false to get the list of features for supergroups
	IsChannel bool `json:"is_channel"`
	// Chat boost level
	Level int32 `json:"level"`
}

func (req GetChatBoostLevelFeaturesRequest) GetFunctionName() string {
	return "getChatBoostLevelFeatures"
}

// Returns the list of features available on the specific chat boost level. This is an offline method
func (client *Client) GetChatBoostLevelFeatures(ctx context.Context, req *GetChatBoostLevelFeaturesRequest) (*ChatBoostLevelFeatures, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatBoostLevelFeatures(result.Data)
}

type GetChatBoostFeaturesRequest struct {
	request
	// Pass true to get the list of features for channels; pass false to get the list of features for supergroups
	IsChannel bool `json:"is_channel"`
}

func (req GetChatBoostFeaturesRequest) GetFunctionName() string {
	return "getChatBoostFeatures"
}

// Returns the list of features available for different chat boost levels. This is an offline method
func (client *Client) GetChatBoostFeatures(ctx context.Context, req *GetChatBoostFeaturesRequest) (*ChatBoostFeatures, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatBoostFeatures(result.Data)
}

type GetAvailableChatBoostSlotsRequest struct {
	request
}

func (req GetAvailableChatBoostSlotsRequest) GetFunctionName() string {
	return "getAvailableChatBoostSlots"
}

// Returns the list of available chat boost slots for the current user
func (client *Client) GetAvailableChatBoostSlots(ctx context.Context) (*ChatBoostSlots, error) {
	req := &GetAvailableChatBoostSlotsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatBoostSlots(result.Data)
}

type GetChatBoostStatusRequest struct {
	request
	// Identifier of the chat
	ChatId int64 `json:"chat_id"`
}

func (req GetChatBoostStatusRequest) GetFunctionName() string {
	return "getChatBoostStatus"
}

// Returns the current boost status for a supergroup or a channel chat
func (client *Client) GetChatBoostStatus(ctx context.Context, req *GetChatBoostStatusRequest) (*ChatBoostStatus, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatBoostStatus(result.Data)
}

type BoostChatRequest struct {
	request
	// Identifier of the chat
	ChatId int64 `json:"chat_id"`
	// Identifiers of boost slots of the current user from which to apply boosts to the chat
	SlotIds []int32 `json:"slot_ids"`
}

func (req BoostChatRequest) GetFunctionName() string {
	return "boostChat"
}

// Boosts a chat and returns the list of available chat boost slots for the current user after the boost
func (client *Client) BoostChat(ctx context.Context, req *BoostChatRequest) (*ChatBoostSlots, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatBoostSlots(result.Data)
}

type GetChatBoostLinkRequest struct {
	request
	// Identifier of the chat
	ChatId int64 `json:"chat_id"`
}

func (req GetChatBoostLinkRequest) GetFunctionName() string {
	return "getChatBoostLink"
}

// Returns an HTTPS link to boost the specified supergroup or channel chat
func (client *Client) GetChatBoostLink(ctx context.Context, req *GetChatBoostLinkRequest) (*ChatBoostLink, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatBoostLink(result.Data)
}

type GetChatBoostLinkInfoRequest struct {
	request
	// The link to boost a chat
	Url string `json:"url"`
}

func (req GetChatBoostLinkInfoRequest) GetFunctionName() string {
	return "getChatBoostLinkInfo"
}

// Returns information about a link to boost a chat. Can be called for any internal link of the type internalLinkTypeChatBoost
func (client *Client) GetChatBoostLinkInfo(ctx context.Context, req *GetChatBoostLinkInfoRequest) (*ChatBoostLinkInfo, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatBoostLinkInfo(result.Data)
}

type GetChatBoostsRequest struct {
	request
	// Identifier of the chat
	ChatId int64 `json:"chat_id"`
	// Pass true to receive only boosts received from gift codes and giveaways created by the chat
	OnlyGiftCodes bool `json:"only_gift_codes"`
	// Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results
	Offset string `json:"offset"`
	// The maximum number of boosts to be returned; up to 100. For optimal performance, the number of returned boosts can be smaller than the specified limit
	Limit int32 `json:"limit"`
}

func (req GetChatBoostsRequest) GetFunctionName() string {
	return "getChatBoosts"
}

// Returns the list of boosts applied to a chat; requires administrator rights in the chat
func (client *Client) GetChatBoosts(ctx context.Context, req *GetChatBoostsRequest) (*FoundChatBoosts, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFoundChatBoosts(result.Data)
}

type GetUserChatBoostsRequest struct {
	request
	// Identifier of the chat
	ChatId int64 `json:"chat_id"`
	// Identifier of the user
	UserId int64 `json:"user_id"`
}

func (req GetUserChatBoostsRequest) GetFunctionName() string {
	return "getUserChatBoosts"
}

// Returns the list of boosts applied to a chat by a given user; requires administrator rights in the chat; for bots only
func (client *Client) GetUserChatBoosts(ctx context.Context, req *GetUserChatBoostsRequest) (*FoundChatBoosts, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFoundChatBoosts(result.Data)
}

type GetAttachmentMenuBotRequest struct {
	request
	// Bot's user identifier
	BotUserId int64 `json:"bot_user_id"`
}

func (req GetAttachmentMenuBotRequest) GetFunctionName() string {
	return "getAttachmentMenuBot"
}

// Returns information about a bot that can be added to attachment or side menu
func (client *Client) GetAttachmentMenuBot(ctx context.Context, req *GetAttachmentMenuBotRequest) (*AttachmentMenuBot, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalAttachmentMenuBot(result.Data)
}

type ToggleBotIsAddedToAttachmentMenuRequest struct {
	request
	// Bot's user identifier
	BotUserId int64 `json:"bot_user_id"`
	// Pass true to add the bot to attachment menu; pass false to remove the bot from attachment menu
	IsAdded bool `json:"is_added"`
	// Pass true if the current user allowed the bot to send them messages. Ignored if is_added is false
	AllowWriteAccess bool `json:"allow_write_access"`
}

func (req ToggleBotIsAddedToAttachmentMenuRequest) GetFunctionName() string {
	return "toggleBotIsAddedToAttachmentMenu"
}

// Adds or removes a bot to attachment and side menu. Bot can be added to the menu, only if userTypeBot.can_be_added_to_attachment_menu == true
func (client *Client) ToggleBotIsAddedToAttachmentMenu(ctx context.Context, req *ToggleBotIsAddedToAttachmentMenuRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetThemedEmojiStatusesRequest struct {
	request
}

func (req GetThemedEmojiStatusesRequest) GetFunctionName() string {
	return "getThemedEmojiStatuses"
}

// Returns up to 8 emoji statuses, which must be shown right after the default Premium Badge in the emoji status list for self status
func (client *Client) GetThemedEmojiStatuses(ctx context.Context) (*EmojiStatusCustomEmojis, error) {
	req := &GetThemedEmojiStatusesRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalEmojiStatusCustomEmojis(result.Data)
}

type GetRecentEmojiStatusesRequest struct {
	request
}

func (req GetRecentEmojiStatusesRequest) GetFunctionName() string {
	return "getRecentEmojiStatuses"
}

// Returns recent emoji statuses for self status
func (client *Client) GetRecentEmojiStatuses(ctx context.Context) (*EmojiStatuses, error) {
	req := &GetRecentEmojiStatusesRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalEmojiStatuses(result.Data)
}

type GetUpgradedGiftEmojiStatusesRequest struct {
	request
}

func (req GetUpgradedGiftEmojiStatusesRequest) GetFunctionName() string {
	return "getUpgradedGiftEmojiStatuses"
}

// Returns available upgraded gift emoji statuses for self status
func (client *Client) GetUpgradedGiftEmojiStatuses(ctx context.Context) (*EmojiStatuses, error) {
	req := &GetUpgradedGiftEmojiStatusesRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalEmojiStatuses(result.Data)
}

type GetDefaultEmojiStatusesRequest struct {
	request
}

func (req GetDefaultEmojiStatusesRequest) GetFunctionName() string {
	return "getDefaultEmojiStatuses"
}

// Returns default emoji statuses for self status
func (client *Client) GetDefaultEmojiStatuses(ctx context.Context) (*EmojiStatusCustomEmojis, error) {
	req := &GetDefaultEmojiStatusesRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalEmojiStatusCustomEmojis(result.Data)
}

type ClearRecentEmojiStatusesRequest struct {
	request
}

func (req ClearRecentEmojiStatusesRequest) GetFunctionName() string {
	return "clearRecentEmojiStatuses"
}

// Clears the list of recently used emoji statuses for self status
func (client *Client) ClearRecentEmojiStatuses(ctx context.Context) (*Ok, error) {
	req := &ClearRecentEmojiStatusesRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetThemedChatEmojiStatusesRequest struct {
	request
}

func (req GetThemedChatEmojiStatusesRequest) GetFunctionName() string {
	return "getThemedChatEmojiStatuses"
}

// Returns up to 8 emoji statuses, which must be shown in the emoji status list for chats
func (client *Client) GetThemedChatEmojiStatuses(ctx context.Context) (*EmojiStatusCustomEmojis, error) {
	req := &GetThemedChatEmojiStatusesRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalEmojiStatusCustomEmojis(result.Data)
}

type GetDefaultChatEmojiStatusesRequest struct {
	request
}

func (req GetDefaultChatEmojiStatusesRequest) GetFunctionName() string {
	return "getDefaultChatEmojiStatuses"
}

// Returns default emoji statuses for chats
func (client *Client) GetDefaultChatEmojiStatuses(ctx context.Context) (*EmojiStatusCustomEmojis, error) {
	req := &GetDefaultChatEmojiStatusesRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalEmojiStatusCustomEmojis(result.Data)
}

type GetDisallowedChatEmojiStatusesRequest struct {
	request
}

func (req GetDisallowedChatEmojiStatusesRequest) GetFunctionName() string {
	return "getDisallowedChatEmojiStatuses"
}

// Returns the list of emoji statuses, which can't be used as chat emoji status, even they are from a sticker set with is_allowed_as_chat_emoji_status == true
func (client *Client) GetDisallowedChatEmojiStatuses(ctx context.Context) (*EmojiStatusCustomEmojis, error) {
	req := &GetDisallowedChatEmojiStatusesRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalEmojiStatusCustomEmojis(result.Data)
}

type DownloadFileRequest struct {
	request
	// Identifier of the file to download
	FileId int32 `json:"file_id"`
	// Priority of the download (1-32). The higher the priority, the earlier the file will be downloaded. If the priorities of two files are equal, then the last one for which downloadFile/addFileToDownloads was called will be downloaded first
	Priority int32 `json:"priority"`
	// The starting position from which the file needs to be downloaded
	Offset int64 `json:"offset"`
	// Number of bytes which need to be downloaded starting from the "offset" position before the download will automatically be canceled; use 0 to download without a limit
	Limit int64 `json:"limit"`
	// Pass true to return response only after the file download has succeeded, has failed, has been canceled, or a new downloadFile request with different offset/limit parameters was sent; pass false to return file state immediately, just after the download has been started
	Synchronous bool `json:"synchronous"`
}

func (req DownloadFileRequest) GetFunctionName() string {
	return "downloadFile"
}

// Downloads a file from the cloud. Download progress and completion of the download will be notified through updateFile updates
func (client *Client) DownloadFile(ctx context.Context, req *DownloadFileRequest) (*File, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFile(result.Data)
}

type GetFileDownloadedPrefixSizeRequest struct {
	request
	// Identifier of the file
	FileId int32 `json:"file_id"`
	// Offset from which downloaded prefix size needs to be calculated
	Offset int64 `json:"offset"`
}

func (req GetFileDownloadedPrefixSizeRequest) GetFunctionName() string {
	return "getFileDownloadedPrefixSize"
}

// Returns file downloaded prefix size from a given offset, in bytes
func (client *Client) GetFileDownloadedPrefixSize(ctx context.Context, req *GetFileDownloadedPrefixSizeRequest) (*FileDownloadedPrefixSize, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFileDownloadedPrefixSize(result.Data)
}

type CancelDownloadFileRequest struct {
	request
	// Identifier of a file to stop downloading
	FileId int32 `json:"file_id"`
	// Pass true to stop downloading only if it hasn't been started, i.e. request hasn't been sent to server
	OnlyIfPending bool `json:"only_if_pending"`
}

func (req CancelDownloadFileRequest) GetFunctionName() string {
	return "cancelDownloadFile"
}

// Stops the downloading of a file. If a file has already been downloaded, does nothing
func (client *Client) CancelDownloadFile(ctx context.Context, req *CancelDownloadFileRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetSuggestedFileNameRequest struct {
	request
	// Identifier of the file
	FileId int32 `json:"file_id"`
	// Directory in which the file is expected to be saved
	Directory string `json:"directory"`
}

func (req GetSuggestedFileNameRequest) GetFunctionName() string {
	return "getSuggestedFileName"
}

// Returns suggested name for saving a file in a given directory
func (client *Client) GetSuggestedFileName(ctx context.Context, req *GetSuggestedFileNameRequest) (*Text, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalText(result.Data)
}

type PreliminaryUploadFileRequest struct {
	request
	// File to upload
	File InputFile `json:"file"`
	// File type; pass null if unknown
	FileType FileType `json:"file_type"`
	// Priority of the upload (1-32). The higher the priority, the earlier the file will be uploaded. If the priorities of two files are equal, then the first one for which preliminaryUploadFile was called will be uploaded first
	Priority int32 `json:"priority"`
}

func (req PreliminaryUploadFileRequest) GetFunctionName() string {
	return "preliminaryUploadFile"
}

// Preliminary uploads a file to the cloud before sending it in a message, which can be useful for uploading of being recorded voice and video notes. In all other cases there is no need to preliminary upload a file. Updates updateFile will be used to notify about upload progress. The upload will not be completed until the file is sent in a message
func (client *Client) PreliminaryUploadFile(ctx context.Context, req *PreliminaryUploadFileRequest) (*File, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFile(result.Data)
}

type CancelPreliminaryUploadFileRequest struct {
	request
	// Identifier of the file to stop uploading
	FileId int32 `json:"file_id"`
}

func (req CancelPreliminaryUploadFileRequest) GetFunctionName() string {
	return "cancelPreliminaryUploadFile"
}

// Stops the preliminary uploading of a file. Supported only for files uploaded by using preliminaryUploadFile
func (client *Client) CancelPreliminaryUploadFile(ctx context.Context, req *CancelPreliminaryUploadFileRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type WriteGeneratedFilePartRequest struct {
	request
	// The identifier of the generation process
	GenerationId JsonInt64 `json:"generation_id"`
	// The offset from which to write the data to the file
	Offset int64 `json:"offset"`
	// The data to write
	Data []byte `json:"data"`
}

func (req WriteGeneratedFilePartRequest) GetFunctionName() string {
	return "writeGeneratedFilePart"
}

// Writes a part of a generated file. This method is intended to be used only if the application has no direct access to TDLib's file system, because it is usually slower than a direct write to the destination file
func (client *Client) WriteGeneratedFilePart(ctx context.Context, req *WriteGeneratedFilePartRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetFileGenerationProgressRequest struct {
	request
	// The identifier of the generation process
	GenerationId JsonInt64 `json:"generation_id"`
	// Expected size of the generated file, in bytes; 0 if unknown
	ExpectedSize int64 `json:"expected_size"`
	// The number of bytes already generated
	LocalPrefixSize int64 `json:"local_prefix_size"`
}

func (req SetFileGenerationProgressRequest) GetFunctionName() string {
	return "setFileGenerationProgress"
}

// Informs TDLib on a file generation progress
func (client *Client) SetFileGenerationProgress(ctx context.Context, req *SetFileGenerationProgressRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type FinishFileGenerationRequest struct {
	request
	// The identifier of the generation process
	GenerationId JsonInt64 `json:"generation_id"`
	// If passed, the file generation has failed and must be terminated; pass null if the file generation succeeded
	Error *Error `json:"error"`
}

func (req FinishFileGenerationRequest) GetFunctionName() string {
	return "finishFileGeneration"
}

// Finishes the file generation
func (client *Client) FinishFileGeneration(ctx context.Context, req *FinishFileGenerationRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ReadFilePartRequest struct {
	request
	// Identifier of the file. The file must be located in the TDLib file cache
	FileId int32 `json:"file_id"`
	// The offset from which to read the file
	Offset int64 `json:"offset"`
	// Number of bytes to read. An error will be returned if there are not enough bytes available in the file from the specified position. Pass 0 to read all available data from the specified position
	Count int64 `json:"count"`
}

func (req ReadFilePartRequest) GetFunctionName() string {
	return "readFilePart"
}

// Reads a part of a file from the TDLib file cache and returns read bytes. This method is intended to be used only if the application has no direct access to TDLib's file system, because it is usually slower than a direct read from the file
func (client *Client) ReadFilePart(ctx context.Context, req *ReadFilePartRequest) (*FilePart, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFilePart(result.Data)
}

type DeleteFileRequest struct {
	request
	// Identifier of the file to delete
	FileId int32 `json:"file_id"`
}

func (req DeleteFileRequest) GetFunctionName() string {
	return "deleteFile"
}

// Deletes a file from the TDLib file cache
func (client *Client) DeleteFile(ctx context.Context, req *DeleteFileRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type AddFileToDownloadsRequest struct {
	request
	// Identifier of the file to download
	FileId int32 `json:"file_id"`
	// Chat identifier of the message with the file
	ChatId int64 `json:"chat_id"`
	// Message identifier
	MessageId int64 `json:"message_id"`
	// Priority of the download (1-32). The higher the priority, the earlier the file will be downloaded. If the priorities of two files are equal, then the last one for which downloadFile/addFileToDownloads was called will be downloaded first
	Priority int32 `json:"priority"`
}

func (req AddFileToDownloadsRequest) GetFunctionName() string {
	return "addFileToDownloads"
}

// Adds a file from a message to the list of file downloads. Download progress and completion of the download will be notified through updateFile updates. If message database is used, the list of file downloads is persistent across application restarts. The downloading is independent of download using downloadFile, i.e. it continues if downloadFile is canceled or is used to download a part of the file
func (client *Client) AddFileToDownloads(ctx context.Context, req *AddFileToDownloadsRequest) (*File, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFile(result.Data)
}

type ToggleDownloadIsPausedRequest struct {
	request
	// Identifier of the downloaded file
	FileId int32 `json:"file_id"`
	// Pass true if the download is paused
	IsPaused bool `json:"is_paused"`
}

func (req ToggleDownloadIsPausedRequest) GetFunctionName() string {
	return "toggleDownloadIsPaused"
}

// Changes pause state of a file in the file download list
func (client *Client) ToggleDownloadIsPaused(ctx context.Context, req *ToggleDownloadIsPausedRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleAllDownloadsArePausedRequest struct {
	request
	// Pass true to pause all downloads; pass false to unpause them
	ArePaused bool `json:"are_paused"`
}

func (req ToggleAllDownloadsArePausedRequest) GetFunctionName() string {
	return "toggleAllDownloadsArePaused"
}

// Changes pause state of all files in the file download list
func (client *Client) ToggleAllDownloadsArePaused(ctx context.Context, req *ToggleAllDownloadsArePausedRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type RemoveFileFromDownloadsRequest struct {
	request
	// Identifier of the downloaded file
	FileId int32 `json:"file_id"`
	// Pass true to delete the file from the TDLib file cache
	DeleteFromCache bool `json:"delete_from_cache"`
}

func (req RemoveFileFromDownloadsRequest) GetFunctionName() string {
	return "removeFileFromDownloads"
}

// Removes a file from the file download list
func (client *Client) RemoveFileFromDownloads(ctx context.Context, req *RemoveFileFromDownloadsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type RemoveAllFilesFromDownloadsRequest struct {
	request
	// Pass true to remove only active downloads, including paused
	OnlyActive bool `json:"only_active"`
	// Pass true to remove only completed downloads
	OnlyCompleted bool `json:"only_completed"`
	// Pass true to delete the file from the TDLib file cache
	DeleteFromCache bool `json:"delete_from_cache"`
}

func (req RemoveAllFilesFromDownloadsRequest) GetFunctionName() string {
	return "removeAllFilesFromDownloads"
}

// Removes all files from the file download list
func (client *Client) RemoveAllFilesFromDownloads(ctx context.Context, req *RemoveAllFilesFromDownloadsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SearchFileDownloadsRequest struct {
	request
	// Query to search for; may be empty to return all downloaded files
	Query string `json:"query"`
	// Pass true to search only for active downloads, including paused
	OnlyActive bool `json:"only_active"`
	// Pass true to search only for completed downloads
	OnlyCompleted bool `json:"only_completed"`
	// Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results
	Offset string `json:"offset"`
	// The maximum number of files to be returned
	Limit int32 `json:"limit"`
}

func (req SearchFileDownloadsRequest) GetFunctionName() string {
	return "searchFileDownloads"
}

// Searches for files in the file download list or recently downloaded files from the list
func (client *Client) SearchFileDownloads(ctx context.Context, req *SearchFileDownloadsRequest) (*FoundFileDownloads, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFoundFileDownloads(result.Data)
}

type SetApplicationVerificationTokenRequest struct {
	request
	// Unique identifier for the verification process as received from updateApplicationVerificationRequired or updateApplicationRecaptchaVerificationRequired
	VerificationId int64 `json:"verification_id"`
	// Play Integrity API token for the Android application, or secret from push notification for the iOS application for application verification, or reCAPTCHA token for reCAPTCHA verifications; pass an empty string to abort verification and receive error VERIFICATION_FAILED for the request
	Token string `json:"token"`
}

func (req SetApplicationVerificationTokenRequest) GetFunctionName() string {
	return "setApplicationVerificationToken"
}

// Application or reCAPTCHA verification has been completed. Can be called before authorization
func (client *Client) SetApplicationVerificationToken(ctx context.Context, req *SetApplicationVerificationTokenRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetMessageFileTypeRequest struct {
	request
	// Beginning of the message file; up to 100 first lines
	MessageFileHead string `json:"message_file_head"`
}

func (req GetMessageFileTypeRequest) GetFunctionName() string {
	return "getMessageFileType"
}

// Returns information about a file with messages exported from another application
func (client *Client) GetMessageFileType(ctx context.Context, req *GetMessageFileTypeRequest) (MessageFileType, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	switch result.MetaType {
	case ConstructorMessageFileTypePrivate:
		return UnmarshalMessageFileTypePrivate(result.Data)

	case ConstructorMessageFileTypeGroup:
		return UnmarshalMessageFileTypeGroup(result.Data)

	case ConstructorMessageFileTypeUnknown:
		return UnmarshalMessageFileTypeUnknown(result.Data)

	default:
		return nil, errors.New("invalid type")
	}
}

type GetMessageImportConfirmationTextRequest struct {
	request
	// Identifier of a chat to which the messages will be imported. It must be an identifier of a private chat with a mutual contact or an identifier of a supergroup chat with can_change_info member right
	ChatId int64 `json:"chat_id"`
}

func (req GetMessageImportConfirmationTextRequest) GetFunctionName() string {
	return "getMessageImportConfirmationText"
}

// Returns a confirmation text to be shown to the user before starting message import
func (client *Client) GetMessageImportConfirmationText(ctx context.Context, req *GetMessageImportConfirmationTextRequest) (*Text, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalText(result.Data)
}

type ImportMessagesRequest struct {
	request
	// Identifier of a chat to which the messages will be imported. It must be an identifier of a private chat with a mutual contact or an identifier of a supergroup chat with can_change_info member right
	ChatId int64 `json:"chat_id"`
	// File with messages to import. Only inputFileLocal and inputFileGenerated are supported. The file must not be previously uploaded
	MessageFile InputFile `json:"message_file"`
	// Files used in the imported messages. Only inputFileLocal and inputFileGenerated are supported. The files must not be previously uploaded
	AttachedFiles []InputFile `json:"attached_files"`
}

func (req ImportMessagesRequest) GetFunctionName() string {
	return "importMessages"
}

// Imports messages exported from another app
func (client *Client) ImportMessages(ctx context.Context, req *ImportMessagesRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ReplacePrimaryChatInviteLinkRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
}

func (req ReplacePrimaryChatInviteLinkRequest) GetFunctionName() string {
	return "replacePrimaryChatInviteLink"
}

// Replaces current primary invite link for a chat with a new primary invite link. Available for basic groups, supergroups, and channels. Requires administrator privileges and can_invite_users right
func (client *Client) ReplacePrimaryChatInviteLink(ctx context.Context, req *ReplacePrimaryChatInviteLinkRequest) (*ChatInviteLink, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatInviteLink(result.Data)
}

type CreateChatInviteLinkRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Invite link name; 0-32 characters
	Name string `json:"name"`
	// Point in time (Unix timestamp) when the link will expire; pass 0 if never
	ExpirationDate int32 `json:"expiration_date"`
	// The maximum number of chat members that can join the chat via the link simultaneously; 0-99999; pass 0 if not limited
	MemberLimit int32 `json:"member_limit"`
	// Pass true if users joining the chat via the link need to be approved by chat administrators. In this case, member_limit must be 0
	CreatesJoinRequest bool `json:"creates_join_request"`
}

func (req CreateChatInviteLinkRequest) GetFunctionName() string {
	return "createChatInviteLink"
}

// Creates a new invite link for a chat. Available for basic groups, supergroups, and channels. Requires administrator privileges and can_invite_users right in the chat
func (client *Client) CreateChatInviteLink(ctx context.Context, req *CreateChatInviteLinkRequest) (*ChatInviteLink, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatInviteLink(result.Data)
}

type CreateChatSubscriptionInviteLinkRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Invite link name; 0-32 characters
	Name string `json:"name"`
	// Information about subscription plan that will be applied to the users joining the chat via the link. Subscription period must be 2592000 in production environment, and 60 or 300 if Telegram test environment is used
	SubscriptionPricing *StarSubscriptionPricing `json:"subscription_pricing"`
}

func (req CreateChatSubscriptionInviteLinkRequest) GetFunctionName() string {
	return "createChatSubscriptionInviteLink"
}

// Creates a new subscription invite link for a channel chat. Requires can_invite_users right in the chat
func (client *Client) CreateChatSubscriptionInviteLink(ctx context.Context, req *CreateChatSubscriptionInviteLinkRequest) (*ChatInviteLink, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatInviteLink(result.Data)
}

type EditChatInviteLinkRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Invite link to be edited
	InviteLink string `json:"invite_link"`
	// Invite link name; 0-32 characters
	Name string `json:"name"`
	// Point in time (Unix timestamp) when the link will expire; pass 0 if never
	ExpirationDate int32 `json:"expiration_date"`
	// The maximum number of chat members that can join the chat via the link simultaneously; 0-99999; pass 0 if not limited
	MemberLimit int32 `json:"member_limit"`
	// Pass true if users joining the chat via the link need to be approved by chat administrators. In this case, member_limit must be 0
	CreatesJoinRequest bool `json:"creates_join_request"`
}

func (req EditChatInviteLinkRequest) GetFunctionName() string {
	return "editChatInviteLink"
}

// Edits a non-primary invite link for a chat. Available for basic groups, supergroups, and channels. If the link creates a subscription, then expiration_date, member_limit and creates_join_request must not be used. Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for other links
func (client *Client) EditChatInviteLink(ctx context.Context, req *EditChatInviteLinkRequest) (*ChatInviteLink, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatInviteLink(result.Data)
}

type EditChatSubscriptionInviteLinkRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Invite link to be edited
	InviteLink string `json:"invite_link"`
	// Invite link name; 0-32 characters
	Name string `json:"name"`
}

func (req EditChatSubscriptionInviteLinkRequest) GetFunctionName() string {
	return "editChatSubscriptionInviteLink"
}

// Edits a subscription invite link for a channel chat. Requires can_invite_users right in the chat for own links and owner privileges for other links
func (client *Client) EditChatSubscriptionInviteLink(ctx context.Context, req *EditChatSubscriptionInviteLinkRequest) (*ChatInviteLink, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatInviteLink(result.Data)
}

type GetChatInviteLinkRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Invite link to get
	InviteLink string `json:"invite_link"`
}

func (req GetChatInviteLinkRequest) GetFunctionName() string {
	return "getChatInviteLink"
}

// Returns information about an invite link. Requires administrator privileges and can_invite_users right in the chat to get own links and owner privileges to get other links
func (client *Client) GetChatInviteLink(ctx context.Context, req *GetChatInviteLinkRequest) (*ChatInviteLink, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatInviteLink(result.Data)
}

type GetChatInviteLinkCountsRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
}

func (req GetChatInviteLinkCountsRequest) GetFunctionName() string {
	return "getChatInviteLinkCounts"
}

// Returns the list of chat administrators with number of their invite links. Requires owner privileges in the chat
func (client *Client) GetChatInviteLinkCounts(ctx context.Context, req *GetChatInviteLinkCountsRequest) (*ChatInviteLinkCounts, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatInviteLinkCounts(result.Data)
}

type GetChatInviteLinksRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// User identifier of a chat administrator. Must be an identifier of the current user for non-owner
	CreatorUserId int64 `json:"creator_user_id"`
	// Pass true if revoked links needs to be returned instead of active or expired
	IsRevoked bool `json:"is_revoked"`
	// Creation date of an invite link starting after which to return invite links; use 0 to get results from the beginning
	OffsetDate int32 `json:"offset_date"`
	// Invite link starting after which to return invite links; use empty string to get results from the beginning
	OffsetInviteLink string `json:"offset_invite_link"`
	// The maximum number of invite links to return; up to 100
	Limit int32 `json:"limit"`
}

func (req GetChatInviteLinksRequest) GetFunctionName() string {
	return "getChatInviteLinks"
}

// Returns invite links for a chat created by specified administrator. Requires administrator privileges and can_invite_users right in the chat to get own links and owner privileges to get other links
func (client *Client) GetChatInviteLinks(ctx context.Context, req *GetChatInviteLinksRequest) (*ChatInviteLinks, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatInviteLinks(result.Data)
}

type GetChatInviteLinkMembersRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Invite link for which to return chat members
	InviteLink string `json:"invite_link"`
	// Pass true if the link is a subscription link and only members with expired subscription must be returned
	OnlyWithExpiredSubscription bool `json:"only_with_expired_subscription"`
	// A chat member from which to return next chat members; pass null to get results from the beginning
	OffsetMember *ChatInviteLinkMember `json:"offset_member"`
	// The maximum number of chat members to return; up to 100
	Limit int32 `json:"limit"`
}

func (req GetChatInviteLinkMembersRequest) GetFunctionName() string {
	return "getChatInviteLinkMembers"
}

// Returns chat members joined a chat via an invite link. Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for other links
func (client *Client) GetChatInviteLinkMembers(ctx context.Context, req *GetChatInviteLinkMembersRequest) (*ChatInviteLinkMembers, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatInviteLinkMembers(result.Data)
}

type RevokeChatInviteLinkRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Invite link to be revoked
	InviteLink string `json:"invite_link"`
}

func (req RevokeChatInviteLinkRequest) GetFunctionName() string {
	return "revokeChatInviteLink"
}

// Revokes invite link for a chat. Available for basic groups, supergroups, and channels. Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for other links. If a primary link is revoked, then additionally to the revoked link returns new primary link
func (client *Client) RevokeChatInviteLink(ctx context.Context, req *RevokeChatInviteLinkRequest) (*ChatInviteLinks, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatInviteLinks(result.Data)
}

type DeleteRevokedChatInviteLinkRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Invite link to revoke
	InviteLink string `json:"invite_link"`
}

func (req DeleteRevokedChatInviteLinkRequest) GetFunctionName() string {
	return "deleteRevokedChatInviteLink"
}

// Deletes revoked chat invite links. Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for other links
func (client *Client) DeleteRevokedChatInviteLink(ctx context.Context, req *DeleteRevokedChatInviteLinkRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type DeleteAllRevokedChatInviteLinksRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// User identifier of a chat administrator, which links will be deleted. Must be an identifier of the current user for non-owner
	CreatorUserId int64 `json:"creator_user_id"`
}

func (req DeleteAllRevokedChatInviteLinksRequest) GetFunctionName() string {
	return "deleteAllRevokedChatInviteLinks"
}

// Deletes all revoked chat invite links created by a given chat administrator. Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for other links
func (client *Client) DeleteAllRevokedChatInviteLinks(ctx context.Context, req *DeleteAllRevokedChatInviteLinksRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type CheckChatInviteLinkRequest struct {
	request
	// Invite link to be checked
	InviteLink string `json:"invite_link"`
}

func (req CheckChatInviteLinkRequest) GetFunctionName() string {
	return "checkChatInviteLink"
}

// Checks the validity of an invite link for a chat and returns information about the corresponding chat
func (client *Client) CheckChatInviteLink(ctx context.Context, req *CheckChatInviteLinkRequest) (*ChatInviteLinkInfo, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatInviteLinkInfo(result.Data)
}

type JoinChatByInviteLinkRequest struct {
	request
	// Invite link to use
	InviteLink string `json:"invite_link"`
}

func (req JoinChatByInviteLinkRequest) GetFunctionName() string {
	return "joinChatByInviteLink"
}

// Uses an invite link to add the current user to the chat if possible. May return an error with a message "INVITE_REQUEST_SENT" if only a join request was created
func (client *Client) JoinChatByInviteLink(ctx context.Context, req *JoinChatByInviteLinkRequest) (*Chat, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChat(result.Data)
}

type GetChatJoinRequestsRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Invite link for which to return join requests. If empty, all join requests will be returned. Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for other links
	InviteLink string `json:"invite_link"`
	// A query to search for in the first names, last names and usernames of the users to return
	Query string `json:"query"`
	// A chat join request from which to return next requests; pass null to get results from the beginning
	OffsetRequest *ChatJoinRequest `json:"offset_request"`
	// The maximum number of requests to join the chat to return
	Limit int32 `json:"limit"`
}

func (req GetChatJoinRequestsRequest) GetFunctionName() string {
	return "getChatJoinRequests"
}

// Returns pending join requests in a chat
func (client *Client) GetChatJoinRequests(ctx context.Context, req *GetChatJoinRequestsRequest) (*ChatJoinRequests, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatJoinRequests(result.Data)
}

type ProcessChatJoinRequestRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Identifier of the user that sent the request
	UserId int64 `json:"user_id"`
	// Pass true to approve the request; pass false to decline it
	Approve bool `json:"approve"`
}

func (req ProcessChatJoinRequestRequest) GetFunctionName() string {
	return "processChatJoinRequest"
}

// Handles a pending join request in a chat
func (client *Client) ProcessChatJoinRequest(ctx context.Context, req *ProcessChatJoinRequestRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ProcessChatJoinRequestsRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Invite link for which to process join requests. If empty, all join requests will be processed. Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for other links
	InviteLink string `json:"invite_link"`
	// Pass true to approve all requests; pass false to decline them
	Approve bool `json:"approve"`
}

func (req ProcessChatJoinRequestsRequest) GetFunctionName() string {
	return "processChatJoinRequests"
}

// Handles all pending join requests for a given link in a chat
func (client *Client) ProcessChatJoinRequests(ctx context.Context, req *ProcessChatJoinRequestsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type CreateCallRequest struct {
	request
	// Identifier of the user to be called
	UserId int64 `json:"user_id"`
	// The call protocols supported by the application
	Protocol *CallProtocol `json:"protocol"`
	// Pass true to create a video call
	IsVideo bool `json:"is_video"`
	// Identifier of the group call to which the user will be added after exchanging private key via the call; pass 0 if none
	GroupCallId int32 `json:"group_call_id"`
}

func (req CreateCallRequest) GetFunctionName() string {
	return "createCall"
}

// Creates a new call
func (client *Client) CreateCall(ctx context.Context, req *CreateCallRequest) (*CallId, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalCallId(result.Data)
}

type AcceptCallRequest struct {
	request
	// Call identifier
	CallId int32 `json:"call_id"`
	// The call protocols supported by the application
	Protocol *CallProtocol `json:"protocol"`
}

func (req AcceptCallRequest) GetFunctionName() string {
	return "acceptCall"
}

// Accepts an incoming call
func (client *Client) AcceptCall(ctx context.Context, req *AcceptCallRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SendCallSignalingDataRequest struct {
	request
	// Call identifier
	CallId int32 `json:"call_id"`
	// The data
	Data []byte `json:"data"`
}

func (req SendCallSignalingDataRequest) GetFunctionName() string {
	return "sendCallSignalingData"
}

// Sends call signaling data
func (client *Client) SendCallSignalingData(ctx context.Context, req *SendCallSignalingDataRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type DiscardCallRequest struct {
	request
	// Call identifier
	CallId int32 `json:"call_id"`
	// Pass true if the user was disconnected
	IsDisconnected bool `json:"is_disconnected"`
	// The call duration, in seconds
	Duration int32 `json:"duration"`
	// Pass true if the call was a video call
	IsVideo bool `json:"is_video"`
	// Identifier of the connection used during the call
	ConnectionId JsonInt64 `json:"connection_id"`
}

func (req DiscardCallRequest) GetFunctionName() string {
	return "discardCall"
}

// Discards a call
func (client *Client) DiscardCall(ctx context.Context, req *DiscardCallRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SendCallRatingRequest struct {
	request
	// Call identifier
	CallId int32 `json:"call_id"`
	// Call rating; 1-5
	Rating int32 `json:"rating"`
	// An optional user comment if the rating is less than 5
	Comment string `json:"comment"`
	// List of the exact types of problems with the call, specified by the user
	Problems []CallProblem `json:"problems"`
}

func (req SendCallRatingRequest) GetFunctionName() string {
	return "sendCallRating"
}

// Sends a call rating
func (client *Client) SendCallRating(ctx context.Context, req *SendCallRatingRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SendCallDebugInformationRequest struct {
	request
	// Call identifier
	CallId int32 `json:"call_id"`
	// Debug information in application-specific format
	DebugInformation string `json:"debug_information"`
}

func (req SendCallDebugInformationRequest) GetFunctionName() string {
	return "sendCallDebugInformation"
}

// Sends debug information for a call to Telegram servers
func (client *Client) SendCallDebugInformation(ctx context.Context, req *SendCallDebugInformationRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SendCallLogRequest struct {
	request
	// Call identifier
	CallId int32 `json:"call_id"`
	// Call log file. Only inputFileLocal and inputFileGenerated are supported
	LogFile InputFile `json:"log_file"`
}

func (req SendCallLogRequest) GetFunctionName() string {
	return "sendCallLog"
}

// Sends log file for a call to Telegram servers
func (client *Client) SendCallLog(ctx context.Context, req *SendCallLogRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetVideoChatAvailableParticipantsRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
}

func (req GetVideoChatAvailableParticipantsRequest) GetFunctionName() string {
	return "getVideoChatAvailableParticipants"
}

// Returns the list of participant identifiers, on whose behalf a video chat in the chat can be joined
func (client *Client) GetVideoChatAvailableParticipants(ctx context.Context, req *GetVideoChatAvailableParticipantsRequest) (*MessageSenders, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessageSenders(result.Data)
}

type SetVideoChatDefaultParticipantRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Default group call participant identifier to join the video chats
	DefaultParticipantId MessageSender `json:"default_participant_id"`
}

func (req SetVideoChatDefaultParticipantRequest) GetFunctionName() string {
	return "setVideoChatDefaultParticipant"
}

// Changes default participant identifier, on whose behalf a video chat in the chat will be joined
func (client *Client) SetVideoChatDefaultParticipant(ctx context.Context, req *SetVideoChatDefaultParticipantRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type CreateVideoChatRequest struct {
	request
	// Identifier of a chat in which the video chat will be created
	ChatId int64 `json:"chat_id"`
	// Group call title; if empty, chat title will be used
	Title string `json:"title"`
	// Point in time (Unix timestamp) when the group call is expected to be started by an administrator; 0 to start the video chat immediately. The date must be at least 10 seconds and at most 8 days in the future
	StartDate int32 `json:"start_date"`
	// Pass true to create an RTMP stream instead of an ordinary video chat
	IsRtmpStream bool `json:"is_rtmp_stream"`
}

func (req CreateVideoChatRequest) GetFunctionName() string {
	return "createVideoChat"
}

// Creates a video chat (a group call bound to a chat). Available only for basic groups, supergroups and channels; requires can_manage_video_chats administrator right
func (client *Client) CreateVideoChat(ctx context.Context, req *CreateVideoChatRequest) (*GroupCallId, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalGroupCallId(result.Data)
}

type CreateGroupCallRequest struct {
	request
	// Call identifier
	CallId int32 `json:"call_id"`
}

func (req CreateGroupCallRequest) GetFunctionName() string {
	return "createGroupCall"
}

// Creates a group call from a one-to-one call
func (client *Client) CreateGroupCall(ctx context.Context, req *CreateGroupCallRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetVideoChatRtmpUrlRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
}

func (req GetVideoChatRtmpUrlRequest) GetFunctionName() string {
	return "getVideoChatRtmpUrl"
}

// Returns RTMP URL for streaming to the chat; requires can_manage_video_chats administrator right
func (client *Client) GetVideoChatRtmpUrl(ctx context.Context, req *GetVideoChatRtmpUrlRequest) (*RtmpUrl, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalRtmpUrl(result.Data)
}

type ReplaceVideoChatRtmpUrlRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
}

func (req ReplaceVideoChatRtmpUrlRequest) GetFunctionName() string {
	return "replaceVideoChatRtmpUrl"
}

// Replaces the current RTMP URL for streaming to the chat; requires owner privileges
func (client *Client) ReplaceVideoChatRtmpUrl(ctx context.Context, req *ReplaceVideoChatRtmpUrlRequest) (*RtmpUrl, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalRtmpUrl(result.Data)
}

type GetGroupCallRequest struct {
	request
	// Group call identifier
	GroupCallId int32 `json:"group_call_id"`
}

func (req GetGroupCallRequest) GetFunctionName() string {
	return "getGroupCall"
}

// Returns information about a group call
func (client *Client) GetGroupCall(ctx context.Context, req *GetGroupCallRequest) (*GroupCall, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalGroupCall(result.Data)
}

type StartScheduledGroupCallRequest struct {
	request
	// Group call identifier
	GroupCallId int32 `json:"group_call_id"`
}

func (req StartScheduledGroupCallRequest) GetFunctionName() string {
	return "startScheduledGroupCall"
}

// Starts a scheduled group call
func (client *Client) StartScheduledGroupCall(ctx context.Context, req *StartScheduledGroupCallRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleGroupCallEnabledStartNotificationRequest struct {
	request
	// Group call identifier
	GroupCallId int32 `json:"group_call_id"`
	// New value of the enabled_start_notification setting
	EnabledStartNotification bool `json:"enabled_start_notification"`
}

func (req ToggleGroupCallEnabledStartNotificationRequest) GetFunctionName() string {
	return "toggleGroupCallEnabledStartNotification"
}

// Toggles whether the current user will receive a notification when the group call starts; scheduled group calls only
func (client *Client) ToggleGroupCallEnabledStartNotification(ctx context.Context, req *ToggleGroupCallEnabledStartNotificationRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type JoinGroupCallRequest struct {
	request
	// Group call identifier
	GroupCallId int32 `json:"group_call_id"`
	// Identifier of a group call participant, which will be used to join the call; pass null to join as self; video chats only
	ParticipantId MessageSender `json:"participant_id"`
	// Caller audio channel synchronization source identifier; received from tgcalls
	AudioSourceId int32 `json:"audio_source_id"`
	// Group call join payload; received from tgcalls
	Payload string `json:"payload"`
	// Pass true to join the call with muted microphone
	IsMuted bool `json:"is_muted"`
	// Pass true if the user's video is enabled
	IsMyVideoEnabled bool `json:"is_my_video_enabled"`
	// If non-empty, invite hash to be used to join the group call without being muted by administrators
	InviteHash string `json:"invite_hash"`
	// Fingerprint of the encryption key for E2E group calls not bound to a chat; pass 0 for voice chats
	KeyFingerprint JsonInt64 `json:"key_fingerprint"`
}

func (req JoinGroupCallRequest) GetFunctionName() string {
	return "joinGroupCall"
}

// Joins an active group call. Returns join response payload for tgcalls
func (client *Client) JoinGroupCall(ctx context.Context, req *JoinGroupCallRequest) (*Text, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalText(result.Data)
}

type StartGroupCallScreenSharingRequest struct {
	request
	// Group call identifier
	GroupCallId int32 `json:"group_call_id"`
	// Screen sharing audio channel synchronization source identifier; received from tgcalls
	AudioSourceId int32 `json:"audio_source_id"`
	// Group call join payload; received from tgcalls
	Payload string `json:"payload"`
}

func (req StartGroupCallScreenSharingRequest) GetFunctionName() string {
	return "startGroupCallScreenSharing"
}

// Starts screen sharing in a joined group call. Returns join response payload for tgcalls
func (client *Client) StartGroupCallScreenSharing(ctx context.Context, req *StartGroupCallScreenSharingRequest) (*Text, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalText(result.Data)
}

type ToggleGroupCallScreenSharingIsPausedRequest struct {
	request
	// Group call identifier
	GroupCallId int32 `json:"group_call_id"`
	// Pass true to pause screen sharing; pass false to unpause it
	IsPaused bool `json:"is_paused"`
}

func (req ToggleGroupCallScreenSharingIsPausedRequest) GetFunctionName() string {
	return "toggleGroupCallScreenSharingIsPaused"
}

// Pauses or unpauses screen sharing in a joined group call
func (client *Client) ToggleGroupCallScreenSharingIsPaused(ctx context.Context, req *ToggleGroupCallScreenSharingIsPausedRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type EndGroupCallScreenSharingRequest struct {
	request
	// Group call identifier
	GroupCallId int32 `json:"group_call_id"`
}

func (req EndGroupCallScreenSharingRequest) GetFunctionName() string {
	return "endGroupCallScreenSharing"
}

// Ends screen sharing in a joined group call
func (client *Client) EndGroupCallScreenSharing(ctx context.Context, req *EndGroupCallScreenSharingRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetGroupCallTitleRequest struct {
	request
	// Group call identifier
	GroupCallId int32 `json:"group_call_id"`
	// New group call title; 1-64 characters
	Title string `json:"title"`
}

func (req SetGroupCallTitleRequest) GetFunctionName() string {
	return "setGroupCallTitle"
}

// Sets group call title. Requires groupCall.can_be_managed group call flag
func (client *Client) SetGroupCallTitle(ctx context.Context, req *SetGroupCallTitleRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleGroupCallMuteNewParticipantsRequest struct {
	request
	// Group call identifier
	GroupCallId int32 `json:"group_call_id"`
	// New value of the mute_new_participants setting
	MuteNewParticipants bool `json:"mute_new_participants"`
}

func (req ToggleGroupCallMuteNewParticipantsRequest) GetFunctionName() string {
	return "toggleGroupCallMuteNewParticipants"
}

// Toggles whether new participants of a group call can be unmuted only by administrators of the group call. Requires groupCall.can_toggle_mute_new_participants group call flag
func (client *Client) ToggleGroupCallMuteNewParticipants(ctx context.Context, req *ToggleGroupCallMuteNewParticipantsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type InviteGroupCallParticipantsRequest struct {
	request
	// Group call identifier
	GroupCallId int32 `json:"group_call_id"`
	// User identifiers. At most 10 users can be invited simultaneously
	UserIds []int64 `json:"user_ids"`
}

func (req InviteGroupCallParticipantsRequest) GetFunctionName() string {
	return "inviteGroupCallParticipants"
}

// Invites users to an active group call. Sends a service message of type messageInviteVideoChatParticipants for video chats
func (client *Client) InviteGroupCallParticipants(ctx context.Context, req *InviteGroupCallParticipantsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetGroupCallInviteLinkRequest struct {
	request
	// Group call identifier
	GroupCallId int32 `json:"group_call_id"`
	// Pass true if the invite link needs to contain an invite hash, passing which to joinGroupCall would allow the invited user to unmute themselves. Requires groupCall.can_be_managed group call flag
	CanSelfUnmute bool `json:"can_self_unmute"`
}

func (req GetGroupCallInviteLinkRequest) GetFunctionName() string {
	return "getGroupCallInviteLink"
}

// Returns invite link to a video chat in a public chat
func (client *Client) GetGroupCallInviteLink(ctx context.Context, req *GetGroupCallInviteLinkRequest) (*HttpUrl, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalHttpUrl(result.Data)
}

type RevokeGroupCallInviteLinkRequest struct {
	request
	// Group call identifier
	GroupCallId int32 `json:"group_call_id"`
}

func (req RevokeGroupCallInviteLinkRequest) GetFunctionName() string {
	return "revokeGroupCallInviteLink"
}

// Revokes invite link for a group call. Requires groupCall.can_be_managed group call flag
func (client *Client) RevokeGroupCallInviteLink(ctx context.Context, req *RevokeGroupCallInviteLinkRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type StartGroupCallRecordingRequest struct {
	request
	// Group call identifier
	GroupCallId int32 `json:"group_call_id"`
	// Group call recording title; 0-64 characters
	Title string `json:"title"`
	// Pass true to record a video file instead of an audio file
	RecordVideo bool `json:"record_video"`
	// Pass true to use portrait orientation for video instead of landscape one
	UsePortraitOrientation bool `json:"use_portrait_orientation"`
}

func (req StartGroupCallRecordingRequest) GetFunctionName() string {
	return "startGroupCallRecording"
}

// Starts recording of an active group call. Requires groupCall.can_be_managed group call flag
func (client *Client) StartGroupCallRecording(ctx context.Context, req *StartGroupCallRecordingRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type EndGroupCallRecordingRequest struct {
	request
	// Group call identifier
	GroupCallId int32 `json:"group_call_id"`
}

func (req EndGroupCallRecordingRequest) GetFunctionName() string {
	return "endGroupCallRecording"
}

// Ends recording of an active group call. Requires groupCall.can_be_managed group call flag
func (client *Client) EndGroupCallRecording(ctx context.Context, req *EndGroupCallRecordingRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleGroupCallIsMyVideoPausedRequest struct {
	request
	// Group call identifier
	GroupCallId int32 `json:"group_call_id"`
	// Pass true if the current user's video is paused
	IsMyVideoPaused bool `json:"is_my_video_paused"`
}

func (req ToggleGroupCallIsMyVideoPausedRequest) GetFunctionName() string {
	return "toggleGroupCallIsMyVideoPaused"
}

// Toggles whether current user's video is paused
func (client *Client) ToggleGroupCallIsMyVideoPaused(ctx context.Context, req *ToggleGroupCallIsMyVideoPausedRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleGroupCallIsMyVideoEnabledRequest struct {
	request
	// Group call identifier
	GroupCallId int32 `json:"group_call_id"`
	// Pass true if the current user's video is enabled
	IsMyVideoEnabled bool `json:"is_my_video_enabled"`
}

func (req ToggleGroupCallIsMyVideoEnabledRequest) GetFunctionName() string {
	return "toggleGroupCallIsMyVideoEnabled"
}

// Toggles whether current user's video is enabled
func (client *Client) ToggleGroupCallIsMyVideoEnabled(ctx context.Context, req *ToggleGroupCallIsMyVideoEnabledRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetGroupCallParticipantIsSpeakingRequest struct {
	request
	// Group call identifier
	GroupCallId int32 `json:"group_call_id"`
	// Group call participant's synchronization audio source identifier, or 0 for the current user
	AudioSource int32 `json:"audio_source"`
	// Pass true if the user is speaking
	IsSpeaking bool `json:"is_speaking"`
}

func (req SetGroupCallParticipantIsSpeakingRequest) GetFunctionName() string {
	return "setGroupCallParticipantIsSpeaking"
}

// Informs TDLib that speaking state of a participant of an active group has changed
func (client *Client) SetGroupCallParticipantIsSpeaking(ctx context.Context, req *SetGroupCallParticipantIsSpeakingRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleGroupCallParticipantIsMutedRequest struct {
	request
	// Group call identifier
	GroupCallId int32 `json:"group_call_id"`
	// Participant identifier
	ParticipantId MessageSender `json:"participant_id"`
	// Pass true to mute the user; pass false to unmute them
	IsMuted bool `json:"is_muted"`
}

func (req ToggleGroupCallParticipantIsMutedRequest) GetFunctionName() string {
	return "toggleGroupCallParticipantIsMuted"
}

// Toggles whether a participant of an active group call is muted, unmuted, or allowed to unmute themselves
func (client *Client) ToggleGroupCallParticipantIsMuted(ctx context.Context, req *ToggleGroupCallParticipantIsMutedRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetGroupCallParticipantVolumeLevelRequest struct {
	request
	// Group call identifier
	GroupCallId int32 `json:"group_call_id"`
	// Participant identifier
	ParticipantId MessageSender `json:"participant_id"`
	// New participant's volume level; 1-20000 in hundreds of percents
	VolumeLevel int32 `json:"volume_level"`
}

func (req SetGroupCallParticipantVolumeLevelRequest) GetFunctionName() string {
	return "setGroupCallParticipantVolumeLevel"
}

// Changes volume level of a participant of an active group call. If the current user can manage the group call, then the participant's volume level will be changed for all users with the default volume level
func (client *Client) SetGroupCallParticipantVolumeLevel(ctx context.Context, req *SetGroupCallParticipantVolumeLevelRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleGroupCallParticipantIsHandRaisedRequest struct {
	request
	// Group call identifier
	GroupCallId int32 `json:"group_call_id"`
	// Participant identifier
	ParticipantId MessageSender `json:"participant_id"`
	// Pass true if the user's hand needs to be raised. Only self hand can be raised. Requires groupCall.can_be_managed group call flag to lower other's hand
	IsHandRaised bool `json:"is_hand_raised"`
}

func (req ToggleGroupCallParticipantIsHandRaisedRequest) GetFunctionName() string {
	return "toggleGroupCallParticipantIsHandRaised"
}

// Toggles whether a group call participant hand is rased
func (client *Client) ToggleGroupCallParticipantIsHandRaised(ctx context.Context, req *ToggleGroupCallParticipantIsHandRaisedRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type LoadGroupCallParticipantsRequest struct {
	request
	// Group call identifier. The group call must be previously received through getGroupCall and must be joined or being joined
	GroupCallId int32 `json:"group_call_id"`
	// The maximum number of participants to load; up to 100
	Limit int32 `json:"limit"`
}

func (req LoadGroupCallParticipantsRequest) GetFunctionName() string {
	return "loadGroupCallParticipants"
}

// Loads more participants of a group call. The loaded participants will be received through updates. Use the field groupCall.loaded_all_participants to check whether all participants have already been loaded
func (client *Client) LoadGroupCallParticipants(ctx context.Context, req *LoadGroupCallParticipantsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type LeaveGroupCallRequest struct {
	request
	// Group call identifier
	GroupCallId int32 `json:"group_call_id"`
}

func (req LeaveGroupCallRequest) GetFunctionName() string {
	return "leaveGroupCall"
}

// Leaves a group call
func (client *Client) LeaveGroupCall(ctx context.Context, req *LeaveGroupCallRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type EndGroupCallRequest struct {
	request
	// Group call identifier
	GroupCallId int32 `json:"group_call_id"`
}

func (req EndGroupCallRequest) GetFunctionName() string {
	return "endGroupCall"
}

// Ends a group call. Requires groupCall.can_be_managed
func (client *Client) EndGroupCall(ctx context.Context, req *EndGroupCallRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetGroupCallStreamsRequest struct {
	request
	// Group call identifier
	GroupCallId int32 `json:"group_call_id"`
}

func (req GetGroupCallStreamsRequest) GetFunctionName() string {
	return "getGroupCallStreams"
}

// Returns information about available group call streams
func (client *Client) GetGroupCallStreams(ctx context.Context, req *GetGroupCallStreamsRequest) (*GroupCallStreams, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalGroupCallStreams(result.Data)
}

type GetGroupCallStreamSegmentRequest struct {
	request
	// Group call identifier
	GroupCallId int32 `json:"group_call_id"`
	// Point in time when the stream segment begins; Unix timestamp in milliseconds
	TimeOffset int64 `json:"time_offset"`
	// Segment duration scale; 0-1. Segment's duration is 1000/(2**scale) milliseconds
	Scale int32 `json:"scale"`
	// Identifier of an audio/video channel to get as received from tgcalls
	ChannelId int32 `json:"channel_id"`
	// Video quality as received from tgcalls; pass null to get the worst available quality
	VideoQuality GroupCallVideoQuality `json:"video_quality"`
}

func (req GetGroupCallStreamSegmentRequest) GetFunctionName() string {
	return "getGroupCallStreamSegment"
}

// Returns a file with a segment of a group call stream in a modified OGG format for audio or MPEG-4 format for video
func (client *Client) GetGroupCallStreamSegment(ctx context.Context, req *GetGroupCallStreamSegmentRequest) (*FilePart, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFilePart(result.Data)
}

type SetMessageSenderBlockListRequest struct {
	request
	// Identifier of a message sender to block/unblock
	SenderId MessageSender `json:"sender_id"`
	// New block list for the message sender; pass null to unblock the message sender
	BlockList BlockList `json:"block_list"`
}

func (req SetMessageSenderBlockListRequest) GetFunctionName() string {
	return "setMessageSenderBlockList"
}

// Changes the block list of a message sender. Currently, only users and supergroup chats can be blocked
func (client *Client) SetMessageSenderBlockList(ctx context.Context, req *SetMessageSenderBlockListRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type BlockMessageSenderFromRepliesRequest struct {
	request
	// The identifier of an incoming message in the Replies chat
	MessageId int64 `json:"message_id"`
	// Pass true to delete the message
	DeleteMessage bool `json:"delete_message"`
	// Pass true to delete all messages from the same sender
	DeleteAllMessages bool `json:"delete_all_messages"`
	// Pass true to report the sender to the Telegram moderators
	ReportSpam bool `json:"report_spam"`
}

func (req BlockMessageSenderFromRepliesRequest) GetFunctionName() string {
	return "blockMessageSenderFromReplies"
}

// Blocks an original sender of a message in the Replies chat
func (client *Client) BlockMessageSenderFromReplies(ctx context.Context, req *BlockMessageSenderFromRepliesRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetBlockedMessageSendersRequest struct {
	request
	// Block list from which to return users
	BlockList BlockList `json:"block_list"`
	// Number of users and chats to skip in the result; must be non-negative
	Offset int32 `json:"offset"`
	// The maximum number of users and chats to return; up to 100
	Limit int32 `json:"limit"`
}

func (req GetBlockedMessageSendersRequest) GetFunctionName() string {
	return "getBlockedMessageSenders"
}

// Returns users and chats that were blocked by the current user
func (client *Client) GetBlockedMessageSenders(ctx context.Context, req *GetBlockedMessageSendersRequest) (*MessageSenders, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessageSenders(result.Data)
}

type AddContactRequest struct {
	request
	// The contact to add or edit; phone number may be empty and needs to be specified only if known, vCard is ignored
	Contact *Contact `json:"contact"`
	// Pass true to share the current user's phone number with the new contact. A corresponding rule to userPrivacySettingShowPhoneNumber will be added if needed. Use the field userFullInfo.need_phone_number_privacy_exception to check whether the current user needs to be asked to share their phone number
	SharePhoneNumber bool `json:"share_phone_number"`
}

func (req AddContactRequest) GetFunctionName() string {
	return "addContact"
}

// Adds a user to the contact list or edits an existing contact by their user identifier
func (client *Client) AddContact(ctx context.Context, req *AddContactRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ImportContactsRequest struct {
	request
	// The list of contacts to import or edit; contacts' vCard are ignored and are not imported
	Contacts []*Contact `json:"contacts"`
}

func (req ImportContactsRequest) GetFunctionName() string {
	return "importContacts"
}

// Adds new contacts or edits existing contacts by their phone numbers; contacts' user identifiers are ignored
func (client *Client) ImportContacts(ctx context.Context, req *ImportContactsRequest) (*ImportedContacts, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalImportedContacts(result.Data)
}

type GetContactsRequest struct {
	request
}

func (req GetContactsRequest) GetFunctionName() string {
	return "getContacts"
}

// Returns all contacts of the user
func (client *Client) GetContacts(ctx context.Context) (*Users, error) {
	req := &GetContactsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalUsers(result.Data)
}

type SearchContactsRequest struct {
	request
	// Query to search for; may be empty to return all contacts
	Query string `json:"query"`
	// The maximum number of users to be returned
	Limit int32 `json:"limit"`
}

func (req SearchContactsRequest) GetFunctionName() string {
	return "searchContacts"
}

// Searches for the specified query in the first names, last names and usernames of the known user contacts
func (client *Client) SearchContacts(ctx context.Context, req *SearchContactsRequest) (*Users, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalUsers(result.Data)
}

type RemoveContactsRequest struct {
	request
	// Identifiers of users to be deleted
	UserIds []int64 `json:"user_ids"`
}

func (req RemoveContactsRequest) GetFunctionName() string {
	return "removeContacts"
}

// Removes users from the contact list
func (client *Client) RemoveContacts(ctx context.Context, req *RemoveContactsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetImportedContactCountRequest struct {
	request
}

func (req GetImportedContactCountRequest) GetFunctionName() string {
	return "getImportedContactCount"
}

// Returns the total number of imported contacts
func (client *Client) GetImportedContactCount(ctx context.Context) (*Count, error) {
	req := &GetImportedContactCountRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalCount(result.Data)
}

type ChangeImportedContactsRequest struct {
	request
	// The new list of contacts, contact's vCard are ignored and are not imported
	Contacts []*Contact `json:"contacts"`
}

func (req ChangeImportedContactsRequest) GetFunctionName() string {
	return "changeImportedContacts"
}

// Changes imported contacts using the list of contacts saved on the device. Imports newly added contacts and, if at least the file database is enabled, deletes recently deleted contacts. Query result depends on the result of the previous query, so only one query is possible at the same time
func (client *Client) ChangeImportedContacts(ctx context.Context, req *ChangeImportedContactsRequest) (*ImportedContacts, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalImportedContacts(result.Data)
}

type ClearImportedContactsRequest struct {
	request
}

func (req ClearImportedContactsRequest) GetFunctionName() string {
	return "clearImportedContacts"
}

// Clears all imported contacts, contact list remains unchanged
func (client *Client) ClearImportedContacts(ctx context.Context) (*Ok, error) {
	req := &ClearImportedContactsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetCloseFriendsRequest struct {
	request
	// User identifiers of close friends; the users must be contacts of the current user
	UserIds []int64 `json:"user_ids"`
}

func (req SetCloseFriendsRequest) GetFunctionName() string {
	return "setCloseFriends"
}

// Changes the list of close friends of the current user
func (client *Client) SetCloseFriends(ctx context.Context, req *SetCloseFriendsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetCloseFriendsRequest struct {
	request
}

func (req GetCloseFriendsRequest) GetFunctionName() string {
	return "getCloseFriends"
}

// Returns all close friends of the current user
func (client *Client) GetCloseFriends(ctx context.Context) (*Users, error) {
	req := &GetCloseFriendsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalUsers(result.Data)
}

type SetUserPersonalProfilePhotoRequest struct {
	request
	// User identifier
	UserId int64 `json:"user_id"`
	// Profile photo to set; pass null to delete the photo; inputChatPhotoPrevious isn't supported in this function
	Photo InputChatPhoto `json:"photo"`
}

func (req SetUserPersonalProfilePhotoRequest) GetFunctionName() string {
	return "setUserPersonalProfilePhoto"
}

// Changes a personal profile photo of a contact user
func (client *Client) SetUserPersonalProfilePhoto(ctx context.Context, req *SetUserPersonalProfilePhotoRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SuggestUserProfilePhotoRequest struct {
	request
	// User identifier
	UserId int64 `json:"user_id"`
	// Profile photo to suggest; inputChatPhotoPrevious isn't supported in this function
	Photo InputChatPhoto `json:"photo"`
}

func (req SuggestUserProfilePhotoRequest) GetFunctionName() string {
	return "suggestUserProfilePhoto"
}

// Suggests a profile photo to another regular user with common messages and allowing non-paid messages
func (client *Client) SuggestUserProfilePhoto(ctx context.Context, req *SuggestUserProfilePhotoRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleBotCanManageEmojiStatusRequest struct {
	request
	// User identifier of the bot
	BotUserId int64 `json:"bot_user_id"`
	// Pass true if the bot is allowed to change emoji status of the user; pass false otherwise
	CanManageEmojiStatus bool `json:"can_manage_emoji_status"`
}

func (req ToggleBotCanManageEmojiStatusRequest) GetFunctionName() string {
	return "toggleBotCanManageEmojiStatus"
}

// Toggles whether the bot can manage emoji status of the current user
func (client *Client) ToggleBotCanManageEmojiStatus(ctx context.Context, req *ToggleBotCanManageEmojiStatusRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetUserEmojiStatusRequest struct {
	request
	// Identifier of the user
	UserId int64 `json:"user_id"`
	// New emoji status; pass null to switch to the default badge
	EmojiStatus *EmojiStatus `json:"emoji_status"`
}

func (req SetUserEmojiStatusRequest) GetFunctionName() string {
	return "setUserEmojiStatus"
}

// Changes the emoji status of a user; for bots only
func (client *Client) SetUserEmojiStatus(ctx context.Context, req *SetUserEmojiStatusRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SearchUserByPhoneNumberRequest struct {
	request
	// Phone number to search for
	PhoneNumber string `json:"phone_number"`
	// Pass true to get only locally available information without sending network requests
	OnlyLocal bool `json:"only_local"`
}

func (req SearchUserByPhoneNumberRequest) GetFunctionName() string {
	return "searchUserByPhoneNumber"
}

// Searches a user by their phone number. Returns a 404 error if the user can't be found
func (client *Client) SearchUserByPhoneNumber(ctx context.Context, req *SearchUserByPhoneNumberRequest) (*User, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalUser(result.Data)
}

type SharePhoneNumberRequest struct {
	request
	// Identifier of the user with whom to share the phone number. The user must be a mutual contact
	UserId int64 `json:"user_id"`
}

func (req SharePhoneNumberRequest) GetFunctionName() string {
	return "sharePhoneNumber"
}

// Shares the phone number of the current user with a mutual contact. Supposed to be called when the user clicks on chatActionBarSharePhoneNumber
func (client *Client) SharePhoneNumber(ctx context.Context, req *SharePhoneNumberRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetUserProfilePhotosRequest struct {
	request
	// User identifier
	UserId int64 `json:"user_id"`
	// The number of photos to skip; must be non-negative
	Offset int32 `json:"offset"`
	// The maximum number of photos to be returned; up to 100
	Limit int32 `json:"limit"`
}

func (req GetUserProfilePhotosRequest) GetFunctionName() string {
	return "getUserProfilePhotos"
}

// Returns the profile photos of a user. Personal and public photo aren't returned
func (client *Client) GetUserProfilePhotos(ctx context.Context, req *GetUserProfilePhotosRequest) (*ChatPhotos, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatPhotos(result.Data)
}

type GetStickerOutlineRequest struct {
	request
	// File identifier of the sticker
	StickerFileId int32 `json:"sticker_file_id"`
	// Pass true to get the outline scaled for animated emoji
	ForAnimatedEmoji bool `json:"for_animated_emoji"`
	// Pass true to get the outline scaled for clicked animated emoji message
	ForClickedAnimatedEmojiMessage bool `json:"for_clicked_animated_emoji_message"`
}

func (req GetStickerOutlineRequest) GetFunctionName() string {
	return "getStickerOutline"
}

// Returns outline of a sticker. This is an offline method. Returns a 404 error if the outline isn't known
func (client *Client) GetStickerOutline(ctx context.Context, req *GetStickerOutlineRequest) (*Outline, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOutline(result.Data)
}

type GetStickersRequest struct {
	request
	// Type of the stickers to return
	StickerType StickerType `json:"sticker_type"`
	// Search query; a space-separated list of emojis or a keyword prefix. If empty, returns all known installed stickers
	Query string `json:"query"`
	// The maximum number of stickers to be returned
	Limit int32 `json:"limit"`
	// Chat identifier for which to return stickers. Available custom emoji stickers may be different for different chats
	ChatId int64 `json:"chat_id"`
}

func (req GetStickersRequest) GetFunctionName() string {
	return "getStickers"
}

// Returns stickers from the installed sticker sets that correspond to any of the given emoji or can be found by sticker-specific keywords. If the query is non-empty, then favorite, recently used or trending stickers may also be returned
func (client *Client) GetStickers(ctx context.Context, req *GetStickersRequest) (*Stickers, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStickers(result.Data)
}

type GetAllStickerEmojisRequest struct {
	request
	// Type of the stickers to search for
	StickerType StickerType `json:"sticker_type"`
	// Search query
	Query string `json:"query"`
	// Chat identifier for which to find stickers
	ChatId int64 `json:"chat_id"`
	// Pass true if only main emoji for each found sticker must be included in the result
	ReturnOnlyMainEmoji bool `json:"return_only_main_emoji"`
}

func (req GetAllStickerEmojisRequest) GetFunctionName() string {
	return "getAllStickerEmojis"
}

// Returns unique emoji that correspond to stickers to be found by the getStickers(sticker_type, query, 1000000, chat_id)
func (client *Client) GetAllStickerEmojis(ctx context.Context, req *GetAllStickerEmojisRequest) (*Emojis, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalEmojis(result.Data)
}

type SearchStickersRequest struct {
	request
	// Type of the stickers to return
	StickerType StickerType `json:"sticker_type"`
	// Space-separated list of emojis to search for
	Emojis string `json:"emojis"`
	// Query to search for; may be empty to search for emoji only
	Query string `json:"query"`
	// List of possible IETF language tags of the user's input language; may be empty if unknown
	InputLanguageCodes []string `json:"input_language_codes"`
	// The offset from which to return the stickers; must be non-negative
	Offset int32 `json:"offset"`
	// The maximum number of stickers to be returned; 0-100
	Limit int32 `json:"limit"`
}

func (req SearchStickersRequest) GetFunctionName() string {
	return "searchStickers"
}

// Searches for stickers from public sticker sets that correspond to any of the given emoji
func (client *Client) SearchStickers(ctx context.Context, req *SearchStickersRequest) (*Stickers, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStickers(result.Data)
}

type GetGreetingStickersRequest struct {
	request
}

func (req GetGreetingStickersRequest) GetFunctionName() string {
	return "getGreetingStickers"
}

// Returns greeting stickers from regular sticker sets that can be used for the start page of other users
func (client *Client) GetGreetingStickers(ctx context.Context) (*Stickers, error) {
	req := &GetGreetingStickersRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStickers(result.Data)
}

type GetPremiumStickersRequest struct {
	request
	// The maximum number of stickers to be returned; 0-100
	Limit int32 `json:"limit"`
}

func (req GetPremiumStickersRequest) GetFunctionName() string {
	return "getPremiumStickers"
}

// Returns premium stickers from regular sticker sets
func (client *Client) GetPremiumStickers(ctx context.Context, req *GetPremiumStickersRequest) (*Stickers, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStickers(result.Data)
}

type GetInstalledStickerSetsRequest struct {
	request
	// Type of the sticker sets to return
	StickerType StickerType `json:"sticker_type"`
}

func (req GetInstalledStickerSetsRequest) GetFunctionName() string {
	return "getInstalledStickerSets"
}

// Returns a list of installed sticker sets
func (client *Client) GetInstalledStickerSets(ctx context.Context, req *GetInstalledStickerSetsRequest) (*StickerSets, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStickerSets(result.Data)
}

type GetArchivedStickerSetsRequest struct {
	request
	// Type of the sticker sets to return
	StickerType StickerType `json:"sticker_type"`
	// Identifier of the sticker set from which to return the result; use 0 to get results from the beginning
	OffsetStickerSetId JsonInt64 `json:"offset_sticker_set_id"`
	// The maximum number of sticker sets to return; up to 100
	Limit int32 `json:"limit"`
}

func (req GetArchivedStickerSetsRequest) GetFunctionName() string {
	return "getArchivedStickerSets"
}

// Returns a list of archived sticker sets
func (client *Client) GetArchivedStickerSets(ctx context.Context, req *GetArchivedStickerSetsRequest) (*StickerSets, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStickerSets(result.Data)
}

type GetTrendingStickerSetsRequest struct {
	request
	// Type of the sticker sets to return
	StickerType StickerType `json:"sticker_type"`
	// The offset from which to return the sticker sets; must be non-negative
	Offset int32 `json:"offset"`
	// The maximum number of sticker sets to be returned; up to 100. For optimal performance, the number of returned sticker sets is chosen by TDLib and can be smaller than the specified limit, even if the end of the list has not been reached
	Limit int32 `json:"limit"`
}

func (req GetTrendingStickerSetsRequest) GetFunctionName() string {
	return "getTrendingStickerSets"
}

// Returns a list of trending sticker sets. For optimal performance, the number of returned sticker sets is chosen by TDLib
func (client *Client) GetTrendingStickerSets(ctx context.Context, req *GetTrendingStickerSetsRequest) (*TrendingStickerSets, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalTrendingStickerSets(result.Data)
}

type GetAttachedStickerSetsRequest struct {
	request
	// File identifier
	FileId int32 `json:"file_id"`
}

func (req GetAttachedStickerSetsRequest) GetFunctionName() string {
	return "getAttachedStickerSets"
}

// Returns a list of sticker sets attached to a file, including regular, mask, and emoji sticker sets. Currently, only animations, photos, and videos can have attached sticker sets
func (client *Client) GetAttachedStickerSets(ctx context.Context, req *GetAttachedStickerSetsRequest) (*StickerSets, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStickerSets(result.Data)
}

type GetStickerSetRequest struct {
	request
	// Identifier of the sticker set
	SetId JsonInt64 `json:"set_id"`
}

func (req GetStickerSetRequest) GetFunctionName() string {
	return "getStickerSet"
}

// Returns information about a sticker set by its identifier
func (client *Client) GetStickerSet(ctx context.Context, req *GetStickerSetRequest) (*StickerSet, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStickerSet(result.Data)
}

type GetStickerSetNameRequest struct {
	request
	// Identifier of the sticker set
	SetId JsonInt64 `json:"set_id"`
}

func (req GetStickerSetNameRequest) GetFunctionName() string {
	return "getStickerSetName"
}

// Returns name of a sticker set by its identifier
func (client *Client) GetStickerSetName(ctx context.Context, req *GetStickerSetNameRequest) (*Text, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalText(result.Data)
}

type SearchStickerSetRequest struct {
	request
	// Name of the sticker set
	Name string `json:"name"`
	// Pass true to ignore local cache of sticker sets and always send a network request
	IgnoreCache bool `json:"ignore_cache"`
}

func (req SearchStickerSetRequest) GetFunctionName() string {
	return "searchStickerSet"
}

// Searches for a sticker set by its name
func (client *Client) SearchStickerSet(ctx context.Context, req *SearchStickerSetRequest) (*StickerSet, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStickerSet(result.Data)
}

type SearchInstalledStickerSetsRequest struct {
	request
	// Type of the sticker sets to search for
	StickerType StickerType `json:"sticker_type"`
	// Query to search for
	Query string `json:"query"`
	// The maximum number of sticker sets to return
	Limit int32 `json:"limit"`
}

func (req SearchInstalledStickerSetsRequest) GetFunctionName() string {
	return "searchInstalledStickerSets"
}

// Searches for installed sticker sets by looking for specified query in their title and name
func (client *Client) SearchInstalledStickerSets(ctx context.Context, req *SearchInstalledStickerSetsRequest) (*StickerSets, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStickerSets(result.Data)
}

type SearchStickerSetsRequest struct {
	request
	// Type of the sticker sets to return
	StickerType StickerType `json:"sticker_type"`
	// Query to search for
	Query string `json:"query"`
}

func (req SearchStickerSetsRequest) GetFunctionName() string {
	return "searchStickerSets"
}

// Searches for sticker sets by looking for specified query in their title and name. Excludes installed sticker sets from the results
func (client *Client) SearchStickerSets(ctx context.Context, req *SearchStickerSetsRequest) (*StickerSets, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStickerSets(result.Data)
}

type ChangeStickerSetRequest struct {
	request
	// Identifier of the sticker set
	SetId JsonInt64 `json:"set_id"`
	// The new value of is_installed
	IsInstalled bool `json:"is_installed"`
	// The new value of is_archived. A sticker set can't be installed and archived simultaneously
	IsArchived bool `json:"is_archived"`
}

func (req ChangeStickerSetRequest) GetFunctionName() string {
	return "changeStickerSet"
}

// Installs/uninstalls or activates/archives a sticker set
func (client *Client) ChangeStickerSet(ctx context.Context, req *ChangeStickerSetRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ViewTrendingStickerSetsRequest struct {
	request
	// Identifiers of viewed trending sticker sets
	StickerSetIds []JsonInt64 `json:"sticker_set_ids"`
}

func (req ViewTrendingStickerSetsRequest) GetFunctionName() string {
	return "viewTrendingStickerSets"
}

// Informs the server that some trending sticker sets have been viewed by the user
func (client *Client) ViewTrendingStickerSets(ctx context.Context, req *ViewTrendingStickerSetsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ReorderInstalledStickerSetsRequest struct {
	request
	// Type of the sticker sets to reorder
	StickerType StickerType `json:"sticker_type"`
	// Identifiers of installed sticker sets in the new correct order
	StickerSetIds []JsonInt64 `json:"sticker_set_ids"`
}

func (req ReorderInstalledStickerSetsRequest) GetFunctionName() string {
	return "reorderInstalledStickerSets"
}

// Changes the order of installed sticker sets
func (client *Client) ReorderInstalledStickerSets(ctx context.Context, req *ReorderInstalledStickerSetsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetRecentStickersRequest struct {
	request
	// Pass true to return stickers and masks that were recently attached to photos or video files; pass false to return recently sent stickers
	IsAttached bool `json:"is_attached"`
}

func (req GetRecentStickersRequest) GetFunctionName() string {
	return "getRecentStickers"
}

// Returns a list of recently used stickers
func (client *Client) GetRecentStickers(ctx context.Context, req *GetRecentStickersRequest) (*Stickers, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStickers(result.Data)
}

type AddRecentStickerRequest struct {
	request
	// Pass true to add the sticker to the list of stickers recently attached to photo or video files; pass false to add the sticker to the list of recently sent stickers
	IsAttached bool `json:"is_attached"`
	// Sticker file to add
	Sticker InputFile `json:"sticker"`
}

func (req AddRecentStickerRequest) GetFunctionName() string {
	return "addRecentSticker"
}

// Manually adds a new sticker to the list of recently used stickers. The new sticker is added to the top of the list. If the sticker was already in the list, it is removed from the list first. Only stickers belonging to a sticker set or in WEBP or WEBM format can be added to this list. Emoji stickers can't be added to recent stickers
func (client *Client) AddRecentSticker(ctx context.Context, req *AddRecentStickerRequest) (*Stickers, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStickers(result.Data)
}

type RemoveRecentStickerRequest struct {
	request
	// Pass true to remove the sticker from the list of stickers recently attached to photo or video files; pass false to remove the sticker from the list of recently sent stickers
	IsAttached bool `json:"is_attached"`
	// Sticker file to delete
	Sticker InputFile `json:"sticker"`
}

func (req RemoveRecentStickerRequest) GetFunctionName() string {
	return "removeRecentSticker"
}

// Removes a sticker from the list of recently used stickers
func (client *Client) RemoveRecentSticker(ctx context.Context, req *RemoveRecentStickerRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ClearRecentStickersRequest struct {
	request
	// Pass true to clear the list of stickers recently attached to photo or video files; pass false to clear the list of recently sent stickers
	IsAttached bool `json:"is_attached"`
}

func (req ClearRecentStickersRequest) GetFunctionName() string {
	return "clearRecentStickers"
}

// Clears the list of recently used stickers
func (client *Client) ClearRecentStickers(ctx context.Context, req *ClearRecentStickersRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetFavoriteStickersRequest struct {
	request
}

func (req GetFavoriteStickersRequest) GetFunctionName() string {
	return "getFavoriteStickers"
}

// Returns favorite stickers
func (client *Client) GetFavoriteStickers(ctx context.Context) (*Stickers, error) {
	req := &GetFavoriteStickersRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStickers(result.Data)
}

type AddFavoriteStickerRequest struct {
	request
	// Sticker file to add
	Sticker InputFile `json:"sticker"`
}

func (req AddFavoriteStickerRequest) GetFunctionName() string {
	return "addFavoriteSticker"
}

// Adds a new sticker to the list of favorite stickers. The new sticker is added to the top of the list. If the sticker was already in the list, it is removed from the list first. Only stickers belonging to a sticker set or in WEBP or WEBM format can be added to this list. Emoji stickers can't be added to favorite stickers
func (client *Client) AddFavoriteSticker(ctx context.Context, req *AddFavoriteStickerRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type RemoveFavoriteStickerRequest struct {
	request
	// Sticker file to delete from the list
	Sticker InputFile `json:"sticker"`
}

func (req RemoveFavoriteStickerRequest) GetFunctionName() string {
	return "removeFavoriteSticker"
}

// Removes a sticker from the list of favorite stickers
func (client *Client) RemoveFavoriteSticker(ctx context.Context, req *RemoveFavoriteStickerRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetStickerEmojisRequest struct {
	request
	// Sticker file identifier
	Sticker InputFile `json:"sticker"`
}

func (req GetStickerEmojisRequest) GetFunctionName() string {
	return "getStickerEmojis"
}

// Returns emoji corresponding to a sticker. The list is only for informational purposes, because a sticker is always sent with a fixed emoji from the corresponding Sticker object
func (client *Client) GetStickerEmojis(ctx context.Context, req *GetStickerEmojisRequest) (*Emojis, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalEmojis(result.Data)
}

type SearchEmojisRequest struct {
	request
	// Text to search for
	Text string `json:"text"`
	// List of possible IETF language tags of the user's input language; may be empty if unknown
	InputLanguageCodes []string `json:"input_language_codes"`
}

func (req SearchEmojisRequest) GetFunctionName() string {
	return "searchEmojis"
}

// Searches for emojis by keywords. Supported only if the file database is enabled. Order of results is unspecified
func (client *Client) SearchEmojis(ctx context.Context, req *SearchEmojisRequest) (*EmojiKeywords, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalEmojiKeywords(result.Data)
}

type GetKeywordEmojisRequest struct {
	request
	// Text to search for
	Text string `json:"text"`
	// List of possible IETF language tags of the user's input language; may be empty if unknown
	InputLanguageCodes []string `json:"input_language_codes"`
}

func (req GetKeywordEmojisRequest) GetFunctionName() string {
	return "getKeywordEmojis"
}

// Return emojis matching the keyword. Supported only if the file database is enabled. Order of results is unspecified
func (client *Client) GetKeywordEmojis(ctx context.Context, req *GetKeywordEmojisRequest) (*Emojis, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalEmojis(result.Data)
}

type GetEmojiCategoriesRequest struct {
	request
	// Type of emoji categories to return; pass null to get default emoji categories
	Type EmojiCategoryType `json:"type"`
}

func (req GetEmojiCategoriesRequest) GetFunctionName() string {
	return "getEmojiCategories"
}

// Returns available emoji categories
func (client *Client) GetEmojiCategories(ctx context.Context, req *GetEmojiCategoriesRequest) (*EmojiCategories, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalEmojiCategories(result.Data)
}

type GetAnimatedEmojiRequest struct {
	request
	// The emoji
	Emoji string `json:"emoji"`
}

func (req GetAnimatedEmojiRequest) GetFunctionName() string {
	return "getAnimatedEmoji"
}

// Returns an animated emoji corresponding to a given emoji. Returns a 404 error if the emoji has no animated emoji
func (client *Client) GetAnimatedEmoji(ctx context.Context, req *GetAnimatedEmojiRequest) (*AnimatedEmoji, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalAnimatedEmoji(result.Data)
}

type GetEmojiSuggestionsUrlRequest struct {
	request
	// Language code for which the emoji replacements will be suggested
	LanguageCode string `json:"language_code"`
}

func (req GetEmojiSuggestionsUrlRequest) GetFunctionName() string {
	return "getEmojiSuggestionsUrl"
}

// Returns an HTTP URL which can be used to automatically log in to the translation platform and suggest new emoji replacements. The URL will be valid for 30 seconds after generation
func (client *Client) GetEmojiSuggestionsUrl(ctx context.Context, req *GetEmojiSuggestionsUrlRequest) (*HttpUrl, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalHttpUrl(result.Data)
}

type GetCustomEmojiStickersRequest struct {
	request
	// Identifiers of custom emoji stickers. At most 200 custom emoji stickers can be received simultaneously
	CustomEmojiIds []JsonInt64 `json:"custom_emoji_ids"`
}

func (req GetCustomEmojiStickersRequest) GetFunctionName() string {
	return "getCustomEmojiStickers"
}

// Returns the list of custom emoji stickers by their identifiers. Stickers are returned in arbitrary order. Only found stickers are returned
func (client *Client) GetCustomEmojiStickers(ctx context.Context, req *GetCustomEmojiStickersRequest) (*Stickers, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStickers(result.Data)
}

type GetDefaultChatPhotoCustomEmojiStickersRequest struct {
	request
}

func (req GetDefaultChatPhotoCustomEmojiStickersRequest) GetFunctionName() string {
	return "getDefaultChatPhotoCustomEmojiStickers"
}

// Returns default list of custom emoji stickers for placing on a chat photo
func (client *Client) GetDefaultChatPhotoCustomEmojiStickers(ctx context.Context) (*Stickers, error) {
	req := &GetDefaultChatPhotoCustomEmojiStickersRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStickers(result.Data)
}

type GetDefaultProfilePhotoCustomEmojiStickersRequest struct {
	request
}

func (req GetDefaultProfilePhotoCustomEmojiStickersRequest) GetFunctionName() string {
	return "getDefaultProfilePhotoCustomEmojiStickers"
}

// Returns default list of custom emoji stickers for placing on a profile photo
func (client *Client) GetDefaultProfilePhotoCustomEmojiStickers(ctx context.Context) (*Stickers, error) {
	req := &GetDefaultProfilePhotoCustomEmojiStickersRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStickers(result.Data)
}

type GetDefaultBackgroundCustomEmojiStickersRequest struct {
	request
}

func (req GetDefaultBackgroundCustomEmojiStickersRequest) GetFunctionName() string {
	return "getDefaultBackgroundCustomEmojiStickers"
}

// Returns default list of custom emoji stickers for reply background
func (client *Client) GetDefaultBackgroundCustomEmojiStickers(ctx context.Context) (*Stickers, error) {
	req := &GetDefaultBackgroundCustomEmojiStickersRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStickers(result.Data)
}

type GetSavedAnimationsRequest struct {
	request
}

func (req GetSavedAnimationsRequest) GetFunctionName() string {
	return "getSavedAnimations"
}

// Returns saved animations
func (client *Client) GetSavedAnimations(ctx context.Context) (*Animations, error) {
	req := &GetSavedAnimationsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalAnimations(result.Data)
}

type AddSavedAnimationRequest struct {
	request
	// The animation file to be added. Only animations known to the server (i.e., successfully sent via a message) can be added to the list
	Animation InputFile `json:"animation"`
}

func (req AddSavedAnimationRequest) GetFunctionName() string {
	return "addSavedAnimation"
}

// Manually adds a new animation to the list of saved animations. The new animation is added to the beginning of the list. If the animation was already in the list, it is removed first. Only non-secret video animations with MIME type "video/mp4" can be added to the list
func (client *Client) AddSavedAnimation(ctx context.Context, req *AddSavedAnimationRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type RemoveSavedAnimationRequest struct {
	request
	// Animation file to be removed
	Animation InputFile `json:"animation"`
}

func (req RemoveSavedAnimationRequest) GetFunctionName() string {
	return "removeSavedAnimation"
}

// Removes an animation from the list of saved animations
func (client *Client) RemoveSavedAnimation(ctx context.Context, req *RemoveSavedAnimationRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetRecentInlineBotsRequest struct {
	request
}

func (req GetRecentInlineBotsRequest) GetFunctionName() string {
	return "getRecentInlineBots"
}

// Returns up to 20 recently used inline bots in the order of their last usage
func (client *Client) GetRecentInlineBots(ctx context.Context) (*Users, error) {
	req := &GetRecentInlineBotsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalUsers(result.Data)
}

type GetOwnedBotsRequest struct {
	request
}

func (req GetOwnedBotsRequest) GetFunctionName() string {
	return "getOwnedBots"
}

// Returns the list of bots owned by the current user
func (client *Client) GetOwnedBots(ctx context.Context) (*Users, error) {
	req := &GetOwnedBotsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalUsers(result.Data)
}

type SearchHashtagsRequest struct {
	request
	// Hashtag prefix to search for
	Prefix string `json:"prefix"`
	// The maximum number of hashtags to be returned
	Limit int32 `json:"limit"`
}

func (req SearchHashtagsRequest) GetFunctionName() string {
	return "searchHashtags"
}

// Searches for recently used hashtags by their prefix
func (client *Client) SearchHashtags(ctx context.Context, req *SearchHashtagsRequest) (*Hashtags, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalHashtags(result.Data)
}

type RemoveRecentHashtagRequest struct {
	request
	// Hashtag to delete
	Hashtag string `json:"hashtag"`
}

func (req RemoveRecentHashtagRequest) GetFunctionName() string {
	return "removeRecentHashtag"
}

// Removes a hashtag from the list of recently used hashtags
func (client *Client) RemoveRecentHashtag(ctx context.Context, req *RemoveRecentHashtagRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetLinkPreviewRequest struct {
	request
	// Message text with formatting
	Text *FormattedText `json:"text"`
	// Options to be used for generation of the link preview; pass null to use default link preview options
	LinkPreviewOptions *LinkPreviewOptions `json:"link_preview_options"`
}

func (req GetLinkPreviewRequest) GetFunctionName() string {
	return "getLinkPreview"
}

// Returns a link preview by the text of a message. Do not call this function too often. Returns a 404 error if the text has no link preview
func (client *Client) GetLinkPreview(ctx context.Context, req *GetLinkPreviewRequest) (*LinkPreview, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalLinkPreview(result.Data)
}

type GetWebPageInstantViewRequest struct {
	request
	// The web page URL
	Url string `json:"url"`
	// Pass true to get only locally available information without sending network requests
	OnlyLocal bool `json:"only_local"`
}

func (req GetWebPageInstantViewRequest) GetFunctionName() string {
	return "getWebPageInstantView"
}

// Returns an instant view version of a web page if available. This is an offline method if only_local is true. Returns a 404 error if the web page has no instant view page
func (client *Client) GetWebPageInstantView(ctx context.Context, req *GetWebPageInstantViewRequest) (*WebPageInstantView, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalWebPageInstantView(result.Data)
}

type SetProfilePhotoRequest struct {
	request
	// Profile photo to set
	Photo InputChatPhoto `json:"photo"`
	// Pass true to set the public photo, which will be visible even the main photo is hidden by privacy settings
	IsPublic bool `json:"is_public"`
}

func (req SetProfilePhotoRequest) GetFunctionName() string {
	return "setProfilePhoto"
}

// Changes a profile photo for the current user
func (client *Client) SetProfilePhoto(ctx context.Context, req *SetProfilePhotoRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type DeleteProfilePhotoRequest struct {
	request
	// Identifier of the profile photo to delete
	ProfilePhotoId JsonInt64 `json:"profile_photo_id"`
}

func (req DeleteProfilePhotoRequest) GetFunctionName() string {
	return "deleteProfilePhoto"
}

// Deletes a profile photo
func (client *Client) DeleteProfilePhoto(ctx context.Context, req *DeleteProfilePhotoRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetAccentColorRequest struct {
	request
	// Identifier of the accent color to use
	AccentColorId int32 `json:"accent_color_id"`
	// Identifier of a custom emoji to be shown on the reply header and link preview background; 0 if none
	BackgroundCustomEmojiId JsonInt64 `json:"background_custom_emoji_id"`
}

func (req SetAccentColorRequest) GetFunctionName() string {
	return "setAccentColor"
}

// Changes accent color and background custom emoji for the current user; for Telegram Premium users only
func (client *Client) SetAccentColor(ctx context.Context, req *SetAccentColorRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetProfileAccentColorRequest struct {
	request
	// Identifier of the accent color to use for profile; pass -1 if none
	ProfileAccentColorId int32 `json:"profile_accent_color_id"`
	// Identifier of a custom emoji to be shown on the user's profile photo background; 0 if none
	ProfileBackgroundCustomEmojiId JsonInt64 `json:"profile_background_custom_emoji_id"`
}

func (req SetProfileAccentColorRequest) GetFunctionName() string {
	return "setProfileAccentColor"
}

// Changes accent color and background custom emoji for profile of the current user; for Telegram Premium users only
func (client *Client) SetProfileAccentColor(ctx context.Context, req *SetProfileAccentColorRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetNameRequest struct {
	request
	// The new value of the first name for the current user; 1-64 characters
	FirstName string `json:"first_name"`
	// The new value of the optional last name for the current user; 0-64 characters
	LastName string `json:"last_name"`
}

func (req SetNameRequest) GetFunctionName() string {
	return "setName"
}

// Changes the first and last name of the current user
func (client *Client) SetName(ctx context.Context, req *SetNameRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetBioRequest struct {
	request
	// The new value of the user bio; 0-getOption("bio_length_max") characters without line feeds
	Bio string `json:"bio"`
}

func (req SetBioRequest) GetFunctionName() string {
	return "setBio"
}

// Changes the bio of the current user
func (client *Client) SetBio(ctx context.Context, req *SetBioRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetUsernameRequest struct {
	request
	// The new value of the username. Use an empty string to remove the username. The username can't be completely removed if there is another active or disabled username
	Username string `json:"username"`
}

func (req SetUsernameRequest) GetFunctionName() string {
	return "setUsername"
}

// Changes the editable username of the current user
func (client *Client) SetUsername(ctx context.Context, req *SetUsernameRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleUsernameIsActiveRequest struct {
	request
	// The username to change
	Username string `json:"username"`
	// Pass true to activate the username; pass false to disable it
	IsActive bool `json:"is_active"`
}

func (req ToggleUsernameIsActiveRequest) GetFunctionName() string {
	return "toggleUsernameIsActive"
}

// Changes active state for a username of the current user. The editable username can't be disabled. May return an error with a message "USERNAMES_ACTIVE_TOO_MUCH" if the maximum number of active usernames has been reached
func (client *Client) ToggleUsernameIsActive(ctx context.Context, req *ToggleUsernameIsActiveRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ReorderActiveUsernamesRequest struct {
	request
	// The new order of active usernames. All currently active usernames must be specified
	Usernames []string `json:"usernames"`
}

func (req ReorderActiveUsernamesRequest) GetFunctionName() string {
	return "reorderActiveUsernames"
}

// Changes order of active usernames of the current user
func (client *Client) ReorderActiveUsernames(ctx context.Context, req *ReorderActiveUsernamesRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetBirthdateRequest struct {
	request
	// The new value of the current user's birthdate; pass null to remove the birthdate
	Birthdate *Birthdate `json:"birthdate"`
}

func (req SetBirthdateRequest) GetFunctionName() string {
	return "setBirthdate"
}

// Changes the birthdate of the current user
func (client *Client) SetBirthdate(ctx context.Context, req *SetBirthdateRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetPersonalChatRequest struct {
	request
	// Identifier of the new personal chat; pass 0 to remove the chat. Use getSuitablePersonalChats to get suitable chats
	ChatId int64 `json:"chat_id"`
}

func (req SetPersonalChatRequest) GetFunctionName() string {
	return "setPersonalChat"
}

// Changes the personal chat of the current user
func (client *Client) SetPersonalChat(ctx context.Context, req *SetPersonalChatRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetEmojiStatusRequest struct {
	request
	// New emoji status; pass null to switch to the default badge
	EmojiStatus *EmojiStatus `json:"emoji_status"`
}

func (req SetEmojiStatusRequest) GetFunctionName() string {
	return "setEmojiStatus"
}

// Changes the emoji status of the current user; for Telegram Premium users only
func (client *Client) SetEmojiStatus(ctx context.Context, req *SetEmojiStatusRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleHasSponsoredMessagesEnabledRequest struct {
	request
	// Pass true to enable sponsored messages for the current user; false to disable them
	HasSponsoredMessagesEnabled bool `json:"has_sponsored_messages_enabled"`
}

func (req ToggleHasSponsoredMessagesEnabledRequest) GetFunctionName() string {
	return "toggleHasSponsoredMessagesEnabled"
}

// Toggles whether the current user has sponsored messages enabled. The setting has no effect for users without Telegram Premium for which sponsored messages are always enabled
func (client *Client) ToggleHasSponsoredMessagesEnabled(ctx context.Context, req *ToggleHasSponsoredMessagesEnabledRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetBusinessLocationRequest struct {
	request
	// The new location of the business; pass null to remove the location
	Location *BusinessLocation `json:"location"`
}

func (req SetBusinessLocationRequest) GetFunctionName() string {
	return "setBusinessLocation"
}

// Changes the business location of the current user. Requires Telegram Business subscription
func (client *Client) SetBusinessLocation(ctx context.Context, req *SetBusinessLocationRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetBusinessOpeningHoursRequest struct {
	request
	// The new opening hours of the business; pass null to remove the opening hours; up to 28 time intervals can be specified
	OpeningHours *BusinessOpeningHours `json:"opening_hours"`
}

func (req SetBusinessOpeningHoursRequest) GetFunctionName() string {
	return "setBusinessOpeningHours"
}

// Changes the business opening hours of the current user. Requires Telegram Business subscription
func (client *Client) SetBusinessOpeningHours(ctx context.Context, req *SetBusinessOpeningHoursRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetBusinessGreetingMessageSettingsRequest struct {
	request
	// The new settings for the greeting message of the business; pass null to disable the greeting message
	GreetingMessageSettings *BusinessGreetingMessageSettings `json:"greeting_message_settings"`
}

func (req SetBusinessGreetingMessageSettingsRequest) GetFunctionName() string {
	return "setBusinessGreetingMessageSettings"
}

// Changes the business greeting message settings of the current user. Requires Telegram Business subscription
func (client *Client) SetBusinessGreetingMessageSettings(ctx context.Context, req *SetBusinessGreetingMessageSettingsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetBusinessAwayMessageSettingsRequest struct {
	request
	// The new settings for the away message of the business; pass null to disable the away message
	AwayMessageSettings *BusinessAwayMessageSettings `json:"away_message_settings"`
}

func (req SetBusinessAwayMessageSettingsRequest) GetFunctionName() string {
	return "setBusinessAwayMessageSettings"
}

// Changes the business away message settings of the current user. Requires Telegram Business subscription
func (client *Client) SetBusinessAwayMessageSettings(ctx context.Context, req *SetBusinessAwayMessageSettingsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetBusinessStartPageRequest struct {
	request
	// The new start page of the business; pass null to remove custom start page
	StartPage *InputBusinessStartPage `json:"start_page"`
}

func (req SetBusinessStartPageRequest) GetFunctionName() string {
	return "setBusinessStartPage"
}

// Changes the business start page of the current user. Requires Telegram Business subscription
func (client *Client) SetBusinessStartPage(ctx context.Context, req *SetBusinessStartPageRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SendPhoneNumberCodeRequest struct {
	request
	// The phone number, in international format
	PhoneNumber string `json:"phone_number"`
	// Settings for the authentication of the user's phone number; pass null to use default settings
	Settings *PhoneNumberAuthenticationSettings `json:"settings"`
	// Type of the request for which the code is sent
	Type PhoneNumberCodeType `json:"type"`
}

func (req SendPhoneNumberCodeRequest) GetFunctionName() string {
	return "sendPhoneNumberCode"
}

// Sends a code to the specified phone number. Aborts previous phone number verification if there was one. On success, returns information about the sent code
func (client *Client) SendPhoneNumberCode(ctx context.Context, req *SendPhoneNumberCodeRequest) (*AuthenticationCodeInfo, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalAuthenticationCodeInfo(result.Data)
}

type SendPhoneNumberFirebaseSmsRequest struct {
	request
	// Play Integrity API or SafetyNet Attestation API token for the Android application, or secret from push notification for the iOS application
	Token string `json:"token"`
}

func (req SendPhoneNumberFirebaseSmsRequest) GetFunctionName() string {
	return "sendPhoneNumberFirebaseSms"
}

// Sends Firebase Authentication SMS to the specified phone number. Works only when received a code of the type authenticationCodeTypeFirebaseAndroid or authenticationCodeTypeFirebaseIos
func (client *Client) SendPhoneNumberFirebaseSms(ctx context.Context, req *SendPhoneNumberFirebaseSmsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ReportPhoneNumberCodeMissingRequest struct {
	request
	// Current mobile network code
	MobileNetworkCode string `json:"mobile_network_code"`
}

func (req ReportPhoneNumberCodeMissingRequest) GetFunctionName() string {
	return "reportPhoneNumberCodeMissing"
}

// Reports that authentication code wasn't delivered via SMS to the specified phone number; for official mobile applications only
func (client *Client) ReportPhoneNumberCodeMissing(ctx context.Context, req *ReportPhoneNumberCodeMissingRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ResendPhoneNumberCodeRequest struct {
	request
	// Reason of code resending; pass null if unknown
	Reason ResendCodeReason `json:"reason"`
}

func (req ResendPhoneNumberCodeRequest) GetFunctionName() string {
	return "resendPhoneNumberCode"
}

// Resends the authentication code sent to a phone number. Works only if the previously received authenticationCodeInfo next_code_type was not null and the server-specified timeout has passed
func (client *Client) ResendPhoneNumberCode(ctx context.Context, req *ResendPhoneNumberCodeRequest) (*AuthenticationCodeInfo, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalAuthenticationCodeInfo(result.Data)
}

type CheckPhoneNumberCodeRequest struct {
	request
	// Authentication code to check
	Code string `json:"code"`
}

func (req CheckPhoneNumberCodeRequest) GetFunctionName() string {
	return "checkPhoneNumberCode"
}

// Check the authentication code and completes the request for which the code was sent if appropriate
func (client *Client) CheckPhoneNumberCode(ctx context.Context, req *CheckPhoneNumberCodeRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetBusinessConnectedBotRequest struct {
	request
}

func (req GetBusinessConnectedBotRequest) GetFunctionName() string {
	return "getBusinessConnectedBot"
}

// Returns the business bot that is connected to the current user account. Returns a 404 error if there is no connected bot
func (client *Client) GetBusinessConnectedBot(ctx context.Context) (*BusinessConnectedBot, error) {
	req := &GetBusinessConnectedBotRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalBusinessConnectedBot(result.Data)
}

type SetBusinessConnectedBotRequest struct {
	request
	// Connection settings for the bot
	Bot *BusinessConnectedBot `json:"bot"`
}

func (req SetBusinessConnectedBotRequest) GetFunctionName() string {
	return "setBusinessConnectedBot"
}

// Adds or changes business bot that is connected to the current user account
func (client *Client) SetBusinessConnectedBot(ctx context.Context, req *SetBusinessConnectedBotRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type DeleteBusinessConnectedBotRequest struct {
	request
	// Unique user identifier for the bot
	BotUserId int64 `json:"bot_user_id"`
}

func (req DeleteBusinessConnectedBotRequest) GetFunctionName() string {
	return "deleteBusinessConnectedBot"
}

// Deletes the business bot that is connected to the current user account
func (client *Client) DeleteBusinessConnectedBot(ctx context.Context, req *DeleteBusinessConnectedBotRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleBusinessConnectedBotChatIsPausedRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Pass true to pause the connected bot in the chat; pass false to resume the bot
	IsPaused bool `json:"is_paused"`
}

func (req ToggleBusinessConnectedBotChatIsPausedRequest) GetFunctionName() string {
	return "toggleBusinessConnectedBotChatIsPaused"
}

// Pauses or resumes the connected business bot in a specific chat
func (client *Client) ToggleBusinessConnectedBotChatIsPaused(ctx context.Context, req *ToggleBusinessConnectedBotChatIsPausedRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type RemoveBusinessConnectedBotFromChatRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
}

func (req RemoveBusinessConnectedBotFromChatRequest) GetFunctionName() string {
	return "removeBusinessConnectedBotFromChat"
}

// Removes the connected business bot from a specific chat by adding the chat to businessRecipients.excluded_chat_ids
func (client *Client) RemoveBusinessConnectedBotFromChat(ctx context.Context, req *RemoveBusinessConnectedBotFromChatRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetBusinessChatLinksRequest struct {
	request
}

func (req GetBusinessChatLinksRequest) GetFunctionName() string {
	return "getBusinessChatLinks"
}

// Returns business chat links created for the current account
func (client *Client) GetBusinessChatLinks(ctx context.Context) (*BusinessChatLinks, error) {
	req := &GetBusinessChatLinksRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalBusinessChatLinks(result.Data)
}

type CreateBusinessChatLinkRequest struct {
	request
	// Information about the link to create
	LinkInfo *InputBusinessChatLink `json:"link_info"`
}

func (req CreateBusinessChatLinkRequest) GetFunctionName() string {
	return "createBusinessChatLink"
}

// Creates a business chat link for the current account. Requires Telegram Business subscription. There can be up to getOption("business_chat_link_count_max") links created. Returns the created link
func (client *Client) CreateBusinessChatLink(ctx context.Context, req *CreateBusinessChatLinkRequest) (*BusinessChatLink, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalBusinessChatLink(result.Data)
}

type EditBusinessChatLinkRequest struct {
	request
	// The link to edit
	Link string `json:"link"`
	// New description of the link
	LinkInfo *InputBusinessChatLink `json:"link_info"`
}

func (req EditBusinessChatLinkRequest) GetFunctionName() string {
	return "editBusinessChatLink"
}

// Edits a business chat link of the current account. Requires Telegram Business subscription. Returns the edited link
func (client *Client) EditBusinessChatLink(ctx context.Context, req *EditBusinessChatLinkRequest) (*BusinessChatLink, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalBusinessChatLink(result.Data)
}

type DeleteBusinessChatLinkRequest struct {
	request
	// The link to delete
	Link string `json:"link"`
}

func (req DeleteBusinessChatLinkRequest) GetFunctionName() string {
	return "deleteBusinessChatLink"
}

// Deletes a business chat link of the current account
func (client *Client) DeleteBusinessChatLink(ctx context.Context, req *DeleteBusinessChatLinkRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetBusinessChatLinkInfoRequest struct {
	request
	// Name of the link
	LinkName string `json:"link_name"`
}

func (req GetBusinessChatLinkInfoRequest) GetFunctionName() string {
	return "getBusinessChatLinkInfo"
}

// Returns information about a business chat link
func (client *Client) GetBusinessChatLinkInfo(ctx context.Context, req *GetBusinessChatLinkInfoRequest) (*BusinessChatLinkInfo, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalBusinessChatLinkInfo(result.Data)
}

type GetUserLinkRequest struct {
	request
}

func (req GetUserLinkRequest) GetFunctionName() string {
	return "getUserLink"
}

// Returns an HTTPS link, which can be used to get information about the current user
func (client *Client) GetUserLink(ctx context.Context) (*UserLink, error) {
	req := &GetUserLinkRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalUserLink(result.Data)
}

type SearchUserByTokenRequest struct {
	request
	// Token to search for
	Token string `json:"token"`
}

func (req SearchUserByTokenRequest) GetFunctionName() string {
	return "searchUserByToken"
}

// Searches a user by a token from the user's link
func (client *Client) SearchUserByToken(ctx context.Context, req *SearchUserByTokenRequest) (*User, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalUser(result.Data)
}

type SetCommandsRequest struct {
	request
	// The scope to which the commands are relevant; pass null to change commands in the default bot command scope
	Scope BotCommandScope `json:"scope"`
	// A two-letter ISO 639-1 language code. If empty, the commands will be applied to all users from the given scope, for which language there are no dedicated commands
	LanguageCode string `json:"language_code"`
	// List of the bot's commands
	Commands []*BotCommand `json:"commands"`
}

func (req SetCommandsRequest) GetFunctionName() string {
	return "setCommands"
}

// Sets the list of commands supported by the bot for the given user scope and language; for bots only
func (client *Client) SetCommands(ctx context.Context, req *SetCommandsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type DeleteCommandsRequest struct {
	request
	// The scope to which the commands are relevant; pass null to delete commands in the default bot command scope
	Scope BotCommandScope `json:"scope"`
	// A two-letter ISO 639-1 language code or an empty string
	LanguageCode string `json:"language_code"`
}

func (req DeleteCommandsRequest) GetFunctionName() string {
	return "deleteCommands"
}

// Deletes commands supported by the bot for the given user scope and language; for bots only
func (client *Client) DeleteCommands(ctx context.Context, req *DeleteCommandsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetCommandsRequest struct {
	request
	// The scope to which the commands are relevant; pass null to get commands in the default bot command scope
	Scope BotCommandScope `json:"scope"`
	// A two-letter ISO 639-1 language code or an empty string
	LanguageCode string `json:"language_code"`
}

func (req GetCommandsRequest) GetFunctionName() string {
	return "getCommands"
}

// Returns the list of commands supported by the bot for the given user scope and language; for bots only
func (client *Client) GetCommands(ctx context.Context, req *GetCommandsRequest) (*BotCommands, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalBotCommands(result.Data)
}

type SetMenuButtonRequest struct {
	request
	// Identifier of the user or 0 to set menu button for all users
	UserId int64 `json:"user_id"`
	// New menu button
	MenuButton *BotMenuButton `json:"menu_button"`
}

func (req SetMenuButtonRequest) GetFunctionName() string {
	return "setMenuButton"
}

// Sets menu button for the given user or for all users; for bots only
func (client *Client) SetMenuButton(ctx context.Context, req *SetMenuButtonRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetMenuButtonRequest struct {
	request
	// Identifier of the user or 0 to get the default menu button
	UserId int64 `json:"user_id"`
}

func (req GetMenuButtonRequest) GetFunctionName() string {
	return "getMenuButton"
}

// Returns menu button set by the bot for the given user; for bots only
func (client *Client) GetMenuButton(ctx context.Context, req *GetMenuButtonRequest) (*BotMenuButton, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalBotMenuButton(result.Data)
}

type SetDefaultGroupAdministratorRightsRequest struct {
	request
	// Default administrator rights for adding the bot to basic group and supergroup chats; pass null to remove default rights
	DefaultGroupAdministratorRights *ChatAdministratorRights `json:"default_group_administrator_rights"`
}

func (req SetDefaultGroupAdministratorRightsRequest) GetFunctionName() string {
	return "setDefaultGroupAdministratorRights"
}

// Sets default administrator rights for adding the bot to basic group and supergroup chats; for bots only
func (client *Client) SetDefaultGroupAdministratorRights(ctx context.Context, req *SetDefaultGroupAdministratorRightsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetDefaultChannelAdministratorRightsRequest struct {
	request
	// Default administrator rights for adding the bot to channels; pass null to remove default rights
	DefaultChannelAdministratorRights *ChatAdministratorRights `json:"default_channel_administrator_rights"`
}

func (req SetDefaultChannelAdministratorRightsRequest) GetFunctionName() string {
	return "setDefaultChannelAdministratorRights"
}

// Sets default administrator rights for adding the bot to channel chats; for bots only
func (client *Client) SetDefaultChannelAdministratorRights(ctx context.Context, req *SetDefaultChannelAdministratorRightsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type CanBotSendMessagesRequest struct {
	request
	// Identifier of the target bot
	BotUserId int64 `json:"bot_user_id"`
}

func (req CanBotSendMessagesRequest) GetFunctionName() string {
	return "canBotSendMessages"
}

// Checks whether the specified bot can send messages to the user. Returns a 404 error if can't and the access can be granted by call to allowBotToSendMessages
func (client *Client) CanBotSendMessages(ctx context.Context, req *CanBotSendMessagesRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type AllowBotToSendMessagesRequest struct {
	request
	// Identifier of the target bot
	BotUserId int64 `json:"bot_user_id"`
}

func (req AllowBotToSendMessagesRequest) GetFunctionName() string {
	return "allowBotToSendMessages"
}

// Allows the specified bot to send messages to the user
func (client *Client) AllowBotToSendMessages(ctx context.Context, req *AllowBotToSendMessagesRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SendWebAppCustomRequestRequest struct {
	request
	// Identifier of the bot
	BotUserId int64 `json:"bot_user_id"`
	// The method name
	Method string `json:"method"`
	// JSON-serialized method parameters
	Parameters string `json:"parameters"`
}

func (req SendWebAppCustomRequestRequest) GetFunctionName() string {
	return "sendWebAppCustomRequest"
}

// Sends a custom request from a Web App
func (client *Client) SendWebAppCustomRequest(ctx context.Context, req *SendWebAppCustomRequestRequest) (*CustomRequestResult, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalCustomRequestResult(result.Data)
}

type GetBotMediaPreviewsRequest struct {
	request
	// Identifier of the target bot. The bot must have the main Web App
	BotUserId int64 `json:"bot_user_id"`
}

func (req GetBotMediaPreviewsRequest) GetFunctionName() string {
	return "getBotMediaPreviews"
}

// Returns the list of media previews of a bot
func (client *Client) GetBotMediaPreviews(ctx context.Context, req *GetBotMediaPreviewsRequest) (*BotMediaPreviews, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalBotMediaPreviews(result.Data)
}

type GetBotMediaPreviewInfoRequest struct {
	request
	// Identifier of the target bot. The bot must be owned and must have the main Web App
	BotUserId int64 `json:"bot_user_id"`
	// A two-letter ISO 639-1 language code for which to get previews. If empty, then default previews are returned
	LanguageCode string `json:"language_code"`
}

func (req GetBotMediaPreviewInfoRequest) GetFunctionName() string {
	return "getBotMediaPreviewInfo"
}

// Returns the list of media previews for the given language and the list of languages for which the bot has dedicated previews
func (client *Client) GetBotMediaPreviewInfo(ctx context.Context, req *GetBotMediaPreviewInfoRequest) (*BotMediaPreviewInfo, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalBotMediaPreviewInfo(result.Data)
}

type AddBotMediaPreviewRequest struct {
	request
	// Identifier of the target bot. The bot must be owned and must have the main Web App
	BotUserId int64 `json:"bot_user_id"`
	// A two-letter ISO 639-1 language code for which preview is added. If empty, then the preview will be shown to all users for whose languages there are no dedicated previews. If non-empty, then there must be an official language pack of the same name, which is returned by getLocalizationTargetInfo
	LanguageCode string `json:"language_code"`
	// Content of the added preview
	Content InputStoryContent `json:"content"`
}

func (req AddBotMediaPreviewRequest) GetFunctionName() string {
	return "addBotMediaPreview"
}

// Adds a new media preview to the beginning of the list of media previews of a bot. Returns the added preview after addition is completed server-side. The total number of previews must not exceed getOption("bot_media_preview_count_max") for the given language
func (client *Client) AddBotMediaPreview(ctx context.Context, req *AddBotMediaPreviewRequest) (*BotMediaPreview, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalBotMediaPreview(result.Data)
}

type EditBotMediaPreviewRequest struct {
	request
	// Identifier of the target bot. The bot must be owned and must have the main Web App
	BotUserId int64 `json:"bot_user_id"`
	// Language code of the media preview to edit
	LanguageCode string `json:"language_code"`
	// File identifier of the media to replace
	FileId int32 `json:"file_id"`
	// Content of the new preview
	Content InputStoryContent `json:"content"`
}

func (req EditBotMediaPreviewRequest) GetFunctionName() string {
	return "editBotMediaPreview"
}

// Replaces media preview in the list of media previews of a bot. Returns the new preview after edit is completed server-side
func (client *Client) EditBotMediaPreview(ctx context.Context, req *EditBotMediaPreviewRequest) (*BotMediaPreview, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalBotMediaPreview(result.Data)
}

type ReorderBotMediaPreviewsRequest struct {
	request
	// Identifier of the target bot. The bot must be owned and must have the main Web App
	BotUserId int64 `json:"bot_user_id"`
	// Language code of the media previews to reorder
	LanguageCode string `json:"language_code"`
	// File identifiers of the media in the new order
	FileIds []int32 `json:"file_ids"`
}

func (req ReorderBotMediaPreviewsRequest) GetFunctionName() string {
	return "reorderBotMediaPreviews"
}

// Changes order of media previews in the list of media previews of a bot
func (client *Client) ReorderBotMediaPreviews(ctx context.Context, req *ReorderBotMediaPreviewsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type DeleteBotMediaPreviewsRequest struct {
	request
	// Identifier of the target bot. The bot must be owned and must have the main Web App
	BotUserId int64 `json:"bot_user_id"`
	// Language code of the media previews to delete
	LanguageCode string `json:"language_code"`
	// File identifiers of the media to delete
	FileIds []int32 `json:"file_ids"`
}

func (req DeleteBotMediaPreviewsRequest) GetFunctionName() string {
	return "deleteBotMediaPreviews"
}

// Delete media previews from the list of media previews of a bot
func (client *Client) DeleteBotMediaPreviews(ctx context.Context, req *DeleteBotMediaPreviewsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetBotNameRequest struct {
	request
	// Identifier of the target bot
	BotUserId int64 `json:"bot_user_id"`
	// A two-letter ISO 639-1 language code. If empty, the name will be shown to all users for whose languages there is no dedicated name
	LanguageCode string `json:"language_code"`
	// New bot's name on the specified language; 0-64 characters; must be non-empty if language code is empty
	Name string `json:"name"`
}

func (req SetBotNameRequest) GetFunctionName() string {
	return "setBotName"
}

// Sets the name of a bot. Can be called only if userTypeBot.can_be_edited == true
func (client *Client) SetBotName(ctx context.Context, req *SetBotNameRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetBotNameRequest struct {
	request
	// Identifier of the target bot
	BotUserId int64 `json:"bot_user_id"`
	// A two-letter ISO 639-1 language code or an empty string
	LanguageCode string `json:"language_code"`
}

func (req GetBotNameRequest) GetFunctionName() string {
	return "getBotName"
}

// Returns the name of a bot in the given language. Can be called only if userTypeBot.can_be_edited == true
func (client *Client) GetBotName(ctx context.Context, req *GetBotNameRequest) (*Text, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalText(result.Data)
}

type SetBotProfilePhotoRequest struct {
	request
	// Identifier of the target bot
	BotUserId int64 `json:"bot_user_id"`
	// Profile photo to set; pass null to delete the chat photo
	Photo InputChatPhoto `json:"photo"`
}

func (req SetBotProfilePhotoRequest) GetFunctionName() string {
	return "setBotProfilePhoto"
}

// Changes a profile photo for a bot
func (client *Client) SetBotProfilePhoto(ctx context.Context, req *SetBotProfilePhotoRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleBotUsernameIsActiveRequest struct {
	request
	// Identifier of the target bot
	BotUserId int64 `json:"bot_user_id"`
	// The username to change
	Username string `json:"username"`
	// Pass true to activate the username; pass false to disable it
	IsActive bool `json:"is_active"`
}

func (req ToggleBotUsernameIsActiveRequest) GetFunctionName() string {
	return "toggleBotUsernameIsActive"
}

// Changes active state for a username of a bot. The editable username can't be disabled. May return an error with a message "USERNAMES_ACTIVE_TOO_MUCH" if the maximum number of active usernames has been reached. Can be called only if userTypeBot.can_be_edited == true
func (client *Client) ToggleBotUsernameIsActive(ctx context.Context, req *ToggleBotUsernameIsActiveRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ReorderBotActiveUsernamesRequest struct {
	request
	// Identifier of the target bot
	BotUserId int64 `json:"bot_user_id"`
	// The new order of active usernames. All currently active usernames must be specified
	Usernames []string `json:"usernames"`
}

func (req ReorderBotActiveUsernamesRequest) GetFunctionName() string {
	return "reorderBotActiveUsernames"
}

// Changes order of active usernames of a bot. Can be called only if userTypeBot.can_be_edited == true
func (client *Client) ReorderBotActiveUsernames(ctx context.Context, req *ReorderBotActiveUsernamesRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetBotInfoDescriptionRequest struct {
	request
	// Identifier of the target bot
	BotUserId int64 `json:"bot_user_id"`
	// A two-letter ISO 639-1 language code. If empty, the description will be shown to all users for whose languages there is no dedicated description
	LanguageCode string `json:"language_code"`
	// New bot's description on the specified language
	Description string `json:"description"`
}

func (req SetBotInfoDescriptionRequest) GetFunctionName() string {
	return "setBotInfoDescription"
}

// Sets the text shown in the chat with a bot if the chat is empty. Can be called only if userTypeBot.can_be_edited == true
func (client *Client) SetBotInfoDescription(ctx context.Context, req *SetBotInfoDescriptionRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetBotInfoDescriptionRequest struct {
	request
	// Identifier of the target bot
	BotUserId int64 `json:"bot_user_id"`
	// A two-letter ISO 639-1 language code or an empty string
	LanguageCode string `json:"language_code"`
}

func (req GetBotInfoDescriptionRequest) GetFunctionName() string {
	return "getBotInfoDescription"
}

// Returns the text shown in the chat with a bot if the chat is empty in the given language. Can be called only if userTypeBot.can_be_edited == true
func (client *Client) GetBotInfoDescription(ctx context.Context, req *GetBotInfoDescriptionRequest) (*Text, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalText(result.Data)
}

type SetBotInfoShortDescriptionRequest struct {
	request
	// Identifier of the target bot
	BotUserId int64 `json:"bot_user_id"`
	// A two-letter ISO 639-1 language code. If empty, the short description will be shown to all users for whose languages there is no dedicated description
	LanguageCode string `json:"language_code"`
	// New bot's short description on the specified language
	ShortDescription string `json:"short_description"`
}

func (req SetBotInfoShortDescriptionRequest) GetFunctionName() string {
	return "setBotInfoShortDescription"
}

// Sets the text shown on a bot's profile page and sent together with the link when users share the bot. Can be called only if userTypeBot.can_be_edited == true
func (client *Client) SetBotInfoShortDescription(ctx context.Context, req *SetBotInfoShortDescriptionRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetBotInfoShortDescriptionRequest struct {
	request
	// Identifier of the target bot
	BotUserId int64 `json:"bot_user_id"`
	// A two-letter ISO 639-1 language code or an empty string
	LanguageCode string `json:"language_code"`
}

func (req GetBotInfoShortDescriptionRequest) GetFunctionName() string {
	return "getBotInfoShortDescription"
}

// Returns the text shown on a bot's profile page and sent together with the link when users share the bot in the given language. Can be called only if userTypeBot.can_be_edited == true
func (client *Client) GetBotInfoShortDescription(ctx context.Context, req *GetBotInfoShortDescriptionRequest) (*Text, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalText(result.Data)
}

type SetMessageSenderBotVerificationRequest struct {
	request
	// Identifier of the owned bot, which will verify the user or the chat
	BotUserId int64 `json:"bot_user_id"`
	// Identifier of the user or the supergroup or channel chat, which will be verified by the bot
	VerifiedId MessageSender `json:"verified_id"`
	// Custom description of verification reason; 0-getOption("bot_verification_custom_description_length_max"). If empty, then "was verified by organization "organization_name"" will be used as description. Can be specified only if the bot is allowed to provide custom description
	CustomDescription string `json:"custom_description"`
}

func (req SetMessageSenderBotVerificationRequest) GetFunctionName() string {
	return "setMessageSenderBotVerification"
}

// Changes the verification status of a user or a chat by an owned bot
func (client *Client) SetMessageSenderBotVerification(ctx context.Context, req *SetMessageSenderBotVerificationRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type RemoveMessageSenderBotVerificationRequest struct {
	request
	// Identifier of the owned bot, which verified the user or the chat
	BotUserId int64 `json:"bot_user_id"`
	// Identifier of the user or the supergroup or channel chat, which verification is removed
	VerifiedId MessageSender `json:"verified_id"`
}

func (req RemoveMessageSenderBotVerificationRequest) GetFunctionName() string {
	return "removeMessageSenderBotVerification"
}

// Removes the verification status of a user or a chat by an owned bot
func (client *Client) RemoveMessageSenderBotVerification(ctx context.Context, req *RemoveMessageSenderBotVerificationRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetActiveSessionsRequest struct {
	request
}

func (req GetActiveSessionsRequest) GetFunctionName() string {
	return "getActiveSessions"
}

// Returns all active sessions of the current user
func (client *Client) GetActiveSessions(ctx context.Context) (*Sessions, error) {
	req := &GetActiveSessionsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalSessions(result.Data)
}

type TerminateSessionRequest struct {
	request
	// Session identifier
	SessionId JsonInt64 `json:"session_id"`
}

func (req TerminateSessionRequest) GetFunctionName() string {
	return "terminateSession"
}

// Terminates a session of the current user
func (client *Client) TerminateSession(ctx context.Context, req *TerminateSessionRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type TerminateAllOtherSessionsRequest struct {
	request
}

func (req TerminateAllOtherSessionsRequest) GetFunctionName() string {
	return "terminateAllOtherSessions"
}

// Terminates all other sessions of the current user
func (client *Client) TerminateAllOtherSessions(ctx context.Context) (*Ok, error) {
	req := &TerminateAllOtherSessionsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ConfirmSessionRequest struct {
	request
	// Session identifier
	SessionId JsonInt64 `json:"session_id"`
}

func (req ConfirmSessionRequest) GetFunctionName() string {
	return "confirmSession"
}

// Confirms an unconfirmed session of the current user from another device
func (client *Client) ConfirmSession(ctx context.Context, req *ConfirmSessionRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleSessionCanAcceptCallsRequest struct {
	request
	// Session identifier
	SessionId JsonInt64 `json:"session_id"`
	// Pass true to allow accepting incoming calls by the session; pass false otherwise
	CanAcceptCalls bool `json:"can_accept_calls"`
}

func (req ToggleSessionCanAcceptCallsRequest) GetFunctionName() string {
	return "toggleSessionCanAcceptCalls"
}

// Toggles whether a session can accept incoming calls
func (client *Client) ToggleSessionCanAcceptCalls(ctx context.Context, req *ToggleSessionCanAcceptCallsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleSessionCanAcceptSecretChatsRequest struct {
	request
	// Session identifier
	SessionId JsonInt64 `json:"session_id"`
	// Pass true to allow accepting secret chats by the session; pass false otherwise
	CanAcceptSecretChats bool `json:"can_accept_secret_chats"`
}

func (req ToggleSessionCanAcceptSecretChatsRequest) GetFunctionName() string {
	return "toggleSessionCanAcceptSecretChats"
}

// Toggles whether a session can accept incoming secret chats
func (client *Client) ToggleSessionCanAcceptSecretChats(ctx context.Context, req *ToggleSessionCanAcceptSecretChatsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetInactiveSessionTtlRequest struct {
	request
	// New number of days of inactivity before sessions will be automatically terminated; 1-366 days
	InactiveSessionTtlDays int32 `json:"inactive_session_ttl_days"`
}

func (req SetInactiveSessionTtlRequest) GetFunctionName() string {
	return "setInactiveSessionTtl"
}

// Changes the period of inactivity after which sessions will automatically be terminated
func (client *Client) SetInactiveSessionTtl(ctx context.Context, req *SetInactiveSessionTtlRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetConnectedWebsitesRequest struct {
	request
}

func (req GetConnectedWebsitesRequest) GetFunctionName() string {
	return "getConnectedWebsites"
}

// Returns all website where the current user used Telegram to log in
func (client *Client) GetConnectedWebsites(ctx context.Context) (*ConnectedWebsites, error) {
	req := &GetConnectedWebsitesRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalConnectedWebsites(result.Data)
}

type DisconnectWebsiteRequest struct {
	request
	// Website identifier
	WebsiteId JsonInt64 `json:"website_id"`
}

func (req DisconnectWebsiteRequest) GetFunctionName() string {
	return "disconnectWebsite"
}

// Disconnects website from the current user's Telegram account
func (client *Client) DisconnectWebsite(ctx context.Context, req *DisconnectWebsiteRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type DisconnectAllWebsitesRequest struct {
	request
}

func (req DisconnectAllWebsitesRequest) GetFunctionName() string {
	return "disconnectAllWebsites"
}

// Disconnects all websites from the current user's Telegram account
func (client *Client) DisconnectAllWebsites(ctx context.Context) (*Ok, error) {
	req := &DisconnectAllWebsitesRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetSupergroupUsernameRequest struct {
	request
	// Identifier of the supergroup or channel
	SupergroupId int64 `json:"supergroup_id"`
	// New value of the username. Use an empty string to remove the username. The username can't be completely removed if there is another active or disabled username
	Username string `json:"username"`
}

func (req SetSupergroupUsernameRequest) GetFunctionName() string {
	return "setSupergroupUsername"
}

// Changes the editable username of a supergroup or channel, requires owner privileges in the supergroup or channel
func (client *Client) SetSupergroupUsername(ctx context.Context, req *SetSupergroupUsernameRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleSupergroupUsernameIsActiveRequest struct {
	request
	// Identifier of the supergroup or channel
	SupergroupId int64 `json:"supergroup_id"`
	// The username to change
	Username string `json:"username"`
	// Pass true to activate the username; pass false to disable it
	IsActive bool `json:"is_active"`
}

func (req ToggleSupergroupUsernameIsActiveRequest) GetFunctionName() string {
	return "toggleSupergroupUsernameIsActive"
}

// Changes active state for a username of a supergroup or channel, requires owner privileges in the supergroup or channel. The editable username can't be disabled. May return an error with a message "USERNAMES_ACTIVE_TOO_MUCH" if the maximum number of active usernames has been reached
func (client *Client) ToggleSupergroupUsernameIsActive(ctx context.Context, req *ToggleSupergroupUsernameIsActiveRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type DisableAllSupergroupUsernamesRequest struct {
	request
	// Identifier of the supergroup or channel
	SupergroupId int64 `json:"supergroup_id"`
}

func (req DisableAllSupergroupUsernamesRequest) GetFunctionName() string {
	return "disableAllSupergroupUsernames"
}

// Disables all active non-editable usernames of a supergroup or channel, requires owner privileges in the supergroup or channel
func (client *Client) DisableAllSupergroupUsernames(ctx context.Context, req *DisableAllSupergroupUsernamesRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ReorderSupergroupActiveUsernamesRequest struct {
	request
	// Identifier of the supergroup or channel
	SupergroupId int64 `json:"supergroup_id"`
	// The new order of active usernames. All currently active usernames must be specified
	Usernames []string `json:"usernames"`
}

func (req ReorderSupergroupActiveUsernamesRequest) GetFunctionName() string {
	return "reorderSupergroupActiveUsernames"
}

// Changes order of active usernames of a supergroup or channel, requires owner privileges in the supergroup or channel
func (client *Client) ReorderSupergroupActiveUsernames(ctx context.Context, req *ReorderSupergroupActiveUsernamesRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetSupergroupStickerSetRequest struct {
	request
	// Identifier of the supergroup
	SupergroupId int64 `json:"supergroup_id"`
	// New value of the supergroup sticker set identifier. Use 0 to remove the supergroup sticker set
	StickerSetId JsonInt64 `json:"sticker_set_id"`
}

func (req SetSupergroupStickerSetRequest) GetFunctionName() string {
	return "setSupergroupStickerSet"
}

// Changes the sticker set of a supergroup; requires can_change_info administrator right
func (client *Client) SetSupergroupStickerSet(ctx context.Context, req *SetSupergroupStickerSetRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetSupergroupCustomEmojiStickerSetRequest struct {
	request
	// Identifier of the supergroup
	SupergroupId int64 `json:"supergroup_id"`
	// New value of the custom emoji sticker set identifier for the supergroup. Use 0 to remove the custom emoji sticker set in the supergroup
	CustomEmojiStickerSetId JsonInt64 `json:"custom_emoji_sticker_set_id"`
}

func (req SetSupergroupCustomEmojiStickerSetRequest) GetFunctionName() string {
	return "setSupergroupCustomEmojiStickerSet"
}

// Changes the custom emoji sticker set of a supergroup; requires can_change_info administrator right. The chat must have at least chatBoostFeatures.min_custom_emoji_sticker_set_boost_level boost level to pass the corresponding color
func (client *Client) SetSupergroupCustomEmojiStickerSet(ctx context.Context, req *SetSupergroupCustomEmojiStickerSetRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetSupergroupUnrestrictBoostCountRequest struct {
	request
	// Identifier of the supergroup
	SupergroupId int64 `json:"supergroup_id"`
	// New value of the unrestrict_boost_count supergroup setting; 0-8. Use 0 to remove the setting
	UnrestrictBoostCount int32 `json:"unrestrict_boost_count"`
}

func (req SetSupergroupUnrestrictBoostCountRequest) GetFunctionName() string {
	return "setSupergroupUnrestrictBoostCount"
}

// Changes the number of times the supergroup must be boosted by a user to ignore slow mode and chat permission restrictions; requires can_restrict_members administrator right
func (client *Client) SetSupergroupUnrestrictBoostCount(ctx context.Context, req *SetSupergroupUnrestrictBoostCountRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleSupergroupSignMessagesRequest struct {
	request
	// Identifier of the channel
	SupergroupId int64 `json:"supergroup_id"`
	// New value of sign_messages
	SignMessages bool `json:"sign_messages"`
	// New value of show_message_sender
	ShowMessageSender bool `json:"show_message_sender"`
}

func (req ToggleSupergroupSignMessagesRequest) GetFunctionName() string {
	return "toggleSupergroupSignMessages"
}

// Toggles whether sender signature or link to the account is added to sent messages in a channel; requires can_change_info member right
func (client *Client) ToggleSupergroupSignMessages(ctx context.Context, req *ToggleSupergroupSignMessagesRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleSupergroupJoinToSendMessagesRequest struct {
	request
	// Identifier of the supergroup that isn't a broadcast group
	SupergroupId int64 `json:"supergroup_id"`
	// New value of join_to_send_messages
	JoinToSendMessages bool `json:"join_to_send_messages"`
}

func (req ToggleSupergroupJoinToSendMessagesRequest) GetFunctionName() string {
	return "toggleSupergroupJoinToSendMessages"
}

// Toggles whether joining is mandatory to send messages to a discussion supergroup; requires can_restrict_members administrator right
func (client *Client) ToggleSupergroupJoinToSendMessages(ctx context.Context, req *ToggleSupergroupJoinToSendMessagesRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleSupergroupJoinByRequestRequest struct {
	request
	// Identifier of the supergroup that isn't a broadcast group
	SupergroupId int64 `json:"supergroup_id"`
	// New value of join_by_request
	JoinByRequest bool `json:"join_by_request"`
}

func (req ToggleSupergroupJoinByRequestRequest) GetFunctionName() string {
	return "toggleSupergroupJoinByRequest"
}

// Toggles whether all users directly joining the supergroup need to be approved by supergroup administrators; requires can_restrict_members administrator right
func (client *Client) ToggleSupergroupJoinByRequest(ctx context.Context, req *ToggleSupergroupJoinByRequestRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleSupergroupIsAllHistoryAvailableRequest struct {
	request
	// The identifier of the supergroup
	SupergroupId int64 `json:"supergroup_id"`
	// The new value of is_all_history_available
	IsAllHistoryAvailable bool `json:"is_all_history_available"`
}

func (req ToggleSupergroupIsAllHistoryAvailableRequest) GetFunctionName() string {
	return "toggleSupergroupIsAllHistoryAvailable"
}

// Toggles whether the message history of a supergroup is available to new members; requires can_change_info member right
func (client *Client) ToggleSupergroupIsAllHistoryAvailable(ctx context.Context, req *ToggleSupergroupIsAllHistoryAvailableRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleSupergroupCanHaveSponsoredMessagesRequest struct {
	request
	// The identifier of the channel
	SupergroupId int64 `json:"supergroup_id"`
	// The new value of can_have_sponsored_messages
	CanHaveSponsoredMessages bool `json:"can_have_sponsored_messages"`
}

func (req ToggleSupergroupCanHaveSponsoredMessagesRequest) GetFunctionName() string {
	return "toggleSupergroupCanHaveSponsoredMessages"
}

// Toggles whether sponsored messages are shown in the channel chat; requires owner privileges in the channel. The chat must have at least chatBoostFeatures.min_sponsored_message_disable_boost_level boost level to disable sponsored messages
func (client *Client) ToggleSupergroupCanHaveSponsoredMessages(ctx context.Context, req *ToggleSupergroupCanHaveSponsoredMessagesRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleSupergroupHasHiddenMembersRequest struct {
	request
	// Identifier of the supergroup
	SupergroupId int64 `json:"supergroup_id"`
	// New value of has_hidden_members
	HasHiddenMembers bool `json:"has_hidden_members"`
}

func (req ToggleSupergroupHasHiddenMembersRequest) GetFunctionName() string {
	return "toggleSupergroupHasHiddenMembers"
}

// Toggles whether non-administrators can receive only administrators and bots using getSupergroupMembers or searchChatMembers. Can be called only if supergroupFullInfo.can_hide_members == true
func (client *Client) ToggleSupergroupHasHiddenMembers(ctx context.Context, req *ToggleSupergroupHasHiddenMembersRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleSupergroupHasAggressiveAntiSpamEnabledRequest struct {
	request
	// The identifier of the supergroup, which isn't a broadcast group
	SupergroupId int64 `json:"supergroup_id"`
	// The new value of has_aggressive_anti_spam_enabled
	HasAggressiveAntiSpamEnabled bool `json:"has_aggressive_anti_spam_enabled"`
}

func (req ToggleSupergroupHasAggressiveAntiSpamEnabledRequest) GetFunctionName() string {
	return "toggleSupergroupHasAggressiveAntiSpamEnabled"
}

// Toggles whether aggressive anti-spam checks are enabled in the supergroup. Can be called only if supergroupFullInfo.can_toggle_aggressive_anti_spam == true
func (client *Client) ToggleSupergroupHasAggressiveAntiSpamEnabled(ctx context.Context, req *ToggleSupergroupHasAggressiveAntiSpamEnabledRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleSupergroupIsForumRequest struct {
	request
	// Identifier of the supergroup
	SupergroupId int64 `json:"supergroup_id"`
	// New value of is_forum
	IsForum bool `json:"is_forum"`
}

func (req ToggleSupergroupIsForumRequest) GetFunctionName() string {
	return "toggleSupergroupIsForum"
}

// Toggles whether the supergroup is a forum; requires owner privileges in the supergroup. Discussion supergroups can't be converted to forums
func (client *Client) ToggleSupergroupIsForum(ctx context.Context, req *ToggleSupergroupIsForumRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleSupergroupIsBroadcastGroupRequest struct {
	request
	// Identifier of the supergroup
	SupergroupId int64 `json:"supergroup_id"`
}

func (req ToggleSupergroupIsBroadcastGroupRequest) GetFunctionName() string {
	return "toggleSupergroupIsBroadcastGroup"
}

// Upgrades supergroup to a broadcast group; requires owner privileges in the supergroup
func (client *Client) ToggleSupergroupIsBroadcastGroup(ctx context.Context, req *ToggleSupergroupIsBroadcastGroupRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ReportSupergroupSpamRequest struct {
	request
	// Supergroup identifier
	SupergroupId int64 `json:"supergroup_id"`
	// Identifiers of messages to report. Use messageProperties.can_report_supergroup_spam to check whether the message can be reported
	MessageIds []int64 `json:"message_ids"`
}

func (req ReportSupergroupSpamRequest) GetFunctionName() string {
	return "reportSupergroupSpam"
}

// Reports messages in a supergroup as spam; requires administrator rights in the supergroup
func (client *Client) ReportSupergroupSpam(ctx context.Context, req *ReportSupergroupSpamRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ReportSupergroupAntiSpamFalsePositiveRequest struct {
	request
	// Supergroup identifier
	SupergroupId int64 `json:"supergroup_id"`
	// Identifier of the erroneously deleted message from chatEventMessageDeleted
	MessageId int64 `json:"message_id"`
}

func (req ReportSupergroupAntiSpamFalsePositiveRequest) GetFunctionName() string {
	return "reportSupergroupAntiSpamFalsePositive"
}

// Reports a false deletion of a message by aggressive anti-spam checks; requires administrator rights in the supergroup. Can be called only for messages from chatEventMessageDeleted with can_report_anti_spam_false_positive == true
func (client *Client) ReportSupergroupAntiSpamFalsePositive(ctx context.Context, req *ReportSupergroupAntiSpamFalsePositiveRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetSupergroupMembersRequest struct {
	request
	// Identifier of the supergroup or channel
	SupergroupId int64 `json:"supergroup_id"`
	// The type of users to return; pass null to use supergroupMembersFilterRecent
	Filter SupergroupMembersFilter `json:"filter"`
	// Number of users to skip
	Offset int32 `json:"offset"`
	// The maximum number of users to be returned; up to 200
	Limit int32 `json:"limit"`
}

func (req GetSupergroupMembersRequest) GetFunctionName() string {
	return "getSupergroupMembers"
}

// Returns information about members or banned users in a supergroup or channel. Can be used only if supergroupFullInfo.can_get_members == true; additionally, administrator privileges may be required for some filters
func (client *Client) GetSupergroupMembers(ctx context.Context, req *GetSupergroupMembersRequest) (*ChatMembers, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatMembers(result.Data)
}

type CloseSecretChatRequest struct {
	request
	// Secret chat identifier
	SecretChatId int32 `json:"secret_chat_id"`
}

func (req CloseSecretChatRequest) GetFunctionName() string {
	return "closeSecretChat"
}

// Closes a secret chat, effectively transferring its state to secretChatStateClosed
func (client *Client) CloseSecretChat(ctx context.Context, req *CloseSecretChatRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetChatEventLogRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Search query by which to filter events
	Query string `json:"query"`
	// Identifier of an event from which to return results. Use 0 to get results from the latest events
	FromEventId JsonInt64 `json:"from_event_id"`
	// The maximum number of events to return; up to 100
	Limit int32 `json:"limit"`
	// The types of events to return; pass null to get chat events of all types
	Filters *ChatEventLogFilters `json:"filters"`
	// User identifiers by which to filter events. By default, events relating to all users will be returned
	UserIds []int64 `json:"user_ids"`
}

func (req GetChatEventLogRequest) GetFunctionName() string {
	return "getChatEventLog"
}

// Returns a list of service actions taken by chat members and administrators in the last 48 hours. Available only for supergroups and channels. Requires administrator rights. Returns results in reverse chronological order (i.e., in order of decreasing event_id)
func (client *Client) GetChatEventLog(ctx context.Context, req *GetChatEventLogRequest) (*ChatEvents, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatEvents(result.Data)
}

type GetTimeZonesRequest struct {
	request
}

func (req GetTimeZonesRequest) GetFunctionName() string {
	return "getTimeZones"
}

// Returns the list of supported time zones
func (client *Client) GetTimeZones(ctx context.Context) (*TimeZones, error) {
	req := &GetTimeZonesRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalTimeZones(result.Data)
}

type GetPaymentFormRequest struct {
	request
	// The invoice
	InputInvoice InputInvoice `json:"input_invoice"`
	// Preferred payment form theme; pass null to use the default theme
	Theme *ThemeParameters `json:"theme"`
}

func (req GetPaymentFormRequest) GetFunctionName() string {
	return "getPaymentForm"
}

// Returns an invoice payment form. This method must be called when the user presses inline button of the type inlineKeyboardButtonTypeBuy, or wants to buy access to media in a messagePaidMedia message
func (client *Client) GetPaymentForm(ctx context.Context, req *GetPaymentFormRequest) (*PaymentForm, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalPaymentForm(result.Data)
}

type ValidateOrderInfoRequest struct {
	request
	// The invoice
	InputInvoice InputInvoice `json:"input_invoice"`
	// The order information, provided by the user; pass null if empty
	OrderInfo *OrderInfo `json:"order_info"`
	// Pass true to save the order information
	AllowSave bool `json:"allow_save"`
}

func (req ValidateOrderInfoRequest) GetFunctionName() string {
	return "validateOrderInfo"
}

// Validates the order information provided by a user and returns the available shipping options for a flexible invoice
func (client *Client) ValidateOrderInfo(ctx context.Context, req *ValidateOrderInfoRequest) (*ValidatedOrderInfo, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalValidatedOrderInfo(result.Data)
}

type SendPaymentFormRequest struct {
	request
	// The invoice
	InputInvoice InputInvoice `json:"input_invoice"`
	// Payment form identifier returned by getPaymentForm
	PaymentFormId JsonInt64 `json:"payment_form_id"`
	// Identifier returned by validateOrderInfo, or an empty string
	OrderInfoId string `json:"order_info_id"`
	// Identifier of a chosen shipping option, if applicable
	ShippingOptionId string `json:"shipping_option_id"`
	// The credentials chosen by user for payment; pass null for a payment in Telegram Stars
	Credentials InputCredentials `json:"credentials"`
	// Chosen by the user amount of tip in the smallest units of the currency
	TipAmount int64 `json:"tip_amount"`
}

func (req SendPaymentFormRequest) GetFunctionName() string {
	return "sendPaymentForm"
}

// Sends a filled-out payment form to the bot for final verification
func (client *Client) SendPaymentForm(ctx context.Context, req *SendPaymentFormRequest) (*PaymentResult, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalPaymentResult(result.Data)
}

type GetPaymentReceiptRequest struct {
	request
	// Chat identifier of the messagePaymentSuccessful message
	ChatId int64 `json:"chat_id"`
	// Message identifier
	MessageId int64 `json:"message_id"`
}

func (req GetPaymentReceiptRequest) GetFunctionName() string {
	return "getPaymentReceipt"
}

// Returns information about a successful payment
func (client *Client) GetPaymentReceipt(ctx context.Context, req *GetPaymentReceiptRequest) (*PaymentReceipt, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalPaymentReceipt(result.Data)
}

type GetSavedOrderInfoRequest struct {
	request
}

func (req GetSavedOrderInfoRequest) GetFunctionName() string {
	return "getSavedOrderInfo"
}

// Returns saved order information. Returns a 404 error if there is no saved order information
func (client *Client) GetSavedOrderInfo(ctx context.Context) (*OrderInfo, error) {
	req := &GetSavedOrderInfoRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOrderInfo(result.Data)
}

type DeleteSavedOrderInfoRequest struct {
	request
}

func (req DeleteSavedOrderInfoRequest) GetFunctionName() string {
	return "deleteSavedOrderInfo"
}

// Deletes saved order information
func (client *Client) DeleteSavedOrderInfo(ctx context.Context) (*Ok, error) {
	req := &DeleteSavedOrderInfoRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type DeleteSavedCredentialsRequest struct {
	request
}

func (req DeleteSavedCredentialsRequest) GetFunctionName() string {
	return "deleteSavedCredentials"
}

// Deletes saved credentials for all payment provider bots
func (client *Client) DeleteSavedCredentials(ctx context.Context) (*Ok, error) {
	req := &DeleteSavedCredentialsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetGiftSettingsRequest struct {
	request
	// The new settings
	Settings *GiftSettings `json:"settings"`
}

func (req SetGiftSettingsRequest) GetFunctionName() string {
	return "setGiftSettings"
}

// Changes settings for gift receiving for the current user
func (client *Client) SetGiftSettings(ctx context.Context, req *SetGiftSettingsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetAvailableGiftsRequest struct {
	request
}

func (req GetAvailableGiftsRequest) GetFunctionName() string {
	return "getAvailableGifts"
}

// Returns gifts that can be sent to other users and channel chats
func (client *Client) GetAvailableGifts(ctx context.Context) (*Gifts, error) {
	req := &GetAvailableGiftsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalGifts(result.Data)
}

type SendGiftRequest struct {
	request
	// Identifier of the gift to send
	GiftId JsonInt64 `json:"gift_id"`
	// Identifier of the user or the channel chat that will receive the gift
	OwnerId MessageSender `json:"owner_id"`
	// Text to show along with the gift; 0-getOption("gift_text_length_max") characters. Only Bold, Italic, Underline, Strikethrough, Spoiler, and CustomEmoji entities are allowed. Must be empty if the receiver enabled paid messages
	Text *FormattedText `json:"text"`
	// Pass true to show gift text and sender only to the gift receiver; otherwise, everyone will be able to see them
	IsPrivate bool `json:"is_private"`
	// Pass true to additionally pay for the gift upgrade and allow the receiver to upgrade it for free
	PayForUpgrade bool `json:"pay_for_upgrade"`
}

func (req SendGiftRequest) GetFunctionName() string {
	return "sendGift"
}

// Sends a gift to another user or channel chat. May return an error with a message "STARGIFT_USAGE_LIMITED" if the gift was sold out
func (client *Client) SendGift(ctx context.Context, req *SendGiftRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SellGiftRequest struct {
	request
	// Unique identifier of business connection on behalf of which to send the request; for bots only
	BusinessConnectionId string `json:"business_connection_id"`
	// Identifier of the gift
	ReceivedGiftId string `json:"received_gift_id"`
}

func (req SellGiftRequest) GetFunctionName() string {
	return "sellGift"
}

// Sells a gift for Telegram Stars
func (client *Client) SellGift(ctx context.Context, req *SellGiftRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleGiftIsSavedRequest struct {
	request
	// Identifier of the gift
	ReceivedGiftId string `json:"received_gift_id"`
	// Pass true to display the gift on the user's or the channel's profile page; pass false to remove it from the profile page
	IsSaved bool `json:"is_saved"`
}

func (req ToggleGiftIsSavedRequest) GetFunctionName() string {
	return "toggleGiftIsSaved"
}

// Toggles whether a gift is shown on the current user's or the channel's profile page; requires can_post_messages administrator right in the channel chat
func (client *Client) ToggleGiftIsSaved(ctx context.Context, req *ToggleGiftIsSavedRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetPinnedGiftsRequest struct {
	request
	// Identifier of the user or the channel chat that received the gifts
	OwnerId MessageSender `json:"owner_id"`
	// New list of pinned gifts. All gifts must be upgraded and saved on the profile page first. There can be up to getOption("pinned_gift_count_max") pinned gifts
	ReceivedGiftIds []string `json:"received_gift_ids"`
}

func (req SetPinnedGiftsRequest) GetFunctionName() string {
	return "setPinnedGifts"
}

// Changes the list of pinned gifts on the current user's or the channel's profile page; requires can_post_messages administrator right in the channel chat
func (client *Client) SetPinnedGifts(ctx context.Context, req *SetPinnedGiftsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ToggleChatGiftNotificationsRequest struct {
	request
	// Identifier of the channel chat
	ChatId int64 `json:"chat_id"`
	// Pass true to enable notifications about new gifts owned by the channel chat; pass false to disable the notifications
	AreEnabled bool `json:"are_enabled"`
}

func (req ToggleChatGiftNotificationsRequest) GetFunctionName() string {
	return "toggleChatGiftNotifications"
}

// Toggles whether notifications for new gifts received by a channel chat are sent to the current user; requires can_post_messages administrator right in the chat
func (client *Client) ToggleChatGiftNotifications(ctx context.Context, req *ToggleChatGiftNotificationsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetGiftUpgradePreviewRequest struct {
	request
	// Identifier of the gift
	GiftId JsonInt64 `json:"gift_id"`
}

func (req GetGiftUpgradePreviewRequest) GetFunctionName() string {
	return "getGiftUpgradePreview"
}

// Returns examples of possible upgraded gifts for a regular gift
func (client *Client) GetGiftUpgradePreview(ctx context.Context, req *GetGiftUpgradePreviewRequest) (*GiftUpgradePreview, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalGiftUpgradePreview(result.Data)
}

type UpgradeGiftRequest struct {
	request
	// Unique identifier of business connection on behalf of which to send the request; for bots only
	BusinessConnectionId string `json:"business_connection_id"`
	// Identifier of the gift
	ReceivedGiftId string `json:"received_gift_id"`
	// Pass true to keep the original gift text, sender and receiver in the upgraded gift
	KeepOriginalDetails bool `json:"keep_original_details"`
	// The amount of Telegram Stars required to pay for the upgrade. It the gift has prepaid_upgrade_star_count > 0, then pass 0, otherwise, pass gift.upgrade_star_count
	StarCount int64 `json:"star_count"`
}

func (req UpgradeGiftRequest) GetFunctionName() string {
	return "upgradeGift"
}

// Upgrades a regular gift
func (client *Client) UpgradeGift(ctx context.Context, req *UpgradeGiftRequest) (*UpgradeGiftResult, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalUpgradeGiftResult(result.Data)
}

type TransferGiftRequest struct {
	request
	// Unique identifier of business connection on behalf of which to send the request; for bots only
	BusinessConnectionId string `json:"business_connection_id"`
	// Identifier of the gift
	ReceivedGiftId string `json:"received_gift_id"`
	// Identifier of the user or the channel chat that will receive the gift
	NewOwnerId MessageSender `json:"new_owner_id"`
	// The amount of Telegram Stars required to pay for the transfer
	StarCount int64 `json:"star_count"`
}

func (req TransferGiftRequest) GetFunctionName() string {
	return "transferGift"
}

// Sends an upgraded gift to another user or a channel chat
func (client *Client) TransferGift(ctx context.Context, req *TransferGiftRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetReceivedGiftsRequest struct {
	request
	// Unique identifier of business connection on behalf of which to send the request; for bots only
	BusinessConnectionId string `json:"business_connection_id"`
	// Identifier of the gift receiver
	OwnerId MessageSender `json:"owner_id"`
	// Pass true to exclude gifts that aren't saved to the chat's profile page. Always true for gifts received by other users and channel chats without can_post_messages administrator right
	ExcludeUnsaved bool `json:"exclude_unsaved"`
	// Pass true to exclude gifts that are saved to the chat's profile page. Always false for gifts received by other users and channel chats without can_post_messages administrator right
	ExcludeSaved bool `json:"exclude_saved"`
	// Pass true to exclude gifts that can be purchased unlimited number of times
	ExcludeUnlimited bool `json:"exclude_unlimited"`
	// Pass true to exclude gifts that can be purchased limited number of times
	ExcludeLimited bool `json:"exclude_limited"`
	// Pass true to exclude upgraded gifts
	ExcludeUpgraded bool `json:"exclude_upgraded"`
	// Pass true to sort results by gift price instead of send date
	SortByPrice bool `json:"sort_by_price"`
	// Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results
	Offset string `json:"offset"`
	// The maximum number of gifts to be returned; must be positive and can't be greater than 100. For optimal performance, the number of returned objects is chosen by TDLib and can be smaller than the specified limit
	Limit int32 `json:"limit"`
}

func (req GetReceivedGiftsRequest) GetFunctionName() string {
	return "getReceivedGifts"
}

// Returns gifts received by the given user or chat
func (client *Client) GetReceivedGifts(ctx context.Context, req *GetReceivedGiftsRequest) (*ReceivedGifts, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalReceivedGifts(result.Data)
}

type GetReceivedGiftRequest struct {
	request
	// Identifier of the gift
	ReceivedGiftId string `json:"received_gift_id"`
}

func (req GetReceivedGiftRequest) GetFunctionName() string {
	return "getReceivedGift"
}

// Returns information about a received gift
func (client *Client) GetReceivedGift(ctx context.Context, req *GetReceivedGiftRequest) (*ReceivedGift, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalReceivedGift(result.Data)
}

type GetUpgradedGiftRequest struct {
	request
	// Unique name of the upgraded gift
	Name string `json:"name"`
}

func (req GetUpgradedGiftRequest) GetFunctionName() string {
	return "getUpgradedGift"
}

// Returns information about an upgraded gift by its name
func (client *Client) GetUpgradedGift(ctx context.Context, req *GetUpgradedGiftRequest) (*UpgradedGift, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalUpgradedGift(result.Data)
}

type GetUpgradedGiftWithdrawalUrlRequest struct {
	request
	// Identifier of the gift
	ReceivedGiftId string `json:"received_gift_id"`
	// The 2-step verification password of the current user
	Password string `json:"password"`
}

func (req GetUpgradedGiftWithdrawalUrlRequest) GetFunctionName() string {
	return "getUpgradedGiftWithdrawalUrl"
}

// Returns a URL for upgraded gift withdrawal in the TON blockchain as an NFT; requires owner privileges for gifts owned by a chat
func (client *Client) GetUpgradedGiftWithdrawalUrl(ctx context.Context, req *GetUpgradedGiftWithdrawalUrlRequest) (*HttpUrl, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalHttpUrl(result.Data)
}

type CreateInvoiceLinkRequest struct {
	request
	// Unique identifier of business connection on behalf of which to send the request
	BusinessConnectionId string `json:"business_connection_id"`
	// Information about the invoice of the type inputMessageInvoice
	Invoice InputMessageContent `json:"invoice"`
}

func (req CreateInvoiceLinkRequest) GetFunctionName() string {
	return "createInvoiceLink"
}

// Creates a link for the given invoice; for bots only
func (client *Client) CreateInvoiceLink(ctx context.Context, req *CreateInvoiceLinkRequest) (*HttpUrl, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalHttpUrl(result.Data)
}

type RefundStarPaymentRequest struct {
	request
	// Identifier of the user that did the payment
	UserId int64 `json:"user_id"`
	// Telegram payment identifier
	TelegramPaymentChargeId string `json:"telegram_payment_charge_id"`
}

func (req RefundStarPaymentRequest) GetFunctionName() string {
	return "refundStarPayment"
}

// Refunds a previously done payment in Telegram Stars; for bots only
func (client *Client) RefundStarPayment(ctx context.Context, req *RefundStarPaymentRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetSupportUserRequest struct {
	request
}

func (req GetSupportUserRequest) GetFunctionName() string {
	return "getSupportUser"
}

// Returns a user that can be contacted to get support
func (client *Client) GetSupportUser(ctx context.Context) (*User, error) {
	req := &GetSupportUserRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalUser(result.Data)
}

type GetBackgroundUrlRequest struct {
	request
	// Background name
	Name string `json:"name"`
	// Background type; backgroundTypeChatTheme isn't supported
	Type BackgroundType `json:"type"`
}

func (req GetBackgroundUrlRequest) GetFunctionName() string {
	return "getBackgroundUrl"
}

// Constructs a persistent HTTP URL for a background
func (client *Client) GetBackgroundUrl(ctx context.Context, req *GetBackgroundUrlRequest) (*HttpUrl, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalHttpUrl(result.Data)
}

type SearchBackgroundRequest struct {
	request
	// The name of the background
	Name string `json:"name"`
}

func (req SearchBackgroundRequest) GetFunctionName() string {
	return "searchBackground"
}

// Searches for a background by its name
func (client *Client) SearchBackground(ctx context.Context, req *SearchBackgroundRequest) (*Background, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalBackground(result.Data)
}

type SetDefaultBackgroundRequest struct {
	request
	// The input background to use; pass null to create a new filled background
	Background InputBackground `json:"background"`
	// Background type; pass null to use the default type of the remote background; backgroundTypeChatTheme isn't supported
	Type BackgroundType `json:"type"`
	// Pass true if the background is set for a dark theme
	ForDarkTheme bool `json:"for_dark_theme"`
}

func (req SetDefaultBackgroundRequest) GetFunctionName() string {
	return "setDefaultBackground"
}

// Sets default background for chats; adds the background to the list of installed backgrounds
func (client *Client) SetDefaultBackground(ctx context.Context, req *SetDefaultBackgroundRequest) (*Background, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalBackground(result.Data)
}

type DeleteDefaultBackgroundRequest struct {
	request
	// Pass true if the background is deleted for a dark theme
	ForDarkTheme bool `json:"for_dark_theme"`
}

func (req DeleteDefaultBackgroundRequest) GetFunctionName() string {
	return "deleteDefaultBackground"
}

// Deletes default background for chats
func (client *Client) DeleteDefaultBackground(ctx context.Context, req *DeleteDefaultBackgroundRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetInstalledBackgroundsRequest struct {
	request
	// Pass true to order returned backgrounds for a dark theme
	ForDarkTheme bool `json:"for_dark_theme"`
}

func (req GetInstalledBackgroundsRequest) GetFunctionName() string {
	return "getInstalledBackgrounds"
}

// Returns backgrounds installed by the user
func (client *Client) GetInstalledBackgrounds(ctx context.Context, req *GetInstalledBackgroundsRequest) (*Backgrounds, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalBackgrounds(result.Data)
}

type RemoveInstalledBackgroundRequest struct {
	request
	// The background identifier
	BackgroundId JsonInt64 `json:"background_id"`
}

func (req RemoveInstalledBackgroundRequest) GetFunctionName() string {
	return "removeInstalledBackground"
}

// Removes background from the list of installed backgrounds
func (client *Client) RemoveInstalledBackground(ctx context.Context, req *RemoveInstalledBackgroundRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ResetInstalledBackgroundsRequest struct {
	request
}

func (req ResetInstalledBackgroundsRequest) GetFunctionName() string {
	return "resetInstalledBackgrounds"
}

// Resets list of installed backgrounds to its default value
func (client *Client) ResetInstalledBackgrounds(ctx context.Context) (*Ok, error) {
	req := &ResetInstalledBackgroundsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetLocalizationTargetInfoRequest struct {
	request
	// Pass true to get only locally available information without sending network requests
	OnlyLocal bool `json:"only_local"`
}

func (req GetLocalizationTargetInfoRequest) GetFunctionName() string {
	return "getLocalizationTargetInfo"
}

// Returns information about the current localization target. This is an offline method if only_local is true. Can be called before authorization
func (client *Client) GetLocalizationTargetInfo(ctx context.Context, req *GetLocalizationTargetInfoRequest) (*LocalizationTargetInfo, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalLocalizationTargetInfo(result.Data)
}

type GetLanguagePackInfoRequest struct {
	request
	// Language pack identifier
	LanguagePackId string `json:"language_pack_id"`
}

func (req GetLanguagePackInfoRequest) GetFunctionName() string {
	return "getLanguagePackInfo"
}

// Returns information about a language pack. Returned language pack identifier may be different from a provided one. Can be called before authorization
func (client *Client) GetLanguagePackInfo(ctx context.Context, req *GetLanguagePackInfoRequest) (*LanguagePackInfo, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalLanguagePackInfo(result.Data)
}

type GetLanguagePackStringsRequest struct {
	request
	// Language pack identifier of the strings to be returned
	LanguagePackId string `json:"language_pack_id"`
	// Language pack keys of the strings to be returned; leave empty to request all available strings
	Keys []string `json:"keys"`
}

func (req GetLanguagePackStringsRequest) GetFunctionName() string {
	return "getLanguagePackStrings"
}

// Returns strings from a language pack in the current localization target by their keys. Can be called before authorization
func (client *Client) GetLanguagePackStrings(ctx context.Context, req *GetLanguagePackStringsRequest) (*LanguagePackStrings, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalLanguagePackStrings(result.Data)
}

type SynchronizeLanguagePackRequest struct {
	request
	// Language pack identifier
	LanguagePackId string `json:"language_pack_id"`
}

func (req SynchronizeLanguagePackRequest) GetFunctionName() string {
	return "synchronizeLanguagePack"
}

// Fetches the latest versions of all strings from a language pack in the current localization target from the server. This method doesn't need to be called explicitly for the current used/base language packs. Can be called before authorization
func (client *Client) SynchronizeLanguagePack(ctx context.Context, req *SynchronizeLanguagePackRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type AddCustomServerLanguagePackRequest struct {
	request
	// Identifier of a language pack to be added
	LanguagePackId string `json:"language_pack_id"`
}

func (req AddCustomServerLanguagePackRequest) GetFunctionName() string {
	return "addCustomServerLanguagePack"
}

// Adds a custom server language pack to the list of installed language packs in current localization target. Can be called before authorization
func (client *Client) AddCustomServerLanguagePack(ctx context.Context, req *AddCustomServerLanguagePackRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetCustomLanguagePackRequest struct {
	request
	// Information about the language pack. Language pack identifier must start with 'X', consist only of English letters, digits and hyphens, and must not exceed 64 characters. Can be called before authorization
	Info *LanguagePackInfo `json:"info"`
	// Strings of the new language pack
	Strings []*LanguagePackString `json:"strings"`
}

func (req SetCustomLanguagePackRequest) GetFunctionName() string {
	return "setCustomLanguagePack"
}

// Adds or changes a custom local language pack to the current localization target
func (client *Client) SetCustomLanguagePack(ctx context.Context, req *SetCustomLanguagePackRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type EditCustomLanguagePackInfoRequest struct {
	request
	// New information about the custom local language pack
	Info *LanguagePackInfo `json:"info"`
}

func (req EditCustomLanguagePackInfoRequest) GetFunctionName() string {
	return "editCustomLanguagePackInfo"
}

// Edits information about a custom local language pack in the current localization target. Can be called before authorization
func (client *Client) EditCustomLanguagePackInfo(ctx context.Context, req *EditCustomLanguagePackInfoRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetCustomLanguagePackStringRequest struct {
	request
	// Identifier of a previously added custom local language pack in the current localization target
	LanguagePackId string `json:"language_pack_id"`
	// New language pack string
	NewString *LanguagePackString `json:"new_string"`
}

func (req SetCustomLanguagePackStringRequest) GetFunctionName() string {
	return "setCustomLanguagePackString"
}

// Adds, edits or deletes a string in a custom local language pack. Can be called before authorization
func (client *Client) SetCustomLanguagePackString(ctx context.Context, req *SetCustomLanguagePackStringRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type DeleteLanguagePackRequest struct {
	request
	// Identifier of the language pack to delete
	LanguagePackId string `json:"language_pack_id"`
}

func (req DeleteLanguagePackRequest) GetFunctionName() string {
	return "deleteLanguagePack"
}

// Deletes all information about a language pack in the current localization target. The language pack which is currently in use (including base language pack) or is being synchronized can't be deleted. Can be called before authorization
func (client *Client) DeleteLanguagePack(ctx context.Context, req *DeleteLanguagePackRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type RegisterDeviceRequest struct {
	request
	// Device token
	DeviceToken DeviceToken `json:"device_token"`
	// List of user identifiers of other users currently using the application
	OtherUserIds []int64 `json:"other_user_ids"`
}

func (req RegisterDeviceRequest) GetFunctionName() string {
	return "registerDevice"
}

// Registers the currently used device for receiving push notifications. Returns a globally unique identifier of the push notification subscription
func (client *Client) RegisterDevice(ctx context.Context, req *RegisterDeviceRequest) (*PushReceiverId, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalPushReceiverId(result.Data)
}

type ProcessPushNotificationRequest struct {
	request
	// JSON-encoded push notification payload with all fields sent by the server, and "google.sent_time" and "google.notification.sound" fields added
	Payload string `json:"payload"`
}

func (req ProcessPushNotificationRequest) GetFunctionName() string {
	return "processPushNotification"
}

// Handles a push notification. Returns error with code 406 if the push notification is not supported and connection to the server is required to fetch new data. Can be called before authorization
func (client *Client) ProcessPushNotification(ctx context.Context, req *ProcessPushNotificationRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetPushReceiverIdRequest struct {
	request
	// JSON-encoded push notification payload
	Payload string `json:"payload"`
}

func (req GetPushReceiverIdRequest) GetFunctionName() string {
	return "getPushReceiverId"
}

// Returns a globally unique push notification subscription identifier for identification of an account, which has received a push notification. Can be called synchronously
func GetPushReceiverId(req *GetPushReceiverIdRequest) (*PushReceiverId, error) {
	result, err := Execute(req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalPushReceiverId(result.Data)
}

// deprecated
// Returns a globally unique push notification subscription identifier for identification of an account, which has received a push notification. Can be called synchronously
func (client *Client) GetPushReceiverId(req *GetPushReceiverIdRequest) (*PushReceiverId, error) {
	return GetPushReceiverId(req)
}

type GetRecentlyVisitedTMeUrlsRequest struct {
	request
	// Google Play referrer to identify the user
	Referrer string `json:"referrer"`
}

func (req GetRecentlyVisitedTMeUrlsRequest) GetFunctionName() string {
	return "getRecentlyVisitedTMeUrls"
}

// Returns t.me URLs recently visited by a newly registered user
func (client *Client) GetRecentlyVisitedTMeUrls(ctx context.Context, req *GetRecentlyVisitedTMeUrlsRequest) (*TMeUrls, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalTMeUrls(result.Data)
}

type SetUserPrivacySettingRulesRequest struct {
	request
	// The privacy setting
	Setting UserPrivacySetting `json:"setting"`
	// The new privacy rules
	Rules *UserPrivacySettingRules `json:"rules"`
}

func (req SetUserPrivacySettingRulesRequest) GetFunctionName() string {
	return "setUserPrivacySettingRules"
}

// Changes user privacy settings
func (client *Client) SetUserPrivacySettingRules(ctx context.Context, req *SetUserPrivacySettingRulesRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetUserPrivacySettingRulesRequest struct {
	request
	// The privacy setting
	Setting UserPrivacySetting `json:"setting"`
}

func (req GetUserPrivacySettingRulesRequest) GetFunctionName() string {
	return "getUserPrivacySettingRules"
}

// Returns the current privacy settings
func (client *Client) GetUserPrivacySettingRules(ctx context.Context, req *GetUserPrivacySettingRulesRequest) (*UserPrivacySettingRules, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalUserPrivacySettingRules(result.Data)
}

type SetReadDatePrivacySettingsRequest struct {
	request
	// New settings
	Settings *ReadDatePrivacySettings `json:"settings"`
}

func (req SetReadDatePrivacySettingsRequest) GetFunctionName() string {
	return "setReadDatePrivacySettings"
}

// Changes privacy settings for message read date
func (client *Client) SetReadDatePrivacySettings(ctx context.Context, req *SetReadDatePrivacySettingsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetReadDatePrivacySettingsRequest struct {
	request
}

func (req GetReadDatePrivacySettingsRequest) GetFunctionName() string {
	return "getReadDatePrivacySettings"
}

// Returns privacy settings for message read date
func (client *Client) GetReadDatePrivacySettings(ctx context.Context) (*ReadDatePrivacySettings, error) {
	req := &GetReadDatePrivacySettingsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalReadDatePrivacySettings(result.Data)
}

type SetNewChatPrivacySettingsRequest struct {
	request
	// New settings
	Settings *NewChatPrivacySettings `json:"settings"`
}

func (req SetNewChatPrivacySettingsRequest) GetFunctionName() string {
	return "setNewChatPrivacySettings"
}

// Changes privacy settings for new chat creation; can be used only if getOption("can_set_new_chat_privacy_settings")
func (client *Client) SetNewChatPrivacySettings(ctx context.Context, req *SetNewChatPrivacySettingsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetNewChatPrivacySettingsRequest struct {
	request
}

func (req GetNewChatPrivacySettingsRequest) GetFunctionName() string {
	return "getNewChatPrivacySettings"
}

// Returns privacy settings for new chat creation
func (client *Client) GetNewChatPrivacySettings(ctx context.Context) (*NewChatPrivacySettings, error) {
	req := &GetNewChatPrivacySettingsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalNewChatPrivacySettings(result.Data)
}

type GetPaidMessageRevenueRequest struct {
	request
	// Identifier of the user
	UserId int64 `json:"user_id"`
}

func (req GetPaidMessageRevenueRequest) GetFunctionName() string {
	return "getPaidMessageRevenue"
}

// Returns the total number of Telegram Stars received by the current user for paid messages from the given user
func (client *Client) GetPaidMessageRevenue(ctx context.Context, req *GetPaidMessageRevenueRequest) (*StarCount, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStarCount(result.Data)
}

type AllowUnpaidMessagesFromUserRequest struct {
	request
	// Identifier of the user
	UserId int64 `json:"user_id"`
	// Pass true to refund the user previously paid messages
	RefundPayments bool `json:"refund_payments"`
}

func (req AllowUnpaidMessagesFromUserRequest) GetFunctionName() string {
	return "allowUnpaidMessagesFromUser"
}

// Allows the specified user to send unpaid private messages to the current user by adding a rule to userPrivacySettingAllowUnpaidMessages
func (client *Client) AllowUnpaidMessagesFromUser(ctx context.Context, req *AllowUnpaidMessagesFromUserRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetChatPaidMessageStarCountRequest struct {
	request
	// Identifier of the supergroup chat
	ChatId int64 `json:"chat_id"`
	// The new number of Telegram Stars that must be paid for each message that is sent to the supergroup chat unless the sender is an administrator of the chat; 0-getOption("paid_message_star_count_max"). The supergroup will receive getOption("paid_message_earnings_per_mille") Telegram Stars for each 1000 Telegram Stars paid for message sending
	PaidMessageStarCount int64 `json:"paid_message_star_count"`
}

func (req SetChatPaidMessageStarCountRequest) GetFunctionName() string {
	return "setChatPaidMessageStarCount"
}

// Changes the amount of Telegram Stars that must be paid to send a message to a supergroup chat; requires can_restrict_members administrator right and supergroupFullInfo.can_enable_paid_messages
func (client *Client) SetChatPaidMessageStarCount(ctx context.Context, req *SetChatPaidMessageStarCountRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type CanSendMessageToUserRequest struct {
	request
	// Identifier of the other user
	UserId int64 `json:"user_id"`
	// Pass true to get only locally available information without sending network requests
	OnlyLocal bool `json:"only_local"`
}

func (req CanSendMessageToUserRequest) GetFunctionName() string {
	return "canSendMessageToUser"
}

// Check whether the current user can message another user or try to create a chat with them
func (client *Client) CanSendMessageToUser(ctx context.Context, req *CanSendMessageToUserRequest) (CanSendMessageToUserResult, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	switch result.MetaType {
	case ConstructorCanSendMessageToUserResultOk:
		return UnmarshalCanSendMessageToUserResultOk(result.Data)

	case ConstructorCanSendMessageToUserResultUserHasPaidMessages:
		return UnmarshalCanSendMessageToUserResultUserHasPaidMessages(result.Data)

	case ConstructorCanSendMessageToUserResultUserIsDeleted:
		return UnmarshalCanSendMessageToUserResultUserIsDeleted(result.Data)

	case ConstructorCanSendMessageToUserResultUserRestrictsNewChats:
		return UnmarshalCanSendMessageToUserResultUserRestrictsNewChats(result.Data)

	default:
		return nil, errors.New("invalid type")
	}
}

type GetOptionRequest struct {
	request
	// The name of the option
	Name string `json:"name"`
}

func (req GetOptionRequest) GetFunctionName() string {
	return "getOption"
}

// Returns the value of an option by its name. (Check the list of available options on https://core.telegram.org/tdlib/options.) Can be called before authorization. Can be called synchronously for options "version" and "commit_hash"
func GetOption(req *GetOptionRequest) (OptionValue, error) {
	result, err := Execute(req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	switch result.MetaType {
	case ConstructorOptionValueBoolean:
		return UnmarshalOptionValueBoolean(result.Data)

	case ConstructorOptionValueEmpty:
		return UnmarshalOptionValueEmpty(result.Data)

	case ConstructorOptionValueInteger:
		return UnmarshalOptionValueInteger(result.Data)

	case ConstructorOptionValueString:
		return UnmarshalOptionValueString(result.Data)

	default:
		return nil, errors.New("invalid type")
	}
}

// deprecated
// Returns the value of an option by its name. (Check the list of available options on https://core.telegram.org/tdlib/options.) Can be called before authorization. Can be called synchronously for options "version" and "commit_hash"
func (client *Client) GetOption(req *GetOptionRequest) (OptionValue, error) {
	return GetOption(req)
}

type SetOptionRequest struct {
	request
	// The name of the option
	Name string `json:"name"`
	// The new value of the option; pass null to reset option value to a default value
	Value OptionValue `json:"value"`
}

func (req SetOptionRequest) GetFunctionName() string {
	return "setOption"
}

// Sets the value of an option. (Check the list of available options on https://core.telegram.org/tdlib/options.) Only writable options can be set. Can be called before authorization
func (client *Client) SetOption(ctx context.Context, req *SetOptionRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetAccountTtlRequest struct {
	request
	// New account TTL
	Ttl *AccountTtl `json:"ttl"`
}

func (req SetAccountTtlRequest) GetFunctionName() string {
	return "setAccountTtl"
}

// Changes the period of inactivity after which the account of the current user will automatically be deleted
func (client *Client) SetAccountTtl(ctx context.Context, req *SetAccountTtlRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetAccountTtlRequest struct {
	request
}

func (req GetAccountTtlRequest) GetFunctionName() string {
	return "getAccountTtl"
}

// Returns the period of inactivity after which the account of the current user will automatically be deleted
func (client *Client) GetAccountTtl(ctx context.Context) (*AccountTtl, error) {
	req := &GetAccountTtlRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalAccountTtl(result.Data)
}

type DeleteAccountRequest struct {
	request
	// The reason why the account was deleted; optional
	Reason string `json:"reason"`
	// The 2-step verification password of the current user. If the current user isn't authorized, then an empty string can be passed and account deletion can be canceled within one week
	Password string `json:"password"`
}

func (req DeleteAccountRequest) GetFunctionName() string {
	return "deleteAccount"
}

// Deletes the account of the current user, deleting all information associated with the user from the server. The phone number of the account can be used to create a new account. Can be called before authorization when the current authorization state is authorizationStateWaitPassword
func (client *Client) DeleteAccount(ctx context.Context, req *DeleteAccountRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetDefaultMessageAutoDeleteTimeRequest struct {
	request
	// New default message auto-delete time; must be from 0 up to 365 * 86400 and be divisible by 86400. If 0, then messages aren't deleted automatically
	MessageAutoDeleteTime *MessageAutoDeleteTime `json:"message_auto_delete_time"`
}

func (req SetDefaultMessageAutoDeleteTimeRequest) GetFunctionName() string {
	return "setDefaultMessageAutoDeleteTime"
}

// Changes the default message auto-delete time for new chats
func (client *Client) SetDefaultMessageAutoDeleteTime(ctx context.Context, req *SetDefaultMessageAutoDeleteTimeRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetDefaultMessageAutoDeleteTimeRequest struct {
	request
}

func (req GetDefaultMessageAutoDeleteTimeRequest) GetFunctionName() string {
	return "getDefaultMessageAutoDeleteTime"
}

// Returns default message auto-delete time setting for new chats
func (client *Client) GetDefaultMessageAutoDeleteTime(ctx context.Context) (*MessageAutoDeleteTime, error) {
	req := &GetDefaultMessageAutoDeleteTimeRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessageAutoDeleteTime(result.Data)
}

type RemoveChatActionBarRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
}

func (req RemoveChatActionBarRequest) GetFunctionName() string {
	return "removeChatActionBar"
}

// Removes a chat action bar without any other action
func (client *Client) RemoveChatActionBar(ctx context.Context, req *RemoveChatActionBarRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ReportChatRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Option identifier chosen by the user; leave empty for the initial request
	OptionId []byte `json:"option_id"`
	// Identifiers of reported messages. Use messageProperties.can_report_chat to check whether the message can be reported
	MessageIds []int64 `json:"message_ids"`
	// Additional report details if asked by the server; 0-1024 characters; leave empty for the initial request
	Text string `json:"text"`
}

func (req ReportChatRequest) GetFunctionName() string {
	return "reportChat"
}

// Reports a chat to the Telegram moderators. A chat can be reported only from the chat action bar, or if chat.can_be_reported
func (client *Client) ReportChat(ctx context.Context, req *ReportChatRequest) (ReportChatResult, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	switch result.MetaType {
	case ConstructorReportChatResultOk:
		return UnmarshalReportChatResultOk(result.Data)

	case ConstructorReportChatResultOptionRequired:
		return UnmarshalReportChatResultOptionRequired(result.Data)

	case ConstructorReportChatResultTextRequired:
		return UnmarshalReportChatResultTextRequired(result.Data)

	case ConstructorReportChatResultMessagesRequired:
		return UnmarshalReportChatResultMessagesRequired(result.Data)

	default:
		return nil, errors.New("invalid type")
	}
}

type ReportChatPhotoRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Identifier of the photo to report. Only full photos from chatPhoto can be reported
	FileId int32 `json:"file_id"`
	// The reason for reporting the chat photo
	Reason ReportReason `json:"reason"`
	// Additional report details; 0-1024 characters
	Text string `json:"text"`
}

func (req ReportChatPhotoRequest) GetFunctionName() string {
	return "reportChatPhoto"
}

// Reports a chat photo to the Telegram moderators. A chat photo can be reported only if chat.can_be_reported
func (client *Client) ReportChatPhoto(ctx context.Context, req *ReportChatPhotoRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ReportMessageReactionsRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Message identifier
	MessageId int64 `json:"message_id"`
	// Identifier of the sender, which added the reaction
	SenderId MessageSender `json:"sender_id"`
}

func (req ReportMessageReactionsRequest) GetFunctionName() string {
	return "reportMessageReactions"
}

// Reports reactions set on a message to the Telegram moderators. Reactions on a message can be reported only if messageProperties.can_report_reactions
func (client *Client) ReportMessageReactions(ctx context.Context, req *ReportMessageReactionsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetChatRevenueStatisticsRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Pass true if a dark theme is used by the application
	IsDark bool `json:"is_dark"`
}

func (req GetChatRevenueStatisticsRequest) GetFunctionName() string {
	return "getChatRevenueStatistics"
}

// Returns detailed revenue statistics about a chat. Currently, this method can be used only for channels if supergroupFullInfo.can_get_revenue_statistics == true or bots if userFullInfo.bot_info.can_get_revenue_statistics == true
func (client *Client) GetChatRevenueStatistics(ctx context.Context, req *GetChatRevenueStatisticsRequest) (*ChatRevenueStatistics, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatRevenueStatistics(result.Data)
}

type GetChatRevenueWithdrawalUrlRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// The 2-step verification password of the current user
	Password string `json:"password"`
}

func (req GetChatRevenueWithdrawalUrlRequest) GetFunctionName() string {
	return "getChatRevenueWithdrawalUrl"
}

// Returns a URL for chat revenue withdrawal; requires owner privileges in the channel chat or the bot. Currently, this method can be used only if getOption("can_withdraw_chat_revenue") for channels with supergroupFullInfo.can_get_revenue_statistics == true or bots with userFullInfo.bot_info.can_get_revenue_statistics == true
func (client *Client) GetChatRevenueWithdrawalUrl(ctx context.Context, req *GetChatRevenueWithdrawalUrlRequest) (*HttpUrl, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalHttpUrl(result.Data)
}

type GetChatRevenueTransactionsRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Number of transactions to skip
	Offset int32 `json:"offset"`
	// The maximum number of transactions to be returned; up to 200
	Limit int32 `json:"limit"`
}

func (req GetChatRevenueTransactionsRequest) GetFunctionName() string {
	return "getChatRevenueTransactions"
}

// Returns the list of revenue transactions for a chat. Currently, this method can be used only for channels if supergroupFullInfo.can_get_revenue_statistics == true or bots if userFullInfo.bot_info.can_get_revenue_statistics == true
func (client *Client) GetChatRevenueTransactions(ctx context.Context, req *GetChatRevenueTransactionsRequest) (*ChatRevenueTransactions, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChatRevenueTransactions(result.Data)
}

type GetStarRevenueStatisticsRequest struct {
	request
	// Identifier of the owner of the Telegram Stars; can be identifier of the current user, an owned bot, or a supergroup or a channel chat with supergroupFullInfo.can_get_star_revenue_statistics == true
	OwnerId MessageSender `json:"owner_id"`
	// Pass true if a dark theme is used by the application
	IsDark bool `json:"is_dark"`
}

func (req GetStarRevenueStatisticsRequest) GetFunctionName() string {
	return "getStarRevenueStatistics"
}

// Returns detailed Telegram Star revenue statistics
func (client *Client) GetStarRevenueStatistics(ctx context.Context, req *GetStarRevenueStatisticsRequest) (*StarRevenueStatistics, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStarRevenueStatistics(result.Data)
}

type GetStarWithdrawalUrlRequest struct {
	request
	// Identifier of the owner of the Telegram Stars; can be identifier of the current user, an owned bot, or an owned supergroup or channel chat
	OwnerId MessageSender `json:"owner_id"`
	// The number of Telegram Stars to withdraw. Must be at least getOption("star_withdrawal_count_min")
	StarCount int64 `json:"star_count"`
	// The 2-step verification password of the current user
	Password string `json:"password"`
}

func (req GetStarWithdrawalUrlRequest) GetFunctionName() string {
	return "getStarWithdrawalUrl"
}

// Returns a URL for Telegram Star withdrawal
func (client *Client) GetStarWithdrawalUrl(ctx context.Context, req *GetStarWithdrawalUrlRequest) (*HttpUrl, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalHttpUrl(result.Data)
}

type GetStarAdAccountUrlRequest struct {
	request
	// Identifier of the owner of the Telegram Stars; can be identifier of an owned bot, or identifier of an owned channel chat
	OwnerId MessageSender `json:"owner_id"`
}

func (req GetStarAdAccountUrlRequest) GetFunctionName() string {
	return "getStarAdAccountUrl"
}

// Returns a URL for a Telegram Ad platform account that can be used to set up advertisements for the chat paid in the owned Telegram Stars
func (client *Client) GetStarAdAccountUrl(ctx context.Context, req *GetStarAdAccountUrlRequest) (*HttpUrl, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalHttpUrl(result.Data)
}

type GetChatStatisticsRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Pass true if a dark theme is used by the application
	IsDark bool `json:"is_dark"`
}

func (req GetChatStatisticsRequest) GetFunctionName() string {
	return "getChatStatistics"
}

// Returns detailed statistics about a chat. Currently, this method can be used only for supergroups and channels. Can be used only if supergroupFullInfo.can_get_statistics == true
func (client *Client) GetChatStatistics(ctx context.Context, req *GetChatStatisticsRequest) (ChatStatistics, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	switch result.MetaType {
	case ConstructorChatStatisticsSupergroup:
		return UnmarshalChatStatisticsSupergroup(result.Data)

	case ConstructorChatStatisticsChannel:
		return UnmarshalChatStatisticsChannel(result.Data)

	default:
		return nil, errors.New("invalid type")
	}
}

type GetMessageStatisticsRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Message identifier
	MessageId int64 `json:"message_id"`
	// Pass true if a dark theme is used by the application
	IsDark bool `json:"is_dark"`
}

func (req GetMessageStatisticsRequest) GetFunctionName() string {
	return "getMessageStatistics"
}

// Returns detailed statistics about a message. Can be used only if messageProperties.can_get_statistics == true
func (client *Client) GetMessageStatistics(ctx context.Context, req *GetMessageStatisticsRequest) (*MessageStatistics, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalMessageStatistics(result.Data)
}

type GetMessagePublicForwardsRequest struct {
	request
	// Chat identifier of the message
	ChatId int64 `json:"chat_id"`
	// Message identifier
	MessageId int64 `json:"message_id"`
	// Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results
	Offset string `json:"offset"`
	// The maximum number of messages and stories to be returned; must be positive and can't be greater than 100. For optimal performance, the number of returned objects is chosen by TDLib and can be smaller than the specified limit
	Limit int32 `json:"limit"`
}

func (req GetMessagePublicForwardsRequest) GetFunctionName() string {
	return "getMessagePublicForwards"
}

// Returns forwarded copies of a channel message to different public channels and public reposts as a story. Can be used only if messageProperties.can_get_statistics == true. For optimal performance, the number of returned messages and stories is chosen by TDLib
func (client *Client) GetMessagePublicForwards(ctx context.Context, req *GetMessagePublicForwardsRequest) (*PublicForwards, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalPublicForwards(result.Data)
}

type GetStoryStatisticsRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Story identifier
	StoryId int32 `json:"story_id"`
	// Pass true if a dark theme is used by the application
	IsDark bool `json:"is_dark"`
}

func (req GetStoryStatisticsRequest) GetFunctionName() string {
	return "getStoryStatistics"
}

// Returns detailed statistics about a story. Can be used only if story.can_get_statistics == true
func (client *Client) GetStoryStatistics(ctx context.Context, req *GetStoryStatisticsRequest) (*StoryStatistics, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStoryStatistics(result.Data)
}

type GetStatisticalGraphRequest struct {
	request
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// The token for graph loading
	Token string `json:"token"`
	// X-value for zoomed in graph or 0 otherwise
	X int64 `json:"x"`
}

func (req GetStatisticalGraphRequest) GetFunctionName() string {
	return "getStatisticalGraph"
}

// Loads an asynchronous or a zoomed in statistical graph
func (client *Client) GetStatisticalGraph(ctx context.Context, req *GetStatisticalGraphRequest) (StatisticalGraph, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	switch result.MetaType {
	case ConstructorStatisticalGraphData:
		return UnmarshalStatisticalGraphData(result.Data)

	case ConstructorStatisticalGraphAsync:
		return UnmarshalStatisticalGraphAsync(result.Data)

	case ConstructorStatisticalGraphError:
		return UnmarshalStatisticalGraphError(result.Data)

	default:
		return nil, errors.New("invalid type")
	}
}

type GetStorageStatisticsRequest struct {
	request
	// The maximum number of chats with the largest storage usage for which separate statistics need to be returned. All other chats will be grouped in entries with chat_id == 0. If the chat info database is not used, the chat_limit is ignored and is always set to 0
	ChatLimit int32 `json:"chat_limit"`
}

func (req GetStorageStatisticsRequest) GetFunctionName() string {
	return "getStorageStatistics"
}

// Returns storage usage statistics. Can be called before authorization
func (client *Client) GetStorageStatistics(ctx context.Context, req *GetStorageStatisticsRequest) (*StorageStatistics, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStorageStatistics(result.Data)
}

type GetStorageStatisticsFastRequest struct {
	request
}

func (req GetStorageStatisticsFastRequest) GetFunctionName() string {
	return "getStorageStatisticsFast"
}

// Quickly returns approximate storage usage statistics. Can be called before authorization
func (client *Client) GetStorageStatisticsFast(ctx context.Context) (*StorageStatisticsFast, error) {
	req := &GetStorageStatisticsFastRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStorageStatisticsFast(result.Data)
}

type GetDatabaseStatisticsRequest struct {
	request
}

func (req GetDatabaseStatisticsRequest) GetFunctionName() string {
	return "getDatabaseStatistics"
}

// Returns database statistics
func (client *Client) GetDatabaseStatistics(ctx context.Context) (*DatabaseStatistics, error) {
	req := &GetDatabaseStatisticsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalDatabaseStatistics(result.Data)
}

type OptimizeStorageRequest struct {
	request
	// Limit on the total size of files after deletion, in bytes. Pass -1 to use the default limit
	Size int64 `json:"size"`
	// Limit on the time that has passed since the last time a file was accessed (or creation time for some filesystems). Pass -1 to use the default limit
	Ttl int32 `json:"ttl"`
	// Limit on the total number of files after deletion. Pass -1 to use the default limit
	Count int32 `json:"count"`
	// The amount of time after the creation of a file during which it can't be deleted, in seconds. Pass -1 to use the default value
	ImmunityDelay int32 `json:"immunity_delay"`
	// If non-empty, only files with the given types are considered. By default, all types except thumbnails, profile photos, stickers and wallpapers are deleted
	FileTypes []FileType `json:"file_types"`
	// If non-empty, only files from the given chats are considered. Use 0 as chat identifier to delete files not belonging to any chat (e.g., profile photos)
	ChatIds []int64 `json:"chat_ids"`
	// If non-empty, files from the given chats are excluded. Use 0 as chat identifier to exclude all files not belonging to any chat (e.g., profile photos)
	ExcludeChatIds []int64 `json:"exclude_chat_ids"`
	// Pass true if statistics about the files that were deleted must be returned instead of the whole storage usage statistics. Affects only returned statistics
	ReturnDeletedFileStatistics bool `json:"return_deleted_file_statistics"`
	// Same as in getStorageStatistics. Affects only returned statistics
	ChatLimit int32 `json:"chat_limit"`
}

func (req OptimizeStorageRequest) GetFunctionName() string {
	return "optimizeStorage"
}

// Optimizes storage usage, i.e. deletes some files and returns new storage usage statistics. Secret thumbnails can't be deleted
func (client *Client) OptimizeStorage(ctx context.Context, req *OptimizeStorageRequest) (*StorageStatistics, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStorageStatistics(result.Data)
}

type SetNetworkTypeRequest struct {
	request
	// The new network type; pass null to set network type to networkTypeOther
	Type NetworkType `json:"type"`
}

func (req SetNetworkTypeRequest) GetFunctionName() string {
	return "setNetworkType"
}

// Sets the current network type. Can be called before authorization. Calling this method forces all network connections to reopen, mitigating the delay in switching between different networks, so it must be called whenever the network is changed, even if the network type remains the same. Network type is used to check whether the library can use the network at all and also for collecting detailed network data usage statistics
func (client *Client) SetNetworkType(ctx context.Context, req *SetNetworkTypeRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetNetworkStatisticsRequest struct {
	request
	// Pass true to get statistics only for the current library launch
	OnlyCurrent bool `json:"only_current"`
}

func (req GetNetworkStatisticsRequest) GetFunctionName() string {
	return "getNetworkStatistics"
}

// Returns network data usage statistics. Can be called before authorization
func (client *Client) GetNetworkStatistics(ctx context.Context, req *GetNetworkStatisticsRequest) (*NetworkStatistics, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalNetworkStatistics(result.Data)
}

type AddNetworkStatisticsRequest struct {
	request
	// The network statistics entry with the data to be added to statistics
	Entry NetworkStatisticsEntry `json:"entry"`
}

func (req AddNetworkStatisticsRequest) GetFunctionName() string {
	return "addNetworkStatistics"
}

// Adds the specified data to data usage statistics. Can be called before authorization
func (client *Client) AddNetworkStatistics(ctx context.Context, req *AddNetworkStatisticsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ResetNetworkStatisticsRequest struct {
	request
}

func (req ResetNetworkStatisticsRequest) GetFunctionName() string {
	return "resetNetworkStatistics"
}

// Resets all network data usage statistics to zero. Can be called before authorization
func (client *Client) ResetNetworkStatistics(ctx context.Context) (*Ok, error) {
	req := &ResetNetworkStatisticsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetAutoDownloadSettingsPresetsRequest struct {
	request
}

func (req GetAutoDownloadSettingsPresetsRequest) GetFunctionName() string {
	return "getAutoDownloadSettingsPresets"
}

// Returns auto-download settings presets for the current user
func (client *Client) GetAutoDownloadSettingsPresets(ctx context.Context) (*AutoDownloadSettingsPresets, error) {
	req := &GetAutoDownloadSettingsPresetsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalAutoDownloadSettingsPresets(result.Data)
}

type SetAutoDownloadSettingsRequest struct {
	request
	// New user auto-download settings
	Settings *AutoDownloadSettings `json:"settings"`
	// Type of the network for which the new settings are relevant
	Type NetworkType `json:"type"`
}

func (req SetAutoDownloadSettingsRequest) GetFunctionName() string {
	return "setAutoDownloadSettings"
}

// Sets auto-download settings
func (client *Client) SetAutoDownloadSettings(ctx context.Context, req *SetAutoDownloadSettingsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetAutosaveSettingsRequest struct {
	request
}

func (req GetAutosaveSettingsRequest) GetFunctionName() string {
	return "getAutosaveSettings"
}

// Returns autosave settings for the current user
func (client *Client) GetAutosaveSettings(ctx context.Context) (*AutosaveSettings, error) {
	req := &GetAutosaveSettingsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalAutosaveSettings(result.Data)
}

type SetAutosaveSettingsRequest struct {
	request
	// Autosave settings scope
	Scope AutosaveSettingsScope `json:"scope"`
	// New autosave settings for the scope; pass null to set autosave settings to default
	Settings *ScopeAutosaveSettings `json:"settings"`
}

func (req SetAutosaveSettingsRequest) GetFunctionName() string {
	return "setAutosaveSettings"
}

// Sets autosave settings for the given scope. The method is guaranteed to work only after at least one call to getAutosaveSettings
func (client *Client) SetAutosaveSettings(ctx context.Context, req *SetAutosaveSettingsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ClearAutosaveSettingsExceptionsRequest struct {
	request
}

func (req ClearAutosaveSettingsExceptionsRequest) GetFunctionName() string {
	return "clearAutosaveSettingsExceptions"
}

// Clears the list of all autosave settings exceptions. The method is guaranteed to work only after at least one call to getAutosaveSettings
func (client *Client) ClearAutosaveSettingsExceptions(ctx context.Context) (*Ok, error) {
	req := &ClearAutosaveSettingsExceptionsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetBankCardInfoRequest struct {
	request
	// The bank card number
	BankCardNumber string `json:"bank_card_number"`
}

func (req GetBankCardInfoRequest) GetFunctionName() string {
	return "getBankCardInfo"
}

// Returns information about a bank card
func (client *Client) GetBankCardInfo(ctx context.Context, req *GetBankCardInfoRequest) (*BankCardInfo, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalBankCardInfo(result.Data)
}

type GetPassportElementRequest struct {
	request
	// Telegram Passport element type
	Type PassportElementType `json:"type"`
	// The 2-step verification password of the current user
	Password string `json:"password"`
}

func (req GetPassportElementRequest) GetFunctionName() string {
	return "getPassportElement"
}

// Returns one of the available Telegram Passport elements
func (client *Client) GetPassportElement(ctx context.Context, req *GetPassportElementRequest) (PassportElement, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	switch result.MetaType {
	case ConstructorPassportElementPersonalDetails:
		return UnmarshalPassportElementPersonalDetails(result.Data)

	case ConstructorPassportElementPassport:
		return UnmarshalPassportElementPassport(result.Data)

	case ConstructorPassportElementDriverLicense:
		return UnmarshalPassportElementDriverLicense(result.Data)

	case ConstructorPassportElementIdentityCard:
		return UnmarshalPassportElementIdentityCard(result.Data)

	case ConstructorPassportElementInternalPassport:
		return UnmarshalPassportElementInternalPassport(result.Data)

	case ConstructorPassportElementAddress:
		return UnmarshalPassportElementAddress(result.Data)

	case ConstructorPassportElementUtilityBill:
		return UnmarshalPassportElementUtilityBill(result.Data)

	case ConstructorPassportElementBankStatement:
		return UnmarshalPassportElementBankStatement(result.Data)

	case ConstructorPassportElementRentalAgreement:
		return UnmarshalPassportElementRentalAgreement(result.Data)

	case ConstructorPassportElementPassportRegistration:
		return UnmarshalPassportElementPassportRegistration(result.Data)

	case ConstructorPassportElementTemporaryRegistration:
		return UnmarshalPassportElementTemporaryRegistration(result.Data)

	case ConstructorPassportElementPhoneNumber:
		return UnmarshalPassportElementPhoneNumber(result.Data)

	case ConstructorPassportElementEmailAddress:
		return UnmarshalPassportElementEmailAddress(result.Data)

	default:
		return nil, errors.New("invalid type")
	}
}

type GetAllPassportElementsRequest struct {
	request
	// The 2-step verification password of the current user
	Password string `json:"password"`
}

func (req GetAllPassportElementsRequest) GetFunctionName() string {
	return "getAllPassportElements"
}

// Returns all available Telegram Passport elements
func (client *Client) GetAllPassportElements(ctx context.Context, req *GetAllPassportElementsRequest) (*PassportElements, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalPassportElements(result.Data)
}

type SetPassportElementRequest struct {
	request
	// Input Telegram Passport element
	Element InputPassportElement `json:"element"`
	// The 2-step verification password of the current user
	Password string `json:"password"`
}

func (req SetPassportElementRequest) GetFunctionName() string {
	return "setPassportElement"
}

// Adds an element to the user's Telegram Passport. May return an error with a message "PHONE_VERIFICATION_NEEDED" or "EMAIL_VERIFICATION_NEEDED" if the chosen phone number or the chosen email address must be verified first
func (client *Client) SetPassportElement(ctx context.Context, req *SetPassportElementRequest) (PassportElement, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	switch result.MetaType {
	case ConstructorPassportElementPersonalDetails:
		return UnmarshalPassportElementPersonalDetails(result.Data)

	case ConstructorPassportElementPassport:
		return UnmarshalPassportElementPassport(result.Data)

	case ConstructorPassportElementDriverLicense:
		return UnmarshalPassportElementDriverLicense(result.Data)

	case ConstructorPassportElementIdentityCard:
		return UnmarshalPassportElementIdentityCard(result.Data)

	case ConstructorPassportElementInternalPassport:
		return UnmarshalPassportElementInternalPassport(result.Data)

	case ConstructorPassportElementAddress:
		return UnmarshalPassportElementAddress(result.Data)

	case ConstructorPassportElementUtilityBill:
		return UnmarshalPassportElementUtilityBill(result.Data)

	case ConstructorPassportElementBankStatement:
		return UnmarshalPassportElementBankStatement(result.Data)

	case ConstructorPassportElementRentalAgreement:
		return UnmarshalPassportElementRentalAgreement(result.Data)

	case ConstructorPassportElementPassportRegistration:
		return UnmarshalPassportElementPassportRegistration(result.Data)

	case ConstructorPassportElementTemporaryRegistration:
		return UnmarshalPassportElementTemporaryRegistration(result.Data)

	case ConstructorPassportElementPhoneNumber:
		return UnmarshalPassportElementPhoneNumber(result.Data)

	case ConstructorPassportElementEmailAddress:
		return UnmarshalPassportElementEmailAddress(result.Data)

	default:
		return nil, errors.New("invalid type")
	}
}

type DeletePassportElementRequest struct {
	request
	// Element type
	Type PassportElementType `json:"type"`
}

func (req DeletePassportElementRequest) GetFunctionName() string {
	return "deletePassportElement"
}

// Deletes a Telegram Passport element
func (client *Client) DeletePassportElement(ctx context.Context, req *DeletePassportElementRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetPassportElementErrorsRequest struct {
	request
	// User identifier
	UserId int64 `json:"user_id"`
	// The errors
	Errors []*InputPassportElementError `json:"errors"`
}

func (req SetPassportElementErrorsRequest) GetFunctionName() string {
	return "setPassportElementErrors"
}

// Informs the user that some of the elements in their Telegram Passport contain errors; for bots only. The user will not be able to resend the elements, until the errors are fixed
func (client *Client) SetPassportElementErrors(ctx context.Context, req *SetPassportElementErrorsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetPreferredCountryLanguageRequest struct {
	request
	// A two-letter ISO 3166-1 alpha-2 country code
	CountryCode string `json:"country_code"`
}

func (req GetPreferredCountryLanguageRequest) GetFunctionName() string {
	return "getPreferredCountryLanguage"
}

// Returns an IETF language tag of the language preferred in the country, which must be used to fill native fields in Telegram Passport personal details. Returns a 404 error if unknown
func (client *Client) GetPreferredCountryLanguage(ctx context.Context, req *GetPreferredCountryLanguageRequest) (*Text, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalText(result.Data)
}

type SendEmailAddressVerificationCodeRequest struct {
	request
	// Email address
	EmailAddress string `json:"email_address"`
}

func (req SendEmailAddressVerificationCodeRequest) GetFunctionName() string {
	return "sendEmailAddressVerificationCode"
}

// Sends a code to verify an email address to be added to a user's Telegram Passport
func (client *Client) SendEmailAddressVerificationCode(ctx context.Context, req *SendEmailAddressVerificationCodeRequest) (*EmailAddressAuthenticationCodeInfo, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalEmailAddressAuthenticationCodeInfo(result.Data)
}

type ResendEmailAddressVerificationCodeRequest struct {
	request
}

func (req ResendEmailAddressVerificationCodeRequest) GetFunctionName() string {
	return "resendEmailAddressVerificationCode"
}

// Resends the code to verify an email address to be added to a user's Telegram Passport
func (client *Client) ResendEmailAddressVerificationCode(ctx context.Context) (*EmailAddressAuthenticationCodeInfo, error) {
	req := &ResendEmailAddressVerificationCodeRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalEmailAddressAuthenticationCodeInfo(result.Data)
}

type CheckEmailAddressVerificationCodeRequest struct {
	request
	// Verification code to check
	Code string `json:"code"`
}

func (req CheckEmailAddressVerificationCodeRequest) GetFunctionName() string {
	return "checkEmailAddressVerificationCode"
}

// Checks the email address verification code for Telegram Passport
func (client *Client) CheckEmailAddressVerificationCode(ctx context.Context, req *CheckEmailAddressVerificationCodeRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetPassportAuthorizationFormRequest struct {
	request
	// User identifier of the service's bot
	BotUserId int64 `json:"bot_user_id"`
	// Telegram Passport element types requested by the service
	Scope string `json:"scope"`
	// Service's public key
	PublicKey string `json:"public_key"`
	// Unique request identifier provided by the service
	Nonce string `json:"nonce"`
}

func (req GetPassportAuthorizationFormRequest) GetFunctionName() string {
	return "getPassportAuthorizationForm"
}

// Returns a Telegram Passport authorization form for sharing data with a service
func (client *Client) GetPassportAuthorizationForm(ctx context.Context, req *GetPassportAuthorizationFormRequest) (*PassportAuthorizationForm, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalPassportAuthorizationForm(result.Data)
}

type GetPassportAuthorizationFormAvailableElementsRequest struct {
	request
	// Authorization form identifier
	AuthorizationFormId int32 `json:"authorization_form_id"`
	// The 2-step verification password of the current user
	Password string `json:"password"`
}

func (req GetPassportAuthorizationFormAvailableElementsRequest) GetFunctionName() string {
	return "getPassportAuthorizationFormAvailableElements"
}

// Returns already available Telegram Passport elements suitable for completing a Telegram Passport authorization form. Result can be received only once for each authorization form
func (client *Client) GetPassportAuthorizationFormAvailableElements(ctx context.Context, req *GetPassportAuthorizationFormAvailableElementsRequest) (*PassportElementsWithErrors, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalPassportElementsWithErrors(result.Data)
}

type SendPassportAuthorizationFormRequest struct {
	request
	// Authorization form identifier
	AuthorizationFormId int32 `json:"authorization_form_id"`
	// Types of Telegram Passport elements chosen by user to complete the authorization form
	Types []PassportElementType `json:"types"`
}

func (req SendPassportAuthorizationFormRequest) GetFunctionName() string {
	return "sendPassportAuthorizationForm"
}

// Sends a Telegram Passport authorization form, effectively sharing data with the service. This method must be called after getPassportAuthorizationFormAvailableElements if some previously available elements are going to be reused
func (client *Client) SendPassportAuthorizationForm(ctx context.Context, req *SendPassportAuthorizationFormRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetBotUpdatesStatusRequest struct {
	request
	// The number of pending updates
	PendingUpdateCount int32 `json:"pending_update_count"`
	// The last error message
	ErrorMessage string `json:"error_message"`
}

func (req SetBotUpdatesStatusRequest) GetFunctionName() string {
	return "setBotUpdatesStatus"
}

// Informs the server about the number of pending bot updates if they haven't been processed for a long time; for bots only
func (client *Client) SetBotUpdatesStatus(ctx context.Context, req *SetBotUpdatesStatusRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type UploadStickerFileRequest struct {
	request
	// Sticker file owner; ignored for regular users
	UserId int64 `json:"user_id"`
	// Sticker format
	StickerFormat StickerFormat `json:"sticker_format"`
	// File file to upload; must fit in a 512x512 square. For WEBP stickers the file must be in WEBP or PNG format, which will be converted to WEBP server-side. See https://core.telegram.org/animated_stickers#technical-requirements for technical requirements
	Sticker InputFile `json:"sticker"`
}

func (req UploadStickerFileRequest) GetFunctionName() string {
	return "uploadStickerFile"
}

// Uploads a file with a sticker; returns the uploaded file
func (client *Client) UploadStickerFile(ctx context.Context, req *UploadStickerFileRequest) (*File, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFile(result.Data)
}

type GetSuggestedStickerSetNameRequest struct {
	request
	// Sticker set title; 1-64 characters
	Title string `json:"title"`
}

func (req GetSuggestedStickerSetNameRequest) GetFunctionName() string {
	return "getSuggestedStickerSetName"
}

// Returns a suggested name for a new sticker set with a given title
func (client *Client) GetSuggestedStickerSetName(ctx context.Context, req *GetSuggestedStickerSetNameRequest) (*Text, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalText(result.Data)
}

type CheckStickerSetNameRequest struct {
	request
	// Name to be checked
	Name string `json:"name"`
}

func (req CheckStickerSetNameRequest) GetFunctionName() string {
	return "checkStickerSetName"
}

// Checks whether a name can be used for a new sticker set
func (client *Client) CheckStickerSetName(ctx context.Context, req *CheckStickerSetNameRequest) (CheckStickerSetNameResult, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	switch result.MetaType {
	case ConstructorCheckStickerSetNameResultOk:
		return UnmarshalCheckStickerSetNameResultOk(result.Data)

	case ConstructorCheckStickerSetNameResultNameInvalid:
		return UnmarshalCheckStickerSetNameResultNameInvalid(result.Data)

	case ConstructorCheckStickerSetNameResultNameOccupied:
		return UnmarshalCheckStickerSetNameResultNameOccupied(result.Data)

	default:
		return nil, errors.New("invalid type")
	}
}

type CreateNewStickerSetRequest struct {
	request
	// Sticker set owner; ignored for regular users
	UserId int64 `json:"user_id"`
	// Sticker set title; 1-64 characters
	Title string `json:"title"`
	// Sticker set name. Can contain only English letters, digits and underscores. Must end with *"_by_<bot username>"* (*<bot_username>* is case insensitive) for bots; 0-64 characters. If empty, then the name returned by getSuggestedStickerSetName will be used automatically
	Name string `json:"name"`
	// Type of the stickers in the set
	StickerType StickerType `json:"sticker_type"`
	// Pass true if stickers in the sticker set must be repainted; for custom emoji sticker sets only
	NeedsRepainting bool `json:"needs_repainting"`
	// List of stickers to be added to the set; 1-200 stickers for custom emoji sticker sets, and 1-120 stickers otherwise. For TGS stickers, uploadStickerFile must be used before the sticker is shown
	Stickers []*InputSticker `json:"stickers"`
	// Source of the sticker set; may be empty if unknown
	Source string `json:"source"`
}

func (req CreateNewStickerSetRequest) GetFunctionName() string {
	return "createNewStickerSet"
}

// Creates a new sticker set. Returns the newly created sticker set
func (client *Client) CreateNewStickerSet(ctx context.Context, req *CreateNewStickerSetRequest) (*StickerSet, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStickerSet(result.Data)
}

type AddStickerToSetRequest struct {
	request
	// Sticker set owner; ignored for regular users
	UserId int64 `json:"user_id"`
	// Sticker set name. The sticker set must be owned by the current user, and contain less than 200 stickers for custom emoji sticker sets and less than 120 otherwise
	Name string `json:"name"`
	// Sticker to add to the set
	Sticker *InputSticker `json:"sticker"`
}

func (req AddStickerToSetRequest) GetFunctionName() string {
	return "addStickerToSet"
}

// Adds a new sticker to a set
func (client *Client) AddStickerToSet(ctx context.Context, req *AddStickerToSetRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ReplaceStickerInSetRequest struct {
	request
	// Sticker set owner; ignored for regular users
	UserId int64 `json:"user_id"`
	// Sticker set name. The sticker set must be owned by the current user
	Name string `json:"name"`
	// Sticker to remove from the set
	OldSticker InputFile `json:"old_sticker"`
	// Sticker to add to the set
	NewSticker *InputSticker `json:"new_sticker"`
}

func (req ReplaceStickerInSetRequest) GetFunctionName() string {
	return "replaceStickerInSet"
}

// Replaces existing sticker in a set. The function is equivalent to removeStickerFromSet, then addStickerToSet, then setStickerPositionInSet
func (client *Client) ReplaceStickerInSet(ctx context.Context, req *ReplaceStickerInSetRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetStickerSetThumbnailRequest struct {
	request
	// Sticker set owner; ignored for regular users
	UserId int64 `json:"user_id"`
	// Sticker set name. The sticker set must be owned by the current user
	Name string `json:"name"`
	// Thumbnail to set; pass null to remove the sticker set thumbnail
	Thumbnail InputFile `json:"thumbnail"`
	// Format of the thumbnail; pass null if thumbnail is removed
	Format StickerFormat `json:"format"`
}

func (req SetStickerSetThumbnailRequest) GetFunctionName() string {
	return "setStickerSetThumbnail"
}

// Sets a sticker set thumbnail
func (client *Client) SetStickerSetThumbnail(ctx context.Context, req *SetStickerSetThumbnailRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetCustomEmojiStickerSetThumbnailRequest struct {
	request
	// Sticker set name. The sticker set must be owned by the current user
	Name string `json:"name"`
	// Identifier of the custom emoji from the sticker set, which will be set as sticker set thumbnail; pass 0 to remove the sticker set thumbnail
	CustomEmojiId JsonInt64 `json:"custom_emoji_id"`
}

func (req SetCustomEmojiStickerSetThumbnailRequest) GetFunctionName() string {
	return "setCustomEmojiStickerSetThumbnail"
}

// Sets a custom emoji sticker set thumbnail
func (client *Client) SetCustomEmojiStickerSetThumbnail(ctx context.Context, req *SetCustomEmojiStickerSetThumbnailRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetStickerSetTitleRequest struct {
	request
	// Sticker set name. The sticker set must be owned by the current user
	Name string `json:"name"`
	// New sticker set title
	Title string `json:"title"`
}

func (req SetStickerSetTitleRequest) GetFunctionName() string {
	return "setStickerSetTitle"
}

// Sets a sticker set title
func (client *Client) SetStickerSetTitle(ctx context.Context, req *SetStickerSetTitleRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type DeleteStickerSetRequest struct {
	request
	// Sticker set name. The sticker set must be owned by the current user
	Name string `json:"name"`
}

func (req DeleteStickerSetRequest) GetFunctionName() string {
	return "deleteStickerSet"
}

// Completely deletes a sticker set
func (client *Client) DeleteStickerSet(ctx context.Context, req *DeleteStickerSetRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetStickerPositionInSetRequest struct {
	request
	// Sticker
	Sticker InputFile `json:"sticker"`
	// New position of the sticker in the set, 0-based
	Position int32 `json:"position"`
}

func (req SetStickerPositionInSetRequest) GetFunctionName() string {
	return "setStickerPositionInSet"
}

// Changes the position of a sticker in the set to which it belongs. The sticker set must be owned by the current user
func (client *Client) SetStickerPositionInSet(ctx context.Context, req *SetStickerPositionInSetRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type RemoveStickerFromSetRequest struct {
	request
	// Sticker to remove from the set
	Sticker InputFile `json:"sticker"`
}

func (req RemoveStickerFromSetRequest) GetFunctionName() string {
	return "removeStickerFromSet"
}

// Removes a sticker from the set to which it belongs. The sticker set must be owned by the current user
func (client *Client) RemoveStickerFromSet(ctx context.Context, req *RemoveStickerFromSetRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetStickerEmojisRequest struct {
	request
	// Sticker
	Sticker InputFile `json:"sticker"`
	// New string with 1-20 emoji corresponding to the sticker
	Emojis string `json:"emojis"`
}

func (req SetStickerEmojisRequest) GetFunctionName() string {
	return "setStickerEmojis"
}

// Changes the list of emojis corresponding to a sticker. The sticker must belong to a regular or custom emoji sticker set that is owned by the current user
func (client *Client) SetStickerEmojis(ctx context.Context, req *SetStickerEmojisRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetStickerKeywordsRequest struct {
	request
	// Sticker
	Sticker InputFile `json:"sticker"`
	// List of up to 20 keywords with total length up to 64 characters, which can be used to find the sticker
	Keywords []string `json:"keywords"`
}

func (req SetStickerKeywordsRequest) GetFunctionName() string {
	return "setStickerKeywords"
}

// Changes the list of keywords of a sticker. The sticker must belong to a regular or custom emoji sticker set that is owned by the current user
func (client *Client) SetStickerKeywords(ctx context.Context, req *SetStickerKeywordsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetStickerMaskPositionRequest struct {
	request
	// Sticker
	Sticker InputFile `json:"sticker"`
	// Position where the mask is placed; pass null to remove mask position
	MaskPosition *MaskPosition `json:"mask_position"`
}

func (req SetStickerMaskPositionRequest) GetFunctionName() string {
	return "setStickerMaskPosition"
}

// Changes the mask position of a mask sticker. The sticker must belong to a mask sticker set that is owned by the current user
func (client *Client) SetStickerMaskPosition(ctx context.Context, req *SetStickerMaskPositionRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetOwnedStickerSetsRequest struct {
	request
	// Identifier of the sticker set from which to return owned sticker sets; use 0 to get results from the beginning
	OffsetStickerSetId JsonInt64 `json:"offset_sticker_set_id"`
	// The maximum number of sticker sets to be returned; must be positive and can't be greater than 100. For optimal performance, the number of returned objects is chosen by TDLib and can be smaller than the specified limit
	Limit int32 `json:"limit"`
}

func (req GetOwnedStickerSetsRequest) GetFunctionName() string {
	return "getOwnedStickerSets"
}

// Returns sticker sets owned by the current user
func (client *Client) GetOwnedStickerSets(ctx context.Context, req *GetOwnedStickerSetsRequest) (*StickerSets, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStickerSets(result.Data)
}

type GetMapThumbnailFileRequest struct {
	request
	// Location of the map center
	Location *Location `json:"location"`
	// Map zoom level; 13-20
	Zoom int32 `json:"zoom"`
	// Map width in pixels before applying scale; 16-1024
	Width int32 `json:"width"`
	// Map height in pixels before applying scale; 16-1024
	Height int32 `json:"height"`
	// Map scale; 1-3
	Scale int32 `json:"scale"`
	// Identifier of a chat in which the thumbnail will be shown. Use 0 if unknown
	ChatId int64 `json:"chat_id"`
}

func (req GetMapThumbnailFileRequest) GetFunctionName() string {
	return "getMapThumbnailFile"
}

// Returns information about a file with a map thumbnail in PNG format. Only map thumbnail files with size less than 1MB can be downloaded
func (client *Client) GetMapThumbnailFile(ctx context.Context, req *GetMapThumbnailFileRequest) (*File, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFile(result.Data)
}

type GetPremiumLimitRequest struct {
	request
	// Type of the limit
	LimitType PremiumLimitType `json:"limit_type"`
}

func (req GetPremiumLimitRequest) GetFunctionName() string {
	return "getPremiumLimit"
}

// Returns information about a limit, increased for Premium users. Returns a 404 error if the limit is unknown
func (client *Client) GetPremiumLimit(ctx context.Context, req *GetPremiumLimitRequest) (*PremiumLimit, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalPremiumLimit(result.Data)
}

type GetPremiumFeaturesRequest struct {
	request
	// Source of the request; pass null if the method is called from some non-standard source
	Source PremiumSource `json:"source"`
}

func (req GetPremiumFeaturesRequest) GetFunctionName() string {
	return "getPremiumFeatures"
}

// Returns information about features, available to Premium users
func (client *Client) GetPremiumFeatures(ctx context.Context, req *GetPremiumFeaturesRequest) (*PremiumFeatures, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalPremiumFeatures(result.Data)
}

type GetPremiumStickerExamplesRequest struct {
	request
}

func (req GetPremiumStickerExamplesRequest) GetFunctionName() string {
	return "getPremiumStickerExamples"
}

// Returns examples of premium stickers for demonstration purposes
func (client *Client) GetPremiumStickerExamples(ctx context.Context) (*Stickers, error) {
	req := &GetPremiumStickerExamplesRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStickers(result.Data)
}

type GetPremiumInfoStickerRequest struct {
	request
	// Number of months the Telegram Premium subscription will be active
	MonthCount int32 `json:"month_count"`
}

func (req GetPremiumInfoStickerRequest) GetFunctionName() string {
	return "getPremiumInfoSticker"
}

// Returns the sticker to be used as representation of the Telegram Premium subscription
func (client *Client) GetPremiumInfoSticker(ctx context.Context, req *GetPremiumInfoStickerRequest) (*Sticker, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalSticker(result.Data)
}

type ViewPremiumFeatureRequest struct {
	request
	// The viewed premium feature
	Feature PremiumFeature `json:"feature"`
}

func (req ViewPremiumFeatureRequest) GetFunctionName() string {
	return "viewPremiumFeature"
}

// Informs TDLib that the user viewed detailed information about a Premium feature on the Premium features screen
func (client *Client) ViewPremiumFeature(ctx context.Context, req *ViewPremiumFeatureRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ClickPremiumSubscriptionButtonRequest struct {
	request
}

func (req ClickPremiumSubscriptionButtonRequest) GetFunctionName() string {
	return "clickPremiumSubscriptionButton"
}

// Informs TDLib that the user clicked Premium subscription button on the Premium features screen
func (client *Client) ClickPremiumSubscriptionButton(ctx context.Context) (*Ok, error) {
	req := &ClickPremiumSubscriptionButtonRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetPremiumStateRequest struct {
	request
}

func (req GetPremiumStateRequest) GetFunctionName() string {
	return "getPremiumState"
}

// Returns state of Telegram Premium subscription and promotion videos for Premium features
func (client *Client) GetPremiumState(ctx context.Context) (*PremiumState, error) {
	req := &GetPremiumStateRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalPremiumState(result.Data)
}

type GetPremiumGiftPaymentOptionsRequest struct {
	request
}

func (req GetPremiumGiftPaymentOptionsRequest) GetFunctionName() string {
	return "getPremiumGiftPaymentOptions"
}

// Returns available options for gifting Telegram Premium to a user
func (client *Client) GetPremiumGiftPaymentOptions(ctx context.Context) (*PremiumGiftPaymentOptions, error) {
	req := &GetPremiumGiftPaymentOptionsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalPremiumGiftPaymentOptions(result.Data)
}

type GetPremiumGiveawayPaymentOptionsRequest struct {
	request
	// Identifier of the supergroup or channel chat, which will be automatically boosted by receivers of the gift codes and which is administered by the user
	BoostedChatId int64 `json:"boosted_chat_id"`
}

func (req GetPremiumGiveawayPaymentOptionsRequest) GetFunctionName() string {
	return "getPremiumGiveawayPaymentOptions"
}

// Returns available options for creating of Telegram Premium giveaway or manual distribution of Telegram Premium among chat members
func (client *Client) GetPremiumGiveawayPaymentOptions(ctx context.Context, req *GetPremiumGiveawayPaymentOptionsRequest) (*PremiumGiveawayPaymentOptions, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalPremiumGiveawayPaymentOptions(result.Data)
}

type CheckPremiumGiftCodeRequest struct {
	request
	// The code to check
	Code string `json:"code"`
}

func (req CheckPremiumGiftCodeRequest) GetFunctionName() string {
	return "checkPremiumGiftCode"
}

// Return information about a Telegram Premium gift code
func (client *Client) CheckPremiumGiftCode(ctx context.Context, req *CheckPremiumGiftCodeRequest) (*PremiumGiftCodeInfo, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalPremiumGiftCodeInfo(result.Data)
}

type ApplyPremiumGiftCodeRequest struct {
	request
	// The code to apply
	Code string `json:"code"`
}

func (req ApplyPremiumGiftCodeRequest) GetFunctionName() string {
	return "applyPremiumGiftCode"
}

// Applies a Telegram Premium gift code
func (client *Client) ApplyPremiumGiftCode(ctx context.Context, req *ApplyPremiumGiftCodeRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GiftPremiumWithStarsRequest struct {
	request
	// Identifier of the user which will receive Telegram Premium
	UserId int64 `json:"user_id"`
	// The number of Telegram Stars to pay for subscription
	StarCount int64 `json:"star_count"`
	// Number of months the Telegram Premium subscription will be active for the user
	MonthCount int32 `json:"month_count"`
	// Text to show to the user receiving Telegram Premium; 0-getOption("gift_text_length_max") characters. Only Bold, Italic, Underline, Strikethrough, Spoiler, and CustomEmoji entities are allowed
	Text *FormattedText `json:"text"`
}

func (req GiftPremiumWithStarsRequest) GetFunctionName() string {
	return "giftPremiumWithStars"
}

// Allows to buy a Telegram Premium subscription for another user with payment in Telegram Stars; for bots only
func (client *Client) GiftPremiumWithStars(ctx context.Context, req *GiftPremiumWithStarsRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type LaunchPrepaidGiveawayRequest struct {
	request
	// Unique identifier of the prepaid giveaway
	GiveawayId JsonInt64 `json:"giveaway_id"`
	// Giveaway parameters
	Parameters *GiveawayParameters `json:"parameters"`
	// The number of users to receive giveaway prize
	WinnerCount int32 `json:"winner_count"`
	// The number of Telegram Stars to be distributed through the giveaway; pass 0 for Telegram Premium giveaways
	StarCount int64 `json:"star_count"`
}

func (req LaunchPrepaidGiveawayRequest) GetFunctionName() string {
	return "launchPrepaidGiveaway"
}

// Launches a prepaid giveaway
func (client *Client) LaunchPrepaidGiveaway(ctx context.Context, req *LaunchPrepaidGiveawayRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetGiveawayInfoRequest struct {
	request
	// Identifier of the channel chat which started the giveaway
	ChatId int64 `json:"chat_id"`
	// Identifier of the giveaway or a giveaway winners message in the chat
	MessageId int64 `json:"message_id"`
}

func (req GetGiveawayInfoRequest) GetFunctionName() string {
	return "getGiveawayInfo"
}

// Returns information about a giveaway
func (client *Client) GetGiveawayInfo(ctx context.Context, req *GetGiveawayInfoRequest) (GiveawayInfo, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	switch result.MetaType {
	case ConstructorGiveawayInfoOngoing:
		return UnmarshalGiveawayInfoOngoing(result.Data)

	case ConstructorGiveawayInfoCompleted:
		return UnmarshalGiveawayInfoCompleted(result.Data)

	default:
		return nil, errors.New("invalid type")
	}
}

type GetStarPaymentOptionsRequest struct {
	request
}

func (req GetStarPaymentOptionsRequest) GetFunctionName() string {
	return "getStarPaymentOptions"
}

// Returns available options for Telegram Stars purchase
func (client *Client) GetStarPaymentOptions(ctx context.Context) (*StarPaymentOptions, error) {
	req := &GetStarPaymentOptionsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStarPaymentOptions(result.Data)
}

type GetStarGiftPaymentOptionsRequest struct {
	request
	// Identifier of the user that will receive Telegram Stars; pass 0 to get options for an unspecified user
	UserId int64 `json:"user_id"`
}

func (req GetStarGiftPaymentOptionsRequest) GetFunctionName() string {
	return "getStarGiftPaymentOptions"
}

// Returns available options for Telegram Stars gifting
func (client *Client) GetStarGiftPaymentOptions(ctx context.Context, req *GetStarGiftPaymentOptionsRequest) (*StarPaymentOptions, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStarPaymentOptions(result.Data)
}

type GetStarGiveawayPaymentOptionsRequest struct {
	request
}

func (req GetStarGiveawayPaymentOptionsRequest) GetFunctionName() string {
	return "getStarGiveawayPaymentOptions"
}

// Returns available options for Telegram Star giveaway creation
func (client *Client) GetStarGiveawayPaymentOptions(ctx context.Context) (*StarGiveawayPaymentOptions, error) {
	req := &GetStarGiveawayPaymentOptionsRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStarGiveawayPaymentOptions(result.Data)
}

type GetStarTransactionsRequest struct {
	request
	// Identifier of the owner of the Telegram Stars; can be the identifier of the current user, identifier of an owned bot, or identifier of a supergroup or a channel chat with supergroupFullInfo.can_get_star_revenue_statistics == true
	OwnerId MessageSender `json:"owner_id"`
	// If non-empty, only transactions related to the Star Subscription will be returned
	SubscriptionId string `json:"subscription_id"`
	// Direction of the transactions to receive; pass null to get all transactions
	Direction StarTransactionDirection `json:"direction"`
	// Offset of the first transaction to return as received from the previous request; use empty string to get the first chunk of results
	Offset string `json:"offset"`
	// The maximum number of transactions to return
	Limit int32 `json:"limit"`
}

func (req GetStarTransactionsRequest) GetFunctionName() string {
	return "getStarTransactions"
}

// Returns the list of Telegram Star transactions for the specified owner
func (client *Client) GetStarTransactions(ctx context.Context, req *GetStarTransactionsRequest) (*StarTransactions, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStarTransactions(result.Data)
}

type GetStarSubscriptionsRequest struct {
	request
	// Pass true to receive only expiring subscriptions for which there are no enough Telegram Stars to extend
	OnlyExpiring bool `json:"only_expiring"`
	// Offset of the first subscription to return as received from the previous request; use empty string to get the first chunk of results
	Offset string `json:"offset"`
}

func (req GetStarSubscriptionsRequest) GetFunctionName() string {
	return "getStarSubscriptions"
}

// Returns the list of Telegram Star subscriptions for the current user
func (client *Client) GetStarSubscriptions(ctx context.Context, req *GetStarSubscriptionsRequest) (*StarSubscriptions, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalStarSubscriptions(result.Data)
}

type CanPurchaseFromStoreRequest struct {
	request
	// Transaction purpose
	Purpose StorePaymentPurpose `json:"purpose"`
}

func (req CanPurchaseFromStoreRequest) GetFunctionName() string {
	return "canPurchaseFromStore"
}

// Checks whether an in-store purchase is possible. Must be called before any in-store purchase. For official applications only
func (client *Client) CanPurchaseFromStore(ctx context.Context, req *CanPurchaseFromStoreRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type AssignStoreTransactionRequest struct {
	request
	// Information about the transaction
	Transaction StoreTransaction `json:"transaction"`
	// Transaction purpose
	Purpose StorePaymentPurpose `json:"purpose"`
}

func (req AssignStoreTransactionRequest) GetFunctionName() string {
	return "assignStoreTransaction"
}

// Informs server about an in-store purchase. For official applications only
func (client *Client) AssignStoreTransaction(ctx context.Context, req *AssignStoreTransactionRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type EditStarSubscriptionRequest struct {
	request
	// Identifier of the subscription to change
	SubscriptionId string `json:"subscription_id"`
	// New value of is_canceled
	IsCanceled bool `json:"is_canceled"`
}

func (req EditStarSubscriptionRequest) GetFunctionName() string {
	return "editStarSubscription"
}

// Cancels or re-enables Telegram Star subscription
func (client *Client) EditStarSubscription(ctx context.Context, req *EditStarSubscriptionRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type EditUserStarSubscriptionRequest struct {
	request
	// User identifier
	UserId int64 `json:"user_id"`
	// Telegram payment identifier of the subscription
	TelegramPaymentChargeId string `json:"telegram_payment_charge_id"`
	// Pass true to cancel the subscription; pass false to allow the user to enable it
	IsCanceled bool `json:"is_canceled"`
}

func (req EditUserStarSubscriptionRequest) GetFunctionName() string {
	return "editUserStarSubscription"
}

// Cancels or re-enables Telegram Star subscription for a user; for bots only
func (client *Client) EditUserStarSubscription(ctx context.Context, req *EditUserStarSubscriptionRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type ReuseStarSubscriptionRequest struct {
	request
	// Identifier of the subscription
	SubscriptionId string `json:"subscription_id"`
}

func (req ReuseStarSubscriptionRequest) GetFunctionName() string {
	return "reuseStarSubscription"
}

// Reuses an active Telegram Star subscription to a channel chat and joins the chat again
func (client *Client) ReuseStarSubscription(ctx context.Context, req *ReuseStarSubscriptionRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetChatAffiliateProgramRequest struct {
	request
	// Identifier of the chat with an owned bot for which affiliate program is changed
	ChatId int64 `json:"chat_id"`
	// Parameters of the affiliate program; pass null to close the currently active program. If there is an active program, then commission and program duration can only be increased. If the active program is scheduled to be closed, then it can't be changed anymore
	Parameters *AffiliateProgramParameters `json:"parameters"`
}

func (req SetChatAffiliateProgramRequest) GetFunctionName() string {
	return "setChatAffiliateProgram"
}

// Changes affiliate program for a bot
func (client *Client) SetChatAffiliateProgram(ctx context.Context, req *SetChatAffiliateProgramRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SearchChatAffiliateProgramRequest struct {
	request
	// Username of the chat
	Username string `json:"username"`
	// The referrer from an internalLinkTypeChatAffiliateProgram link
	Referrer string `json:"referrer"`
}

func (req SearchChatAffiliateProgramRequest) GetFunctionName() string {
	return "searchChatAffiliateProgram"
}

// Searches a chat with an affiliate program. Returns the chat if found and the program is active
func (client *Client) SearchChatAffiliateProgram(ctx context.Context, req *SearchChatAffiliateProgramRequest) (*Chat, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalChat(result.Data)
}

type SearchAffiliateProgramsRequest struct {
	request
	// The affiliate for which affiliate programs are searched for
	Affiliate AffiliateType `json:"affiliate"`
	// Sort order for the results
	SortOrder AffiliateProgramSortOrder `json:"sort_order"`
	// Offset of the first affiliate program to return as received from the previous request; use empty string to get the first chunk of results
	Offset string `json:"offset"`
	// The maximum number of affiliate programs to return
	Limit int32 `json:"limit"`
}

func (req SearchAffiliateProgramsRequest) GetFunctionName() string {
	return "searchAffiliatePrograms"
}

// Searches affiliate programs that can be connected to the given affiliate
func (client *Client) SearchAffiliatePrograms(ctx context.Context, req *SearchAffiliateProgramsRequest) (*FoundAffiliatePrograms, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFoundAffiliatePrograms(result.Data)
}

type ConnectAffiliateProgramRequest struct {
	request
	// The affiliate to which the affiliate program will be connected
	Affiliate AffiliateType `json:"affiliate"`
	// Identifier of the bot, which affiliate program is connected
	BotUserId int64 `json:"bot_user_id"`
}

func (req ConnectAffiliateProgramRequest) GetFunctionName() string {
	return "connectAffiliateProgram"
}

// Connects an affiliate program to the given affiliate. Returns information about the connected affiliate program
func (client *Client) ConnectAffiliateProgram(ctx context.Context, req *ConnectAffiliateProgramRequest) (*ConnectedAffiliateProgram, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalConnectedAffiliateProgram(result.Data)
}

type DisconnectAffiliateProgramRequest struct {
	request
	// The affiliate to which the affiliate program is connected
	Affiliate AffiliateType `json:"affiliate"`
	// The referral link of the affiliate program
	Url string `json:"url"`
}

func (req DisconnectAffiliateProgramRequest) GetFunctionName() string {
	return "disconnectAffiliateProgram"
}

// Disconnects an affiliate program from the given affiliate and immediately deactivates its referral link. Returns updated information about the disconnected affiliate program
func (client *Client) DisconnectAffiliateProgram(ctx context.Context, req *DisconnectAffiliateProgramRequest) (*ConnectedAffiliateProgram, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalConnectedAffiliateProgram(result.Data)
}

type GetConnectedAffiliateProgramRequest struct {
	request
	// The affiliate to which the affiliate program will be connected
	Affiliate AffiliateType `json:"affiliate"`
	// Identifier of the bot that created the program
	BotUserId int64 `json:"bot_user_id"`
}

func (req GetConnectedAffiliateProgramRequest) GetFunctionName() string {
	return "getConnectedAffiliateProgram"
}

// Returns an affiliate program that were connected to the given affiliate by identifier of the bot that created the program
func (client *Client) GetConnectedAffiliateProgram(ctx context.Context, req *GetConnectedAffiliateProgramRequest) (*ConnectedAffiliateProgram, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalConnectedAffiliateProgram(result.Data)
}

type GetConnectedAffiliateProgramsRequest struct {
	request
	// The affiliate to which the affiliate program were connected
	Affiliate AffiliateType `json:"affiliate"`
	// Offset of the first affiliate program to return as received from the previous request; use empty string to get the first chunk of results
	Offset string `json:"offset"`
	// The maximum number of affiliate programs to return
	Limit int32 `json:"limit"`
}

func (req GetConnectedAffiliateProgramsRequest) GetFunctionName() string {
	return "getConnectedAffiliatePrograms"
}

// Returns affiliate programs that were connected to the given affiliate
func (client *Client) GetConnectedAffiliatePrograms(ctx context.Context, req *GetConnectedAffiliateProgramsRequest) (*ConnectedAffiliatePrograms, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalConnectedAffiliatePrograms(result.Data)
}

type GetBusinessFeaturesRequest struct {
	request
	// Source of the request; pass null if the method is called from settings or some non-standard source
	Source BusinessFeature `json:"source"`
}

func (req GetBusinessFeaturesRequest) GetFunctionName() string {
	return "getBusinessFeatures"
}

// Returns information about features, available to Business users
func (client *Client) GetBusinessFeatures(ctx context.Context, req *GetBusinessFeaturesRequest) (*BusinessFeatures, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalBusinessFeatures(result.Data)
}

type AcceptTermsOfServiceRequest struct {
	request
	// Terms of service identifier
	TermsOfServiceId string `json:"terms_of_service_id"`
}

func (req AcceptTermsOfServiceRequest) GetFunctionName() string {
	return "acceptTermsOfService"
}

// Accepts Telegram terms of services
func (client *Client) AcceptTermsOfService(ctx context.Context, req *AcceptTermsOfServiceRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SearchStringsByPrefixRequest struct {
	request
	// The strings to search in for the query
	Strings []string `json:"strings"`
	// Query to search for
	Query string `json:"query"`
	// The maximum number of objects to return
	Limit int32 `json:"limit"`
	// Pass true to receive no results for an empty query
	ReturnNoneForEmptyQuery bool `json:"return_none_for_empty_query"`
}

func (req SearchStringsByPrefixRequest) GetFunctionName() string {
	return "searchStringsByPrefix"
}

// Searches specified query by word prefixes in the provided strings. Returns 0-based positions of strings that matched. Can be called synchronously
func SearchStringsByPrefix(req *SearchStringsByPrefixRequest) (*FoundPositions, error) {
	result, err := Execute(req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalFoundPositions(result.Data)
}

// deprecated
// Searches specified query by word prefixes in the provided strings. Returns 0-based positions of strings that matched. Can be called synchronously
func (client *Client) SearchStringsByPrefix(req *SearchStringsByPrefixRequest) (*FoundPositions, error) {
	return SearchStringsByPrefix(req)
}

type SendCustomRequestRequest struct {
	request
	// The method name
	Method string `json:"method"`
	// JSON-serialized method parameters
	Parameters string `json:"parameters"`
}

func (req SendCustomRequestRequest) GetFunctionName() string {
	return "sendCustomRequest"
}

// Sends a custom request; for bots only
func (client *Client) SendCustomRequest(ctx context.Context, req *SendCustomRequestRequest) (*CustomRequestResult, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalCustomRequestResult(result.Data)
}

type AnswerCustomQueryRequest struct {
	request
	// Identifier of a custom query
	CustomQueryId JsonInt64 `json:"custom_query_id"`
	// JSON-serialized answer to the query
	Data string `json:"data"`
}

func (req AnswerCustomQueryRequest) GetFunctionName() string {
	return "answerCustomQuery"
}

// Answers a custom query; for bots only
func (client *Client) AnswerCustomQuery(ctx context.Context, req *AnswerCustomQueryRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type SetAlarmRequest struct {
	request
	// Number of seconds before the function returns
	Seconds float64 `json:"seconds"`
}

func (req SetAlarmRequest) GetFunctionName() string {
	return "setAlarm"
}

// Succeeds after a specified amount of time has passed. Can be called before initialization
func (client *Client) SetAlarm(ctx context.Context, req *SetAlarmRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetCountriesRequest struct {
	request
}

func (req GetCountriesRequest) GetFunctionName() string {
	return "getCountries"
}

// Returns information about existing countries. Can be called before authorization
func (client *Client) GetCountries(ctx context.Context) (*Countries, error) {
	req := &GetCountriesRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalCountries(result.Data)
}

type GetCountryCodeRequest struct {
	request
}

func (req GetCountryCodeRequest) GetFunctionName() string {
	return "getCountryCode"
}

// Uses the current IP address to find the current country. Returns two-letter ISO 3166-1 alpha-2 country code. Can be called before authorization
func (client *Client) GetCountryCode(ctx context.Context) (*Text, error) {
	req := &GetCountryCodeRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalText(result.Data)
}

type GetPhoneNumberInfoRequest struct {
	request
	// The phone number prefix
	PhoneNumberPrefix string `json:"phone_number_prefix"`
}

func (req GetPhoneNumberInfoRequest) GetFunctionName() string {
	return "getPhoneNumberInfo"
}

// Returns information about a phone number by its prefix. Can be called before authorization
func (client *Client) GetPhoneNumberInfo(ctx context.Context, req *GetPhoneNumberInfoRequest) (*PhoneNumberInfo, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalPhoneNumberInfo(result.Data)
}

type GetPhoneNumberInfoSyncRequest struct {
	request
	// A two-letter ISO 639-1 language code for country information localization
	LanguageCode string `json:"language_code"`
	// The phone number prefix
	PhoneNumberPrefix string `json:"phone_number_prefix"`
}

func (req GetPhoneNumberInfoSyncRequest) GetFunctionName() string {
	return "getPhoneNumberInfoSync"
}

// Returns information about a phone number by its prefix synchronously. getCountries must be called at least once after changing localization to the specified language if properly localized country information is expected. Can be called synchronously
func GetPhoneNumberInfoSync(req *GetPhoneNumberInfoSyncRequest) (*PhoneNumberInfo, error) {
	result, err := Execute(req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalPhoneNumberInfo(result.Data)
}

// deprecated
// Returns information about a phone number by its prefix synchronously. getCountries must be called at least once after changing localization to the specified language if properly localized country information is expected. Can be called synchronously
func (client *Client) GetPhoneNumberInfoSync(req *GetPhoneNumberInfoSyncRequest) (*PhoneNumberInfo, error) {
	return GetPhoneNumberInfoSync(req)
}

type GetCollectibleItemInfoRequest struct {
	request
	// Type of the collectible item. The item must be used by a user and must be visible to the current user
	Type CollectibleItemType `json:"type"`
}

func (req GetCollectibleItemInfoRequest) GetFunctionName() string {
	return "getCollectibleItemInfo"
}

// Returns information about a given collectible item that was purchased at https://fragment.com
func (client *Client) GetCollectibleItemInfo(ctx context.Context, req *GetCollectibleItemInfoRequest) (*CollectibleItemInfo, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalCollectibleItemInfo(result.Data)
}

type GetDeepLinkInfoRequest struct {
	request
	// The link
	Link string `json:"link"`
}

func (req GetDeepLinkInfoRequest) GetFunctionName() string {
	return "getDeepLinkInfo"
}

// Returns information about a tg:// deep link. Use "tg://need_update_for_some_feature" or "tg:some_unsupported_feature" for testing. Returns a 404 error for unknown links. Can be called before authorization
func (client *Client) GetDeepLinkInfo(ctx context.Context, req *GetDeepLinkInfoRequest) (*DeepLinkInfo, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalDeepLinkInfo(result.Data)
}

type GetApplicationConfigRequest struct {
	request
}

func (req GetApplicationConfigRequest) GetFunctionName() string {
	return "getApplicationConfig"
}

// Returns application config, provided by the server. Can be called before authorization
func (client *Client) GetApplicationConfig(ctx context.Context) (JsonValue, error) {
	req := &GetApplicationConfigRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	switch result.MetaType {
	case ConstructorJsonValueNull:
		return UnmarshalJsonValueNull(result.Data)

	case ConstructorJsonValueBoolean:
		return UnmarshalJsonValueBoolean(result.Data)

	case ConstructorJsonValueNumber:
		return UnmarshalJsonValueNumber(result.Data)

	case ConstructorJsonValueString:
		return UnmarshalJsonValueString(result.Data)

	case ConstructorJsonValueArray:
		return UnmarshalJsonValueArray(result.Data)

	case ConstructorJsonValueObject:
		return UnmarshalJsonValueObject(result.Data)

	default:
		return nil, errors.New("invalid type")
	}
}

type SaveApplicationLogEventRequest struct {
	request
	// Event type
	Type string `json:"type"`
	// Optional chat identifier, associated with the event
	ChatId int64 `json:"chat_id"`
	// The log event data
	Data JsonValue `json:"data"`
}

func (req SaveApplicationLogEventRequest) GetFunctionName() string {
	return "saveApplicationLogEvent"
}

// Saves application log event on the server. Can be called before authorization
func (client *Client) SaveApplicationLogEvent(ctx context.Context, req *SaveApplicationLogEventRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetApplicationDownloadLinkRequest struct {
	request
}

func (req GetApplicationDownloadLinkRequest) GetFunctionName() string {
	return "getApplicationDownloadLink"
}

// Returns the link for downloading official Telegram application to be used when the current user invites friends to Telegram
func (client *Client) GetApplicationDownloadLink(ctx context.Context) (*HttpUrl, error) {
	req := &GetApplicationDownloadLinkRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalHttpUrl(result.Data)
}

type AddProxyRequest struct {
	request
	// Proxy server domain or IP address
	Server string `json:"server"`
	// Proxy server port
	Port int32 `json:"port"`
	// Pass true to immediately enable the proxy
	Enable bool `json:"enable"`
	// Proxy type
	Type ProxyType `json:"type"`
}

func (req AddProxyRequest) GetFunctionName() string {
	return "addProxy"
}

// Adds a proxy server for network requests. Can be called before authorization
func (client *Client) AddProxy(ctx context.Context, req *AddProxyRequest) (*Proxy, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalProxy(result.Data)
}

type EditProxyRequest struct {
	request
	// Proxy identifier
	ProxyId int32 `json:"proxy_id"`
	// Proxy server domain or IP address
	Server string `json:"server"`
	// Proxy server port
	Port int32 `json:"port"`
	// Pass true to immediately enable the proxy
	Enable bool `json:"enable"`
	// Proxy type
	Type ProxyType `json:"type"`
}

func (req EditProxyRequest) GetFunctionName() string {
	return "editProxy"
}

// Edits an existing proxy server for network requests. Can be called before authorization
func (client *Client) EditProxy(ctx context.Context, req *EditProxyRequest) (*Proxy, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalProxy(result.Data)
}

type EnableProxyRequest struct {
	request
	// Proxy identifier
	ProxyId int32 `json:"proxy_id"`
}

func (req EnableProxyRequest) GetFunctionName() string {
	return "enableProxy"
}

// Enables a proxy. Only one proxy can be enabled at a time. Can be called before authorization
func (client *Client) EnableProxy(ctx context.Context, req *EnableProxyRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type DisableProxyRequest struct {
	request
}

func (req DisableProxyRequest) GetFunctionName() string {
	return "disableProxy"
}

// Disables the currently enabled proxy. Can be called before authorization
func (client *Client) DisableProxy(ctx context.Context) (*Ok, error) {
	req := &DisableProxyRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type RemoveProxyRequest struct {
	request
	// Proxy identifier
	ProxyId int32 `json:"proxy_id"`
}

func (req RemoveProxyRequest) GetFunctionName() string {
	return "removeProxy"
}

// Removes a proxy server. Can be called before authorization
func (client *Client) RemoveProxy(ctx context.Context, req *RemoveProxyRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type GetProxiesRequest struct {
	request
}

func (req GetProxiesRequest) GetFunctionName() string {
	return "getProxies"
}

// Returns the list of proxies that are currently set up. Can be called before authorization
func (client *Client) GetProxies(ctx context.Context) (*Proxies, error) {
	req := &GetProxiesRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalProxies(result.Data)
}

type GetProxyLinkRequest struct {
	request
	// Proxy identifier
	ProxyId int32 `json:"proxy_id"`
}

func (req GetProxyLinkRequest) GetFunctionName() string {
	return "getProxyLink"
}

// Returns an HTTPS link, which can be used to add a proxy. Available only for SOCKS5 and MTProto proxies. Can be called before authorization
func (client *Client) GetProxyLink(ctx context.Context, req *GetProxyLinkRequest) (*HttpUrl, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalHttpUrl(result.Data)
}

type PingProxyRequest struct {
	request
	// Proxy identifier. Use 0 to ping a Telegram server without a proxy
	ProxyId int32 `json:"proxy_id"`
}

func (req PingProxyRequest) GetFunctionName() string {
	return "pingProxy"
}

// Computes time needed to receive a response from a Telegram server through a proxy. Can be called before authorization
func (client *Client) PingProxy(ctx context.Context, req *PingProxyRequest) (*Seconds, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalSeconds(result.Data)
}

type SetLogStreamRequest struct {
	request
	// New log stream
	LogStream LogStream `json:"log_stream"`
}

func (req SetLogStreamRequest) GetFunctionName() string {
	return "setLogStream"
}

// Sets new log stream for internal logging of TDLib. Can be called synchronously
func SetLogStream(req *SetLogStreamRequest) (*Ok, error) {
	result, err := Execute(req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

// deprecated
// Sets new log stream for internal logging of TDLib. Can be called synchronously
func (client *Client) SetLogStream(req *SetLogStreamRequest) (*Ok, error) {
	return SetLogStream(req)
}

type GetLogStreamRequest struct {
	request
}

func (req GetLogStreamRequest) GetFunctionName() string {
	return "getLogStream"
}

// Returns information about currently used log stream for internal logging of TDLib. Can be called synchronously
func GetLogStream() (LogStream, error) {
	req := &GetLogStreamRequest{}
	result, err := Execute(req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	switch result.MetaType {
	case ConstructorLogStreamDefault:
		return UnmarshalLogStreamDefault(result.Data)

	case ConstructorLogStreamFile:
		return UnmarshalLogStreamFile(result.Data)

	case ConstructorLogStreamEmpty:
		return UnmarshalLogStreamEmpty(result.Data)

	default:
		return nil, errors.New("invalid type")
	}
}

// deprecated
// Returns information about currently used log stream for internal logging of TDLib. Can be called synchronously
func (client *Client) GetLogStream() (LogStream, error) {
	return GetLogStream()
}

type SetLogVerbosityLevelRequest struct {
	request
	// New value of the verbosity level for logging. Value 0 corresponds to fatal errors, value 1 corresponds to errors, value 2 corresponds to warnings and debug warnings, value 3 corresponds to informational, value 4 corresponds to debug, value 5 corresponds to verbose debug, value greater than 5 and up to 1023 can be used to enable even more logging
	NewVerbosityLevel int32 `json:"new_verbosity_level"`
}

func (req SetLogVerbosityLevelRequest) GetFunctionName() string {
	return "setLogVerbosityLevel"
}

// Sets the verbosity level of the internal logging of TDLib. Can be called synchronously
func SetLogVerbosityLevel(req *SetLogVerbosityLevelRequest) (*Ok, error) {
	result, err := Execute(req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

// deprecated
// Sets the verbosity level of the internal logging of TDLib. Can be called synchronously
func (client *Client) SetLogVerbosityLevel(req *SetLogVerbosityLevelRequest) (*Ok, error) {
	return SetLogVerbosityLevel(req)
}

type GetLogVerbosityLevelRequest struct {
	request
}

func (req GetLogVerbosityLevelRequest) GetFunctionName() string {
	return "getLogVerbosityLevel"
}

// Returns current verbosity level of the internal logging of TDLib. Can be called synchronously
func GetLogVerbosityLevel() (*LogVerbosityLevel, error) {
	req := &GetLogVerbosityLevelRequest{}
	result, err := Execute(req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalLogVerbosityLevel(result.Data)
}

// deprecated
// Returns current verbosity level of the internal logging of TDLib. Can be called synchronously
func (client *Client) GetLogVerbosityLevel() (*LogVerbosityLevel, error) {
	return GetLogVerbosityLevel()
}

type GetLogTagsRequest struct {
	request
}

func (req GetLogTagsRequest) GetFunctionName() string {
	return "getLogTags"
}

// Returns the list of available TDLib internal log tags, for example, ["actor", "binlog", "connections", "notifications", "proxy"]. Can be called synchronously
func GetLogTags() (*LogTags, error) {
	req := &GetLogTagsRequest{}
	result, err := Execute(req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalLogTags(result.Data)
}

// deprecated
// Returns the list of available TDLib internal log tags, for example, ["actor", "binlog", "connections", "notifications", "proxy"]. Can be called synchronously
func (client *Client) GetLogTags() (*LogTags, error) {
	return GetLogTags()
}

type SetLogTagVerbosityLevelRequest struct {
	request
	// Logging tag to change verbosity level
	Tag string `json:"tag"`
	// New verbosity level; 1-1024
	NewVerbosityLevel int32 `json:"new_verbosity_level"`
}

func (req SetLogTagVerbosityLevelRequest) GetFunctionName() string {
	return "setLogTagVerbosityLevel"
}

// Sets the verbosity level for a specified TDLib internal log tag. Can be called synchronously
func SetLogTagVerbosityLevel(req *SetLogTagVerbosityLevelRequest) (*Ok, error) {
	result, err := Execute(req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

// deprecated
// Sets the verbosity level for a specified TDLib internal log tag. Can be called synchronously
func (client *Client) SetLogTagVerbosityLevel(req *SetLogTagVerbosityLevelRequest) (*Ok, error) {
	return SetLogTagVerbosityLevel(req)
}

type GetLogTagVerbosityLevelRequest struct {
	request
	// Logging tag to change verbosity level
	Tag string `json:"tag"`
}

func (req GetLogTagVerbosityLevelRequest) GetFunctionName() string {
	return "getLogTagVerbosityLevel"
}

// Returns current verbosity level for a specified TDLib internal log tag. Can be called synchronously
func GetLogTagVerbosityLevel(req *GetLogTagVerbosityLevelRequest) (*LogVerbosityLevel, error) {
	result, err := Execute(req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalLogVerbosityLevel(result.Data)
}

// deprecated
// Returns current verbosity level for a specified TDLib internal log tag. Can be called synchronously
func (client *Client) GetLogTagVerbosityLevel(req *GetLogTagVerbosityLevelRequest) (*LogVerbosityLevel, error) {
	return GetLogTagVerbosityLevel(req)
}

type AddLogMessageRequest struct {
	request
	// The minimum verbosity level needed for the message to be logged; 0-1023
	VerbosityLevel int32 `json:"verbosity_level"`
	// Text of a message to log
	Text string `json:"text"`
}

func (req AddLogMessageRequest) GetFunctionName() string {
	return "addLogMessage"
}

// Adds a message to TDLib internal log. Can be called synchronously
func AddLogMessage(req *AddLogMessageRequest) (*Ok, error) {
	result, err := Execute(req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

// deprecated
// Adds a message to TDLib internal log. Can be called synchronously
func (client *Client) AddLogMessage(req *AddLogMessageRequest) (*Ok, error) {
	return AddLogMessage(req)
}

type GetUserSupportInfoRequest struct {
	request
	// User identifier
	UserId int64 `json:"user_id"`
}

func (req GetUserSupportInfoRequest) GetFunctionName() string {
	return "getUserSupportInfo"
}

// Returns support information for the given user; for Telegram support only
func (client *Client) GetUserSupportInfo(ctx context.Context, req *GetUserSupportInfoRequest) (*UserSupportInfo, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalUserSupportInfo(result.Data)
}

type SetUserSupportInfoRequest struct {
	request
	// User identifier
	UserId int64 `json:"user_id"`
	// New information message
	Message *FormattedText `json:"message"`
}

func (req SetUserSupportInfoRequest) GetFunctionName() string {
	return "setUserSupportInfo"
}

// Sets support information for the given user; for Telegram support only
func (client *Client) SetUserSupportInfo(ctx context.Context, req *SetUserSupportInfoRequest) (*UserSupportInfo, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalUserSupportInfo(result.Data)
}

type GetSupportNameRequest struct {
	request
}

func (req GetSupportNameRequest) GetFunctionName() string {
	return "getSupportName"
}

// Returns localized name of the Telegram support user; for Telegram support only
func (client *Client) GetSupportName(ctx context.Context) (*Text, error) {
	req := &GetSupportNameRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalText(result.Data)
}

type TestCallEmptyRequest struct {
	request
}

func (req TestCallEmptyRequest) GetFunctionName() string {
	return "testCallEmpty"
}

// Does nothing; for testing only. This is an offline method. Can be called before authorization
func (client *Client) TestCallEmpty(ctx context.Context) (*Ok, error) {
	req := &TestCallEmptyRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type TestCallStringRequest struct {
	request
	// String to return
	X string `json:"x"`
}

func (req TestCallStringRequest) GetFunctionName() string {
	return "testCallString"
}

// Returns the received string; for testing only. This is an offline method. Can be called before authorization
func (client *Client) TestCallString(ctx context.Context, req *TestCallStringRequest) (*TestString, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalTestString(result.Data)
}

type TestCallBytesRequest struct {
	request
	// Bytes to return
	X []byte `json:"x"`
}

func (req TestCallBytesRequest) GetFunctionName() string {
	return "testCallBytes"
}

// Returns the received bytes; for testing only. This is an offline method. Can be called before authorization
func (client *Client) TestCallBytes(ctx context.Context, req *TestCallBytesRequest) (*TestBytes, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalTestBytes(result.Data)
}

type TestCallVectorIntRequest struct {
	request
	// Vector of numbers to return
	X []int32 `json:"x"`
}

func (req TestCallVectorIntRequest) GetFunctionName() string {
	return "testCallVectorInt"
}

// Returns the received vector of numbers; for testing only. This is an offline method. Can be called before authorization
func (client *Client) TestCallVectorInt(ctx context.Context, req *TestCallVectorIntRequest) (*TestVectorInt, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalTestVectorInt(result.Data)
}

type TestCallVectorIntObjectRequest struct {
	request
	// Vector of objects to return
	X []*TestInt `json:"x"`
}

func (req TestCallVectorIntObjectRequest) GetFunctionName() string {
	return "testCallVectorIntObject"
}

// Returns the received vector of objects containing a number; for testing only. This is an offline method. Can be called before authorization
func (client *Client) TestCallVectorIntObject(ctx context.Context, req *TestCallVectorIntObjectRequest) (*TestVectorIntObject, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalTestVectorIntObject(result.Data)
}

type TestCallVectorStringRequest struct {
	request
	// Vector of strings to return
	X []string `json:"x"`
}

func (req TestCallVectorStringRequest) GetFunctionName() string {
	return "testCallVectorString"
}

// Returns the received vector of strings; for testing only. This is an offline method. Can be called before authorization
func (client *Client) TestCallVectorString(ctx context.Context, req *TestCallVectorStringRequest) (*TestVectorString, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalTestVectorString(result.Data)
}

type TestCallVectorStringObjectRequest struct {
	request
	// Vector of objects to return
	X []*TestString `json:"x"`
}

func (req TestCallVectorStringObjectRequest) GetFunctionName() string {
	return "testCallVectorStringObject"
}

// Returns the received vector of objects containing a string; for testing only. This is an offline method. Can be called before authorization
func (client *Client) TestCallVectorStringObject(ctx context.Context, req *TestCallVectorStringObjectRequest) (*TestVectorStringObject, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalTestVectorStringObject(result.Data)
}

type TestSquareIntRequest struct {
	request
	// Number to square
	X int32 `json:"x"`
}

func (req TestSquareIntRequest) GetFunctionName() string {
	return "testSquareInt"
}

// Returns the squared received number; for testing only. This is an offline method. Can be called before authorization
func (client *Client) TestSquareInt(ctx context.Context, req *TestSquareIntRequest) (*TestInt, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalTestInt(result.Data)
}

type TestNetworkRequest struct {
	request
}

func (req TestNetworkRequest) GetFunctionName() string {
	return "testNetwork"
}

// Sends a simple network request to the Telegram servers; for testing only. Can be called before authorization
func (client *Client) TestNetwork(ctx context.Context) (*Ok, error) {
	req := &TestNetworkRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type TestProxyRequest struct {
	request
	// Proxy server domain or IP address
	Server string `json:"server"`
	// Proxy server port
	Port int32 `json:"port"`
	// Proxy type
	Type ProxyType `json:"type"`
	// Identifier of a datacenter with which to test connection
	DcId int32 `json:"dc_id"`
	// The maximum overall timeout for the request
	Timeout float64 `json:"timeout"`
}

func (req TestProxyRequest) GetFunctionName() string {
	return "testProxy"
}

// Sends a simple network request to the Telegram servers via proxy; for testing only. Can be called before authorization
func (client *Client) TestProxy(ctx context.Context, req *TestProxyRequest) (*Ok, error) {
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type TestGetDifferenceRequest struct {
	request
}

func (req TestGetDifferenceRequest) GetFunctionName() string {
	return "testGetDifference"
}

// Forces an updates.getDifference call to the Telegram servers; for testing only
func (client *Client) TestGetDifference(ctx context.Context) (*Ok, error) {
	req := &TestGetDifferenceRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalOk(result.Data)
}

type TestUseUpdateRequest struct {
	request
}

func (req TestUseUpdateRequest) GetFunctionName() string {
	return "testUseUpdate"
}

// Does nothing and ensures that the Update object is used; for testing only. This is an offline method. Can be called before authorization
func (client *Client) TestUseUpdate(ctx context.Context) (Update, error) {
	req := &TestUseUpdateRequest{}
	result, err := client.Send(ctx, req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	switch result.MetaType {
	case ConstructorUpdateAuthorizationState:
		return UnmarshalUpdateAuthorizationState(result.Data)

	case ConstructorUpdateNewMessage:
		return UnmarshalUpdateNewMessage(result.Data)

	case ConstructorUpdateMessageSendAcknowledged:
		return UnmarshalUpdateMessageSendAcknowledged(result.Data)

	case ConstructorUpdateMessageSendSucceeded:
		return UnmarshalUpdateMessageSendSucceeded(result.Data)

	case ConstructorUpdateMessageSendFailed:
		return UnmarshalUpdateMessageSendFailed(result.Data)

	case ConstructorUpdateMessageContent:
		return UnmarshalUpdateMessageContent(result.Data)

	case ConstructorUpdateMessageEdited:
		return UnmarshalUpdateMessageEdited(result.Data)

	case ConstructorUpdateMessageIsPinned:
		return UnmarshalUpdateMessageIsPinned(result.Data)

	case ConstructorUpdateMessageInteractionInfo:
		return UnmarshalUpdateMessageInteractionInfo(result.Data)

	case ConstructorUpdateMessageContentOpened:
		return UnmarshalUpdateMessageContentOpened(result.Data)

	case ConstructorUpdateMessageMentionRead:
		return UnmarshalUpdateMessageMentionRead(result.Data)

	case ConstructorUpdateMessageUnreadReactions:
		return UnmarshalUpdateMessageUnreadReactions(result.Data)

	case ConstructorUpdateMessageFactCheck:
		return UnmarshalUpdateMessageFactCheck(result.Data)

	case ConstructorUpdateMessageLiveLocationViewed:
		return UnmarshalUpdateMessageLiveLocationViewed(result.Data)

	case ConstructorUpdateVideoPublished:
		return UnmarshalUpdateVideoPublished(result.Data)

	case ConstructorUpdateNewChat:
		return UnmarshalUpdateNewChat(result.Data)

	case ConstructorUpdateChatTitle:
		return UnmarshalUpdateChatTitle(result.Data)

	case ConstructorUpdateChatPhoto:
		return UnmarshalUpdateChatPhoto(result.Data)

	case ConstructorUpdateChatAccentColors:
		return UnmarshalUpdateChatAccentColors(result.Data)

	case ConstructorUpdateChatPermissions:
		return UnmarshalUpdateChatPermissions(result.Data)

	case ConstructorUpdateChatLastMessage:
		return UnmarshalUpdateChatLastMessage(result.Data)

	case ConstructorUpdateChatPosition:
		return UnmarshalUpdateChatPosition(result.Data)

	case ConstructorUpdateChatAddedToList:
		return UnmarshalUpdateChatAddedToList(result.Data)

	case ConstructorUpdateChatRemovedFromList:
		return UnmarshalUpdateChatRemovedFromList(result.Data)

	case ConstructorUpdateChatReadInbox:
		return UnmarshalUpdateChatReadInbox(result.Data)

	case ConstructorUpdateChatReadOutbox:
		return UnmarshalUpdateChatReadOutbox(result.Data)

	case ConstructorUpdateChatActionBar:
		return UnmarshalUpdateChatActionBar(result.Data)

	case ConstructorUpdateChatBusinessBotManageBar:
		return UnmarshalUpdateChatBusinessBotManageBar(result.Data)

	case ConstructorUpdateChatAvailableReactions:
		return UnmarshalUpdateChatAvailableReactions(result.Data)

	case ConstructorUpdateChatDraftMessage:
		return UnmarshalUpdateChatDraftMessage(result.Data)

	case ConstructorUpdateChatEmojiStatus:
		return UnmarshalUpdateChatEmojiStatus(result.Data)

	case ConstructorUpdateChatMessageSender:
		return UnmarshalUpdateChatMessageSender(result.Data)

	case ConstructorUpdateChatMessageAutoDeleteTime:
		return UnmarshalUpdateChatMessageAutoDeleteTime(result.Data)

	case ConstructorUpdateChatNotificationSettings:
		return UnmarshalUpdateChatNotificationSettings(result.Data)

	case ConstructorUpdateChatPendingJoinRequests:
		return UnmarshalUpdateChatPendingJoinRequests(result.Data)

	case ConstructorUpdateChatReplyMarkup:
		return UnmarshalUpdateChatReplyMarkup(result.Data)

	case ConstructorUpdateChatBackground:
		return UnmarshalUpdateChatBackground(result.Data)

	case ConstructorUpdateChatTheme:
		return UnmarshalUpdateChatTheme(result.Data)

	case ConstructorUpdateChatUnreadMentionCount:
		return UnmarshalUpdateChatUnreadMentionCount(result.Data)

	case ConstructorUpdateChatUnreadReactionCount:
		return UnmarshalUpdateChatUnreadReactionCount(result.Data)

	case ConstructorUpdateChatVideoChat:
		return UnmarshalUpdateChatVideoChat(result.Data)

	case ConstructorUpdateChatDefaultDisableNotification:
		return UnmarshalUpdateChatDefaultDisableNotification(result.Data)

	case ConstructorUpdateChatHasProtectedContent:
		return UnmarshalUpdateChatHasProtectedContent(result.Data)

	case ConstructorUpdateChatIsTranslatable:
		return UnmarshalUpdateChatIsTranslatable(result.Data)

	case ConstructorUpdateChatIsMarkedAsUnread:
		return UnmarshalUpdateChatIsMarkedAsUnread(result.Data)

	case ConstructorUpdateChatViewAsTopics:
		return UnmarshalUpdateChatViewAsTopics(result.Data)

	case ConstructorUpdateChatBlockList:
		return UnmarshalUpdateChatBlockList(result.Data)

	case ConstructorUpdateChatHasScheduledMessages:
		return UnmarshalUpdateChatHasScheduledMessages(result.Data)

	case ConstructorUpdateChatFolders:
		return UnmarshalUpdateChatFolders(result.Data)

	case ConstructorUpdateChatOnlineMemberCount:
		return UnmarshalUpdateChatOnlineMemberCount(result.Data)

	case ConstructorUpdateSavedMessagesTopic:
		return UnmarshalUpdateSavedMessagesTopic(result.Data)

	case ConstructorUpdateSavedMessagesTopicCount:
		return UnmarshalUpdateSavedMessagesTopicCount(result.Data)

	case ConstructorUpdateQuickReplyShortcut:
		return UnmarshalUpdateQuickReplyShortcut(result.Data)

	case ConstructorUpdateQuickReplyShortcutDeleted:
		return UnmarshalUpdateQuickReplyShortcutDeleted(result.Data)

	case ConstructorUpdateQuickReplyShortcuts:
		return UnmarshalUpdateQuickReplyShortcuts(result.Data)

	case ConstructorUpdateQuickReplyShortcutMessages:
		return UnmarshalUpdateQuickReplyShortcutMessages(result.Data)

	case ConstructorUpdateForumTopicInfo:
		return UnmarshalUpdateForumTopicInfo(result.Data)

	case ConstructorUpdateForumTopic:
		return UnmarshalUpdateForumTopic(result.Data)

	case ConstructorUpdateScopeNotificationSettings:
		return UnmarshalUpdateScopeNotificationSettings(result.Data)

	case ConstructorUpdateReactionNotificationSettings:
		return UnmarshalUpdateReactionNotificationSettings(result.Data)

	case ConstructorUpdateNotification:
		return UnmarshalUpdateNotification(result.Data)

	case ConstructorUpdateNotificationGroup:
		return UnmarshalUpdateNotificationGroup(result.Data)

	case ConstructorUpdateActiveNotifications:
		return UnmarshalUpdateActiveNotifications(result.Data)

	case ConstructorUpdateHavePendingNotifications:
		return UnmarshalUpdateHavePendingNotifications(result.Data)

	case ConstructorUpdateDeleteMessages:
		return UnmarshalUpdateDeleteMessages(result.Data)

	case ConstructorUpdateChatAction:
		return UnmarshalUpdateChatAction(result.Data)

	case ConstructorUpdateUserStatus:
		return UnmarshalUpdateUserStatus(result.Data)

	case ConstructorUpdateUser:
		return UnmarshalUpdateUser(result.Data)

	case ConstructorUpdateBasicGroup:
		return UnmarshalUpdateBasicGroup(result.Data)

	case ConstructorUpdateSupergroup:
		return UnmarshalUpdateSupergroup(result.Data)

	case ConstructorUpdateSecretChat:
		return UnmarshalUpdateSecretChat(result.Data)

	case ConstructorUpdateUserFullInfo:
		return UnmarshalUpdateUserFullInfo(result.Data)

	case ConstructorUpdateBasicGroupFullInfo:
		return UnmarshalUpdateBasicGroupFullInfo(result.Data)

	case ConstructorUpdateSupergroupFullInfo:
		return UnmarshalUpdateSupergroupFullInfo(result.Data)

	case ConstructorUpdateServiceNotification:
		return UnmarshalUpdateServiceNotification(result.Data)

	case ConstructorUpdateFile:
		return UnmarshalUpdateFile(result.Data)

	case ConstructorUpdateFileGenerationStart:
		return UnmarshalUpdateFileGenerationStart(result.Data)

	case ConstructorUpdateFileGenerationStop:
		return UnmarshalUpdateFileGenerationStop(result.Data)

	case ConstructorUpdateFileDownloads:
		return UnmarshalUpdateFileDownloads(result.Data)

	case ConstructorUpdateFileAddedToDownloads:
		return UnmarshalUpdateFileAddedToDownloads(result.Data)

	case ConstructorUpdateFileDownload:
		return UnmarshalUpdateFileDownload(result.Data)

	case ConstructorUpdateFileRemovedFromDownloads:
		return UnmarshalUpdateFileRemovedFromDownloads(result.Data)

	case ConstructorUpdateApplicationVerificationRequired:
		return UnmarshalUpdateApplicationVerificationRequired(result.Data)

	case ConstructorUpdateApplicationRecaptchaVerificationRequired:
		return UnmarshalUpdateApplicationRecaptchaVerificationRequired(result.Data)

	case ConstructorUpdateCall:
		return UnmarshalUpdateCall(result.Data)

	case ConstructorUpdateGroupCall:
		return UnmarshalUpdateGroupCall(result.Data)

	case ConstructorUpdateGroupCallParticipant:
		return UnmarshalUpdateGroupCallParticipant(result.Data)

	case ConstructorUpdateNewCallSignalingData:
		return UnmarshalUpdateNewCallSignalingData(result.Data)

	case ConstructorUpdateUserPrivacySettingRules:
		return UnmarshalUpdateUserPrivacySettingRules(result.Data)

	case ConstructorUpdateUnreadMessageCount:
		return UnmarshalUpdateUnreadMessageCount(result.Data)

	case ConstructorUpdateUnreadChatCount:
		return UnmarshalUpdateUnreadChatCount(result.Data)

	case ConstructorUpdateStory:
		return UnmarshalUpdateStory(result.Data)

	case ConstructorUpdateStoryDeleted:
		return UnmarshalUpdateStoryDeleted(result.Data)

	case ConstructorUpdateStorySendSucceeded:
		return UnmarshalUpdateStorySendSucceeded(result.Data)

	case ConstructorUpdateStorySendFailed:
		return UnmarshalUpdateStorySendFailed(result.Data)

	case ConstructorUpdateChatActiveStories:
		return UnmarshalUpdateChatActiveStories(result.Data)

	case ConstructorUpdateStoryListChatCount:
		return UnmarshalUpdateStoryListChatCount(result.Data)

	case ConstructorUpdateStoryStealthMode:
		return UnmarshalUpdateStoryStealthMode(result.Data)

	case ConstructorUpdateOption:
		return UnmarshalUpdateOption(result.Data)

	case ConstructorUpdateStickerSet:
		return UnmarshalUpdateStickerSet(result.Data)

	case ConstructorUpdateInstalledStickerSets:
		return UnmarshalUpdateInstalledStickerSets(result.Data)

	case ConstructorUpdateTrendingStickerSets:
		return UnmarshalUpdateTrendingStickerSets(result.Data)

	case ConstructorUpdateRecentStickers:
		return UnmarshalUpdateRecentStickers(result.Data)

	case ConstructorUpdateFavoriteStickers:
		return UnmarshalUpdateFavoriteStickers(result.Data)

	case ConstructorUpdateSavedAnimations:
		return UnmarshalUpdateSavedAnimations(result.Data)

	case ConstructorUpdateSavedNotificationSounds:
		return UnmarshalUpdateSavedNotificationSounds(result.Data)

	case ConstructorUpdateDefaultBackground:
		return UnmarshalUpdateDefaultBackground(result.Data)

	case ConstructorUpdateChatThemes:
		return UnmarshalUpdateChatThemes(result.Data)

	case ConstructorUpdateAccentColors:
		return UnmarshalUpdateAccentColors(result.Data)

	case ConstructorUpdateProfileAccentColors:
		return UnmarshalUpdateProfileAccentColors(result.Data)

	case ConstructorUpdateLanguagePackStrings:
		return UnmarshalUpdateLanguagePackStrings(result.Data)

	case ConstructorUpdateConnectionState:
		return UnmarshalUpdateConnectionState(result.Data)

	case ConstructorUpdateFreezeState:
		return UnmarshalUpdateFreezeState(result.Data)

	case ConstructorUpdateTermsOfService:
		return UnmarshalUpdateTermsOfService(result.Data)

	case ConstructorUpdateUnconfirmedSession:
		return UnmarshalUpdateUnconfirmedSession(result.Data)

	case ConstructorUpdateAttachmentMenuBots:
		return UnmarshalUpdateAttachmentMenuBots(result.Data)

	case ConstructorUpdateWebAppMessageSent:
		return UnmarshalUpdateWebAppMessageSent(result.Data)

	case ConstructorUpdateActiveEmojiReactions:
		return UnmarshalUpdateActiveEmojiReactions(result.Data)

	case ConstructorUpdateAvailableMessageEffects:
		return UnmarshalUpdateAvailableMessageEffects(result.Data)

	case ConstructorUpdateDefaultReactionType:
		return UnmarshalUpdateDefaultReactionType(result.Data)

	case ConstructorUpdateDefaultPaidReactionType:
		return UnmarshalUpdateDefaultPaidReactionType(result.Data)

	case ConstructorUpdateSavedMessagesTags:
		return UnmarshalUpdateSavedMessagesTags(result.Data)

	case ConstructorUpdateActiveLiveLocationMessages:
		return UnmarshalUpdateActiveLiveLocationMessages(result.Data)

	case ConstructorUpdateOwnedStarCount:
		return UnmarshalUpdateOwnedStarCount(result.Data)

	case ConstructorUpdateChatRevenueAmount:
		return UnmarshalUpdateChatRevenueAmount(result.Data)

	case ConstructorUpdateStarRevenueStatus:
		return UnmarshalUpdateStarRevenueStatus(result.Data)

	case ConstructorUpdateSpeechRecognitionTrial:
		return UnmarshalUpdateSpeechRecognitionTrial(result.Data)

	case ConstructorUpdateDiceEmojis:
		return UnmarshalUpdateDiceEmojis(result.Data)

	case ConstructorUpdateAnimatedEmojiMessageClicked:
		return UnmarshalUpdateAnimatedEmojiMessageClicked(result.Data)

	case ConstructorUpdateAnimationSearchParameters:
		return UnmarshalUpdateAnimationSearchParameters(result.Data)

	case ConstructorUpdateSuggestedActions:
		return UnmarshalUpdateSuggestedActions(result.Data)

	case ConstructorUpdateSpeedLimitNotification:
		return UnmarshalUpdateSpeedLimitNotification(result.Data)

	case ConstructorUpdateContactCloseBirthdays:
		return UnmarshalUpdateContactCloseBirthdays(result.Data)

	case ConstructorUpdateAutosaveSettings:
		return UnmarshalUpdateAutosaveSettings(result.Data)

	case ConstructorUpdateBusinessConnection:
		return UnmarshalUpdateBusinessConnection(result.Data)

	case ConstructorUpdateNewBusinessMessage:
		return UnmarshalUpdateNewBusinessMessage(result.Data)

	case ConstructorUpdateBusinessMessageEdited:
		return UnmarshalUpdateBusinessMessageEdited(result.Data)

	case ConstructorUpdateBusinessMessagesDeleted:
		return UnmarshalUpdateBusinessMessagesDeleted(result.Data)

	case ConstructorUpdateNewInlineQuery:
		return UnmarshalUpdateNewInlineQuery(result.Data)

	case ConstructorUpdateNewChosenInlineResult:
		return UnmarshalUpdateNewChosenInlineResult(result.Data)

	case ConstructorUpdateNewCallbackQuery:
		return UnmarshalUpdateNewCallbackQuery(result.Data)

	case ConstructorUpdateNewInlineCallbackQuery:
		return UnmarshalUpdateNewInlineCallbackQuery(result.Data)

	case ConstructorUpdateNewBusinessCallbackQuery:
		return UnmarshalUpdateNewBusinessCallbackQuery(result.Data)

	case ConstructorUpdateNewShippingQuery:
		return UnmarshalUpdateNewShippingQuery(result.Data)

	case ConstructorUpdateNewPreCheckoutQuery:
		return UnmarshalUpdateNewPreCheckoutQuery(result.Data)

	case ConstructorUpdateNewCustomEvent:
		return UnmarshalUpdateNewCustomEvent(result.Data)

	case ConstructorUpdateNewCustomQuery:
		return UnmarshalUpdateNewCustomQuery(result.Data)

	case ConstructorUpdatePoll:
		return UnmarshalUpdatePoll(result.Data)

	case ConstructorUpdatePollAnswer:
		return UnmarshalUpdatePollAnswer(result.Data)

	case ConstructorUpdateChatMember:
		return UnmarshalUpdateChatMember(result.Data)

	case ConstructorUpdateNewChatJoinRequest:
		return UnmarshalUpdateNewChatJoinRequest(result.Data)

	case ConstructorUpdateChatBoost:
		return UnmarshalUpdateChatBoost(result.Data)

	case ConstructorUpdateMessageReaction:
		return UnmarshalUpdateMessageReaction(result.Data)

	case ConstructorUpdateMessageReactions:
		return UnmarshalUpdateMessageReactions(result.Data)

	case ConstructorUpdatePaidMediaPurchased:
		return UnmarshalUpdatePaidMediaPurchased(result.Data)

	default:
		return nil, errors.New("invalid type")
	}
}

type TestReturnErrorRequest struct {
	request
	// The error to be returned
	Error *Error `json:"error"`
}

func (req TestReturnErrorRequest) GetFunctionName() string {
	return "testReturnError"
}

// Returns the specified error and ensures that the Error object is used; for testing only. Can be called synchronously
func TestReturnError(req *TestReturnErrorRequest) (*Error, error) {
	result, err := Execute(req)
	if err != nil {
		return nil, err
	}

	if result.MetaType == "error" {
		return nil, buildResponseError(result.Data)
	}

	return UnmarshalError(result.Data)
}

// deprecated
// Returns the specified error and ensures that the Error object is used; for testing only. Can be called synchronously
func (client *Client) TestReturnError(req *TestReturnErrorRequest) (*Error, error) {
	return TestReturnError(req)
}
